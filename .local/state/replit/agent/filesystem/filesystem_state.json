{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Medical Data Analysis Platform\n\n## Overview\n\nThis is a full-stack web application for analyzing medical data compatibility between medications and ICD-10 diagnosis codes. The platform allows healthcare professionals to upload Excel files containing patient medication and diagnosis data, then automatically analyzes compatibility based on predefined medical rules and contraindications. The system provides comprehensive dashboards, detailed compatibility reports, and identifies potential medication-diagnosis mismatches that require review.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client-side is built with **React 18** using **TypeScript** for type safety. The application uses **Wouter** for lightweight client-side routing and **TanStack Query** for efficient server state management and data fetching. The UI is constructed with **shadcn/ui** components built on top of **Radix UI** primitives, styled with **Tailwind CSS** using CSS variables for theming support.\n\nKey architectural decisions:\n- **Component-based architecture**: Modular UI components organized by feature (dashboard, upload, layout)\n- **Custom hooks**: Centralized logic for mobile detection, toast notifications, and form handling\n- **Query-based state management**: Server state handled by TanStack Query with automatic caching and synchronization\n- **Type-safe data flow**: Full TypeScript coverage with shared schema types between client and server\n\n### Backend Architecture\nThe server is built with **Express.js** and **TypeScript**, following a REST API architecture pattern. The application uses **Drizzle ORM** with **PostgreSQL** for data persistence and type-safe database operations. File uploads are handled with **Multer** for processing Excel files, which are then parsed using **XLSX** library.\n\nKey architectural decisions:\n- **Layered architecture**: Separation of routes, storage layer, and business logic\n- **In-memory storage adapter**: Abstracted storage interface with initial memory implementation, easily replaceable with database persistence\n- **Type-safe API contracts**: Shared schema validation using Zod for runtime type checking\n- **Modular route handling**: Clean separation of API endpoints with centralized error handling\n\n### Data Storage Solutions\nThe application uses **PostgreSQL** as the primary database with **Drizzle ORM** for type-safe queries and migrations. The schema includes tables for medical records, analysis results, ICD-10 codes, and medication data. Database operations are abstracted through a storage interface pattern, allowing for easy testing and potential database switching.\n\nDatabase design rationale:\n- **Normalized schema**: Separate tables for different entity types with proper relationships\n- **Flexible JSON fields**: Contraindications and compatibility data stored as JSONB for complex medical rule storage\n- **Audit trail**: Timestamp fields for tracking record creation and analysis history\n- **Scalable indexing**: Primary keys and foreign key relationships optimized for query performance\n\n### Authentication and Authorization\nCurrently, the application operates without authentication mechanisms, suggesting it's designed for internal medical professional use within secured networks. User interface includes placeholder avatar components indicating future authentication integration capability.\n\n### External Dependencies\n\n#### Database Integration\n- **@neondatabase/serverless**: PostgreSQL database connection optimized for serverless deployments\n- **Drizzle ORM**: Type-safe database operations with automatic migration support\n- **connect-pg-simple**: Session storage integration for future authentication needs\n\n#### File Processing\n- **Multer**: Multipart form data handling for Excel file uploads\n- **XLSX**: Excel file parsing and data extraction from medical spreadsheets\n- **File validation**: 10MB size limits and format validation for medical data files\n\n#### UI Framework & Styling\n- **Radix UI**: Comprehensive component primitives for accessible UI elements\n- **Tailwind CSS**: Utility-first CSS framework with custom medical application theming\n- **Recharts**: Data visualization library for compatibility charts and medical analytics\n- **Lucide React**: Icon system optimized for medical and healthcare applications\n\n#### Development & Build Tools\n- **Vite**: Modern build tool with React plugin for fast development and optimized production builds\n- **TypeScript**: Full type safety across the entire application stack\n- **ESBuild**: Fast TypeScript compilation for server-side code bundling\n- **PostCSS**: CSS processing pipeline for Tailwind CSS optimization\n\nThe architecture prioritizes medical data accuracy, type safety, and scalable analysis of medication-diagnosis compatibility while maintaining a clean separation of concerns suitable for healthcare applications.","size_bytes":4937},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        success: {\n          DEFAULT: \"var(--success)\",\n          foreground: \"var(--success-foreground)\",\n        },\n        warning: {\n          DEFAULT: \"var(--warning)\",\n          foreground: \"var(--warning-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2991},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nlet connectionString: string;\n\nif (process.env.DATABASE_URL) {\n  connectionString = process.env.DATABASE_URL;\n} else if (process.env.REPLIT_DB_URL) {\n  connectionString = process.env.REPLIT_DB_URL;\n} else {\n  // Check for individual PostgreSQL environment variables\n  const pgHost = process.env.PGHOST;\n  const pgPort = process.env.PGPORT;\n  const pgDatabase = process.env.PGDATABASE;\n  const pgUser = process.env.PGUSER;\n  const pgPassword = process.env.PGPASSWORD;\n\n  if (pgHost && pgPort && pgDatabase && pgUser && pgPassword) {\n    connectionString = `postgresql://${pgUser}:${pgPassword}@${pgHost}:${pgPort}/${pgDatabase}`;\n  } else {\n    throw new Error(\n      \"Database connection not configured. Need either DATABASE_URL, REPLIT_DB_URL, or individual PG environment variables (PGHOST, PGPORT, PGDATABASE, PGUSER, PGPASSWORD).\"\n    );\n  }\n}\n\nexport const pool = new Pool({ connectionString });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":1173},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport * as XLSX from \"xlsx\";\n\ninterface MulterRequest extends Request {\n  file?: Express.Multer.File;\n}\nimport { storage } from \"./storage\";\nimport { insertMedicalRecordSchema, insertAnalysisResultSchema, type UploadedFileData, type CompatibilityAnalysis, type CompatibilityConfig, defaultCompatibilityConfig } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { icd10Service } from \"./services/icd10Service\";\nimport { medicationService, type MedicationContraindication } from \"./services/medicationService\";\n\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\n// FDA status caching to avoid burning quota\ninterface CachedFdaStatus {\n  data: any;\n  timestamp: number;\n  expiresAt: number;\n}\n\nlet fdaStatusCache: CachedFdaStatus | null = null;\nconst FDA_STATUS_CACHE_DURATION = 8 * 60 * 1000; // 8 minutes cache\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Upload and analyze Excel file\n  app.post(\"/api/upload\", upload.single(\"file\"), async (req: MulterRequest, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const workbook = XLSX.read(req.file.buffer, { type: \"buffer\" });\n      const sheetName = workbook.SheetNames[0];\n      const worksheet = workbook.Sheets[sheetName];\n      const data: UploadedFileData[] = XLSX.utils.sheet_to_json(worksheet);\n\n      if (data.length === 0) {\n        return res.status(400).json({ message: \"No data found in the uploaded file\" });\n      }\n\n      // Define column mapping for different Excel formats\n      const firstRow = data[0];\n      const columnMapping = detectColumnMapping(firstRow);\n      \n      if (!columnMapping.isValid) {\n        return res.status(400).json({ \n          message: `Missing required columns. Expected format should include: Claim Code Ref, Speciality, Active Ingredient, and at least one Diag column. Found columns: ${Object.keys(firstRow).join(\", \")}` \n        });\n      }\n\n      // Analyze each record\n      const analyzedRecords = [];\n      let compatibleCount = 0;\n      let needsReviewCount = 0;\n      let incompatibleCount = 0;\n\n      for (const row of data) {\n        // Map Excel columns to our expected format (now async to use FDA API)\n        \n        // Process each mapped row (one per diagnosis if multiple diagnoses)\n        const mappedRows = await mapRowData(row, columnMapping);\n        for (const mappedRow of mappedRows) {\n          const analysis = await analyzeCompatibility(mappedRow);\n          \n          const medicalRecord = {\n            patientId: mappedRow.patientId,\n            medication: mappedRow.medication,\n            dosage: mappedRow.dosage || \"\",\n            activeIngredient: analysis.activeIngredient,\n            diagnosis: mappedRow.diagnosis,\n            icd10Code: mappedRow.icd10Code || await findIcd10Code(mappedRow.diagnosis),\n            specialty: analysis.specialty,\n            riskLevel: analysis.riskLevel,\n            isCompatible: analysis.isCompatible,\n            analysisNotes: analysis.notes,\n          };\n\n          analyzedRecords.push(medicalRecord);\n\n          if (analysis.isCompatible && analysis.riskLevel === \"low\") {\n            compatibleCount++;\n          } else if (analysis.riskLevel === \"medium\") {\n            needsReviewCount++;\n          } else {\n            incompatibleCount++;\n          }\n        }\n      }\n\n      // Validate that we have records to analyze\n      const totalAnalyzedRecords = analyzedRecords.length;\n      if (totalAnalyzedRecords === 0) {\n        return res.status(400).json({ \n          message: \"No valid diagnosis data found in the uploaded file. Please ensure your Excel file contains at least one row with valid diagnosis codes in Diag columns.\" \n        });\n      }\n      \n      // Save records to storage\n      const savedRecords = await storage.createMedicalRecords(analyzedRecords);\n      \n      // Create analysis result\n      const successRate = ((compatibleCount / totalAnalyzedRecords) * 100).toFixed(1);\n      const specialties = new Set(analyzedRecords.map(r => r.specialty));\n      \n      const analysisResult = await storage.createAnalysisResult({\n        fileName: req.file.originalname,\n        totalRecords: totalAnalyzedRecords,\n        compatibleRecords: compatibleCount,\n        incompatibleRecords: incompatibleCount,\n        needsReviewRecords: needsReviewCount,\n        successRate: `${successRate}%`,\n        specialtiesAffected: specialties.size,\n        processingStatus: \"completed\"\n      });\n\n      res.json({\n        success: true,\n        analysisId: analysisResult.id,\n        summary: {\n          totalRecords: totalAnalyzedRecords,\n          compatibleRecords: compatibleCount,\n          incompatibleRecords: incompatibleCount,\n          needsReviewRecords: needsReviewCount,\n          successRate: `${successRate}%`,\n          specialtiesAffected: specialties.size\n        }\n      });\n\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      res.status(500).json({ message: \"Failed to process file\" });\n    }\n  });\n\n  // Zod schema for CompatibilityConfig validation\n  const compatibilityConfigSchema = z.object({\n    compatible: z.object({\n      riskLevels: z.array(z.enum([\"low\", \"medium\", \"high\"])),\n      requiresCompatibleFlag: z.boolean()\n    }),\n    needsReview: z.object({\n      riskLevels: z.array(z.enum([\"low\", \"medium\", \"high\"]))\n    }),\n    incompatible: z.object({\n      riskLevels: z.array(z.enum([\"low\", \"medium\", \"high\"])),\n      includeIncompatibleFlag: z.boolean()\n    })\n  });\n\n  // Get dashboard statistics (backward compatibility)\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard statistics\" });\n    }\n  });\n\n  // Post dashboard statistics with custom config\n  app.post(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      let config: CompatibilityConfig = defaultCompatibilityConfig;\n      \n      // If config is provided in request body, validate and use it\n      if (req.body && Object.keys(req.body).length > 0) {\n        try {\n          const validatedConfig = compatibilityConfigSchema.parse(req.body);\n          config = validatedConfig;\n        } catch (validationError) {\n          return res.status(400).json({ \n            message: \"Invalid compatibility configuration\", \n            errors: validationError instanceof z.ZodError ? validationError.errors : [\"Invalid configuration format\"]\n          });\n        }\n      }\n      \n      const stats = await storage.getDashboardStats(config);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Dashboard stats error:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard statistics\" });\n    }\n  });\n\n  // Get specialty breakdown\n  app.get(\"/api/dashboard/specialties\", async (req, res) => {\n    try {\n      const specialties = await storage.getSpecialtyBreakdown();\n      res.json(specialties);\n    } catch (error) {\n      console.error(\"Specialty breakdown error:\", error);\n      res.status(500).json({ message: \"Failed to fetch specialty breakdown\" });\n    }\n  });\n\n  // Get incompatible records\n  app.get(\"/api/mismatches\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const records = await storage.getIncompatibleRecords(limit);\n      res.json(records);\n    } catch (error) {\n      console.error(\"Mismatches error:\", error);\n      res.status(500).json({ message: \"Failed to fetch mismatch records\" });\n    }\n  });\n\n  // Get all medical records\n  app.get(\"/api/records\", async (req, res) => {\n    try {\n      const records = await storage.getAllMedicalRecords();\n      res.json(records);\n    } catch (error) {\n      console.error(\"Records error:\", error);\n      res.status(500).json({ message: \"Failed to fetch medical records\" });\n    }\n  });\n\n  // Get a single medical record by ID\n  app.get(\"/api/records/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      if (!id) {\n        return res.status(400).json({ message: \"Record ID is required\" });\n      }\n\n      const record = await storage.getMedicalRecord(id);\n      if (!record) {\n        return res.status(404).json({ message: \"Medical record not found\" });\n      }\n\n      res.json(record);\n    } catch (error) {\n      console.error(\"Get record error:\", error);\n      res.status(500).json({ message: \"Failed to fetch medical record\" });\n    }\n  });\n\n  // Get ICD-10 codes (cached local codes)\n  app.get(\"/api/icd10\", async (req, res) => {\n    try {\n      const codes = await storage.getAllIcd10Codes();\n      res.json(codes);\n    } catch (error) {\n      console.error(\"ICD-10 error:\", error);\n      res.status(500).json({ message: \"Failed to fetch ICD-10 codes\" });\n    }\n  });\n\n  // Search ICD-10 codes using comprehensive NLM API\n  app.get(\"/api/icd10/search\", async (req, res) => {\n    try {\n      const searchTerm = req.query.term as string;\n      const maxResults = parseInt(req.query.limit as string) || 20;\n      \n      if (!searchTerm || searchTerm.trim() === '') {\n        return res.status(400).json({ message: \"Search term is required\" });\n      }\n\n      const codes = await storage.searchIcd10Codes(searchTerm, maxResults);\n      res.json(codes);\n    } catch (error) {\n      console.error(\"ICD-10 search error:\", error);\n      res.status(500).json({ message: \"Failed to search ICD-10 codes\" });\n    }\n  });\n\n  // Get medications (cached local medications)\n  app.get(\"/api/medications\", async (req, res) => {\n    try {\n      const medications = await storage.getAllMedications();\n      res.json(medications);\n    } catch (error) {\n      console.error(\"Medications error:\", error);\n      res.status(500).json({ message: \"Failed to fetch medications\" });\n    }\n  });\n\n  // Search medications using FDA API\n  app.get(\"/api/medications/search\", async (req, res) => {\n    try {\n      const searchTerm = req.query.term as string;\n      const maxResults = parseInt(req.query.limit as string) || 10;\n      \n      if (!searchTerm || searchTerm.trim() === '') {\n        return res.status(400).json({ message: \"Search term is required\" });\n      }\n\n      const medications = await storage.searchMedicationsFDA(searchTerm, maxResults);\n      res.json(medications);\n    } catch (error) {\n      console.error(\"FDA medication search error:\", error);\n      res.status(500).json({ message: \"Failed to search FDA medications\" });\n    }\n  });\n\n  // Get medication contraindications from FDA\n  app.get(\"/api/medications/:name/contraindications\", async (req, res) => {\n    try {\n      const medicationName = decodeURIComponent(req.params.name);\n      \n      if (!medicationName || medicationName.trim() === '') {\n        return res.status(400).json({ message: \"Medication name is required\" });\n      }\n\n      const contraindications = await storage.getMedicationContraindications(medicationName);\n      res.json(contraindications);\n    } catch (error) {\n      console.error(`Contraindications error for ${req.params.name}:`, error);\n      res.status(500).json({ message: \"Failed to fetch medication contraindications\" });\n    }\n  });\n\n  // Test FDA API status and availability (with caching to preserve quota)\n  app.get(\"/api/fda-status\", async (req, res) => {\n    try {\n      const forceRefresh = req.query.force === 'true';\n      const now = Date.now();\n      \n      // Check if we have valid cached data and don't need to force refresh\n      if (!forceRefresh && fdaStatusCache && now < fdaStatusCache.expiresAt) {\n        // Return cached data but update with current server stats\n        const currentStats = medicationService.getDetailedStats();\n        const cachedResponse = { \n          ...fdaStatusCache.data,\n          // Update dynamic server-side information\n          rateLimitInfo: {\n            ...fdaStatusCache.data.rateLimitInfo,\n            remaining: currentStats.quotaInfo.hourlyRemaining,\n            dailyRemaining: currentStats.quotaInfo.dailyRemaining,\n            minuteRemaining: currentStats.quotaInfo.minuteRemaining\n          },\n          cacheInfo: {\n            entriesCount: currentStats.cacheSize\n          },\n          lastUpdated: new Date(fdaStatusCache.timestamp).toISOString(),\n          fromCache: true,\n          cacheExpiresAt: new Date(fdaStatusCache.expiresAt).toISOString(),\n          apiConfig: medicationService.getApiConfig(),\n          serverUsageStats: {\n            dailyUsage: currentStats.dailyUsage,\n            hourlyUsage: currentStats.hourlyUsage,\n            minuteUsage: currentStats.minuteUsage,\n            canMakeCall: currentStats.canMakeCall,\n            errorRate: currentStats.errorRate,\n            quotaInfo: currentStats.quotaInfo\n          }\n        };\n        \n        return res.json(cachedResponse);\n      }\n      \n      // Need to make fresh FDA API call - either cache expired or forced refresh\n      const startTime = Date.now();\n      \n      // Get comprehensive stats from medication service\n      const detailedStats = medicationService.getDetailedStats();\n      \n      // Skip live test if we have very recent successful FDA activity (last 2 minutes)\n      // and we're not forcing a refresh\n      const recentSuccess = detailedStats.recentActivity\n        .filter(call => call.success && (now - call.timestamp) < 2 * 60 * 1000)\n        .length > 0;\n      \n      let liveTestResult = null;\n      let liveTestTime = 0;\n      \n      // Only perform live test if needed\n      if (forceRefresh || !recentSuccess || !detailedStats.canMakeCall) {\n        try {\n          if (detailedStats.canMakeCall) {\n            // Use a very common medication to test - should always return results\n            liveTestResult = await medicationService.searchMedication(\"aspirin\", 1);\n            liveTestTime = Date.now() - startTime;\n          }\n        } catch (apiError) {\n          // Live test failed - will be handled below\n          liveTestTime = Date.now() - startTime;\n        }\n      }\n      \n      try {\n        // Determine overall status based on server stats and live test (if performed)\n        let status: 'available' | 'rate_limited' | 'warning' | 'error' = 'available';\n        let message = 'FDA API is accessible and responding normally';\n        let responseTime = liveTestTime || 0;\n        \n        // Check rate limits first\n        if (!detailedStats.canMakeCall) {\n          if (detailedStats.quotaInfo.dailyRemaining === 0) {\n            status = 'rate_limited';\n            message = 'Daily rate limit reached. Please wait until tomorrow.';\n          } else if (detailedStats.quotaInfo.hourlyRemaining === 0) {\n            status = 'rate_limited';\n            message = 'Hourly rate limit reached. Please wait for the next hour.';\n          } else {\n            status = 'rate_limited';\n            message = 'Rate limit reached. Please wait before making more requests.';\n          }\n        } else if (detailedStats.quotaInfo.hourlyRemaining < 20 || detailedStats.quotaInfo.dailyRemaining < 50) {\n          status = 'warning';\n          message = `Approaching rate limits. ${detailedStats.quotaInfo.hourlyRemaining} requests remaining this hour.`;\n        } else if (detailedStats.errorRate > 20) {\n          status = 'warning';\n          message = `High error rate detected (${detailedStats.errorRate}%). FDA API may be experiencing issues.`;\n        }\n        \n        // If live test was performed and failed, update status\n        if (liveTestResult === null && detailedStats.canMakeCall && (forceRefresh || !recentSuccess)) {\n          status = 'error';\n          message = 'FDA API is not responding or unavailable';\n        }\n        \n        const statusResponse = {\n          status,\n          message,\n          lastChecked: new Date().toISOString(),\n          responseTimeMs: responseTime,\n          rateLimitInfo: {\n            remaining: detailedStats.quotaInfo.hourlyRemaining,\n            dailyRemaining: detailedStats.quotaInfo.dailyRemaining,\n            minuteRemaining: detailedStats.quotaInfo.minuteRemaining,\n            total: detailedStats.quotaInfo.hourlyLimit,\n            resetTime: new Date(Date.now() + 3600000).toISOString(), // Next hour\n            minutesUntilReset: 60 - new Date().getMinutes()\n          },\n          cacheInfo: {\n            entriesCount: detailedStats.cacheSize\n          },\n          apiEndpoint: 'api.fda.gov/drug/label.json',\n          testQuery: liveTestResult !== null ? 'aspirin' : 'skipped_recent_activity',\n          testResultsFound: liveTestResult ? liveTestResult.length : undefined,\n          fromCache: false,\n          apiConfig: medicationService.getApiConfig(),\n          serverUsageStats: {\n            dailyUsage: detailedStats.dailyUsage,\n            hourlyUsage: detailedStats.hourlyUsage,\n            minuteUsage: detailedStats.minuteUsage,\n            canMakeCall: detailedStats.canMakeCall,\n            errorRate: detailedStats.errorRate,\n            quotaInfo: detailedStats.quotaInfo,\n            recentActivity: detailedStats.recentActivity.slice(-5) // Last 5 calls\n          }\n        };\n        \n        // Cache the response\n        fdaStatusCache = {\n          data: statusResponse,\n          timestamp: now,\n          expiresAt: now + FDA_STATUS_CACHE_DURATION\n        };\n        \n        res.json(statusResponse);\n        \n      } catch (error) {\n        // Handle any errors that occurred\n        const responseTime = Date.now() - startTime;\n        \n        const errorResponse = {\n          status: 'error' as const,\n          message: 'Failed to determine FDA API status',\n          lastChecked: new Date().toISOString(),\n          responseTimeMs: responseTime,\n          error: 'server_error',\n          details: error instanceof Error ? error.message : 'Unknown error',\n          fromCache: false,\n          serverUsageStats: {\n            dailyUsage: detailedStats.dailyUsage,\n            hourlyUsage: detailedStats.hourlyUsage,\n            minuteUsage: detailedStats.minuteUsage,\n            canMakeCall: detailedStats.canMakeCall,\n            errorRate: detailedStats.errorRate,\n            quotaInfo: detailedStats.quotaInfo\n          }\n        };\n        \n        res.json(errorResponse);\n      }\n      \n    } catch (error) {\n      console.error(\"FDA status check error:\", error);\n      res.status(500).json({ \n        status: 'error',\n        message: \"Failed to check FDA API status\",\n        lastChecked: new Date().toISOString(),\n        error: 'server_error'\n      });\n    }\n  });\n\n  // Reset/clear all uploaded medical data\n  app.delete(\"/api/data/reset\", async (req, res) => {\n    try {\n      await storage.clearAllMedicalRecords();\n      res.json({ message: \"All medical records cleared successfully\" });\n    } catch (error) {\n      console.error(\"Error clearing medical records:\", error);\n      res.status(500).json({ message: \"Failed to clear medical records\" });\n    }\n  });\n\n  // Fix existing specialty mappings\n  app.post(\"/api/data/fix-specialties\", async (req, res) => {\n    try {\n      const updatedCount = await fixExistingSpecialties();\n      res.json({ \n        message: \"Specialty mappings updated successfully\", \n        updatedRecords: updatedCount \n      });\n    } catch (error) {\n      console.error(\"Error fixing specialty mappings:\", error);\n      res.status(500).json({ message: \"Failed to fix specialty mappings\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to analyze medication-diagnosis compatibility using FDA data\nasync function analyzeCompatibility(record: UploadedFileData): Promise<CompatibilityAnalysis> {\n  // First, determine specialty from ICD-10 code - this should always work regardless of API failures\n  const icd10Code = record.icd10Code || await findIcd10Code(record.diagnosis);\n  let specialty = \"Unknown\";\n  let icd10Data = null;\n  \n  // Try to get detailed ICD-10 data from storage/API\n  try {\n    icd10Data = await storage.getIcd10Code(icd10Code);\n    if (icd10Data && icd10Data.specialty) {\n      specialty = icd10Data.specialty;\n    }\n  } catch (error) {\n    console.warn(`Error fetching ICD-10 data for ${icd10Code}:`, error);\n  }\n  \n  // If no detailed ICD-10 data, use robust fallback specialty mapping\n  if (specialty === \"Unknown\" && icd10Code) {\n    specialty = determineSpecialtyFromIcd10Code(icd10Code);\n  }\n  \n  // Enhanced medication matching using fuzzy search\n  let medication = null;\n  let activeIngredient = \"Unknown\";\n  let medicationValidated = false;\n  \n  try {\n    medication = await getEnhancedMedicationData(record.medication);\n    if (medication) {\n      activeIngredient = medication.activeIngredient;\n      record.medication = medication.name;\n      medicationValidated = true;\n    }\n  } catch (error) {\n    console.warn(`Error fetching medication data for ${record.medication}:`, error);\n  }\n  \n  // If ICD-10 code determination failed completely, return with determined specialty\n  if (!icd10Code) {\n    return {\n      isCompatible: false,\n      riskLevel: \"medium\",\n      specialty: specialty,\n      notes: `ICD-10 code not found for diagnosis: ${record.diagnosis}${medicationValidated ? '' : `. Medication \"${record.medication}\" validation also failed due to API limitations.`}`,\n      activeIngredient\n    };\n  }\n\n  // Get real FDA contraindication data and perform sophisticated risk assessment\n  try {\n    const fdaContraindications = medicationValidated ? \n      await storage.getMedicationContraindications(record.medication) : [];\n    \n    if (fdaContraindications.length > 0) {\n      // Perform sophisticated risk assessment with clinical decision support\n      const sophisticatedRiskAnalysis = performSophisticatedRiskAssessment(\n        fdaContraindications,\n        record.diagnosis,\n        icd10Code,\n        specialty,\n        medication,\n        record.medication\n      );\n      \n      return {\n        isCompatible: sophisticatedRiskAnalysis.isCompatible,\n        riskLevel: sophisticatedRiskAnalysis.riskLevel,\n        specialty: specialty,\n        notes: sophisticatedRiskAnalysis.clinicalNotes,\n        activeIngredient\n      };\n    }\n  } catch (error) {\n    console.warn(`Error fetching FDA contraindications for ${record.medication}:`, error);\n  }\n\n  // Fallback: Use cached medication data if FDA contraindications are not available\n  if (medication) {\n    const incompatibleCodes = medication.incompatibleIcd10Codes as string[] || [];\n    const compatibleCodes = medication.compatibleIcd10Codes as string[] || [];\n    \n    if (incompatibleCodes.includes(icd10Code)) {\n      return {\n        isCompatible: false,\n        riskLevel: \"high\",\n        specialty: specialty,\n        notes: `Cached data indicates ${record.medication} is contraindicated for ${record.diagnosis} (${icd10Code})`,\n        activeIngredient\n      };\n    }\n    \n    if (compatibleCodes.includes(icd10Code)) {\n      return {\n        isCompatible: true,\n        riskLevel: \"low\",\n        specialty: specialty,\n        notes: `Cached data indicates ${record.medication} is compatible with ${record.diagnosis} (${icd10Code})`,\n        activeIngredient\n      };\n    }\n  }\n\n  // Default to needs review if no contraindication data available\n  const fallbackNote = medicationValidated ? \n    `No contraindication data available. Manual review recommended for ${record.medication} and ${record.diagnosis}` :\n    `Medication \"${record.medication}\" could not be validated due to API limitations. Manual review recommended for ${record.diagnosis} (${icd10Code})`;\n    \n  return {\n    isCompatible: true,\n    riskLevel: \"medium\",\n    specialty: specialty,\n    notes: fallbackNote,\n    activeIngredient\n  };\n}\n\n// Robust fallback function to determine specialty from ICD-10 code\nfunction determineSpecialtyFromIcd10Code(code: string): string {\n  if (!code) return 'Unknown';\n\n  const firstChar = code.charAt(0).toUpperCase();\n  \n  // Enhanced specialty mapping based on comprehensive ICD-10 categories\n  const enhancedSpecialtyMap: { [key: string]: string } = {\n    'A': 'Infectious Disease',\n    'B': 'Infectious Disease',\n    'C': 'Oncology',\n    'D': 'Hematology', // Blood/lymphatic disorders\n    'E': 'Endocrinology',\n    'F': 'Psychiatry',\n    'G': 'Neurology',\n    'H': 'Ophthalmology', // Note: H00-H59 are eye, H60-H95 are ear\n    'I': 'Cardiology',\n    'J': 'Pulmonology',\n    'K': 'Gastroenterology',\n    'L': 'Dermatology',\n    'M': 'Rheumatology', // Musculoskeletal/connective tissue\n    'N': 'Nephrology', // Note: N00-N39 are kidney, N40-N99 are genitourinary\n    'O': 'Obstetrics and Gynecology',\n    'P': 'Neonatology', // Perinatal conditions\n    'Q': 'Medical Genetics', // Congenital malformations\n    'R': 'Internal Medicine', // Symptoms and signs\n    'S': 'Trauma Surgery', // Injury/trauma\n    'T': 'Emergency Medicine',\n    'V': 'Emergency Medicine',\n    'W': 'Emergency Medicine',\n    'X': 'Emergency Medicine',\n    'Y': 'Emergency Medicine',\n    'Z': 'Family Medicine' // Health status factors\n  };\n  \n  // Handle specific subcategories for more precision\n  if (code.startsWith('H0') || code.startsWith('H1') || code.startsWith('H2') || \n      code.startsWith('H3') || code.startsWith('H4') || code.startsWith('H5')) {\n    return 'Ophthalmology'; // H00-H59: Eye and adnexa\n  }\n  if (code.startsWith('H6') || code.startsWith('H7') || code.startsWith('H8') || \n      code.startsWith('H9')) {\n    return 'Otolaryngology'; // H60-H95: Ear and mastoid process\n  }\n  if (code.startsWith('N0') || code.startsWith('N1') || code.startsWith('N2') || \n      code.startsWith('N3')) {\n    return 'Nephrology'; // N00-N39: Kidney diseases\n  }\n  if (code.startsWith('N4') || code.startsWith('N5') || code.startsWith('N6') || \n      code.startsWith('N7') || code.startsWith('N8') || code.startsWith('N9')) {\n    return 'Urology'; // N40-N99: Genitourinary diseases\n  }\n\n  return enhancedSpecialtyMap[firstChar] || 'Internal Medicine';\n}\n\n// Function to fix existing specialty mappings in the database\nasync function fixExistingSpecialties(): Promise<number> {\n  try {\n    console.log(\"Starting specialty mapping fix for existing records...\");\n    const allRecords = await storage.getAllMedicalRecords();\n    console.log(`Found ${allRecords.length} total records to examine`);\n    \n    let candidateCount = 0;\n    let updatedCount = 0;\n    \n    for (const record of allRecords) {\n      // Broaden candidate filter - check for null, empty, whitespace, or \"unknown\" (case insensitive)\n      const needsFix = !record.specialty || \n                      record.specialty.trim().length === 0 || \n                      record.specialty.trim().toLowerCase() === 'unknown';\n      \n      if (needsFix && record.icd10Code) {\n        candidateCount++;\n        \n        // Normalize ICD-10 code before mapping\n        const normalizedCode = record.icd10Code.trim().toUpperCase();\n        const newSpecialty = determineSpecialtyFromIcd10Code(normalizedCode);\n        \n        if (newSpecialty !== \"Unknown\" && newSpecialty !== \"Internal Medicine\") {\n          // Update the record in the database\n          try {\n            const affectedRows = await storage.updateMedicalRecordSpecialty(record.id, newSpecialty);\n            if (affectedRows > 0) {\n              updatedCount++;\n              console.log(`✓ Updated record ${record.id}: ${normalizedCode} -> ${newSpecialty}`);\n            } else {\n              console.warn(`⚠ Update returned 0 affected rows for record ${record.id}`);\n            }\n          } catch (updateError) {\n            console.warn(`✗ Failed to update record ${record.id}:`, updateError);\n          }\n        } else {\n          console.log(`◯ Skipped record ${record.id}: ${normalizedCode} -> ${newSpecialty} (not specific enough)`);\n        }\n      }\n    }\n    \n    console.log(`Specialty mapping fix completed:`);\n    console.log(`- Total records examined: ${allRecords.length}`);\n    console.log(`- Candidates needing fix: ${candidateCount}`);\n    console.log(`- Successfully updated: ${updatedCount}`);\n    return updatedCount;\n  } catch (error) {\n    console.error(\"Error in fixExistingSpecialties:\", error);\n    throw error;\n  }\n}\n\n// Helper function to detect Excel column mapping\nfunction detectColumnMapping(firstRow: any): { isValid: boolean; mapping: any } {\n  const columns = Object.keys(firstRow);\n  \n  // Check for the new format (medical claims data)\n  const hasClaimRef = columns.some(col => col.toLowerCase().includes('claim') && col.toLowerCase().includes('ref'));\n  const hasSpeciality = columns.some(col => col.toLowerCase().includes('speciality') || col.toLowerCase().includes('specialty'));\n  const hasActiveIngredient = columns.some(col => col.toLowerCase().includes('active') && col.toLowerCase().includes('ingredient'));\n  const hasDiagCode = columns.some(col => col.toLowerCase().includes('diag'));\n  \n  if (hasClaimRef && hasSpeciality && hasActiveIngredient && hasDiagCode) {\n    return {\n      isValid: true,\n      mapping: {\n        format: 'medical_claims',\n        patientId: columns.find(col => col.toLowerCase().includes('claim') && col.toLowerCase().includes('ref')),\n        specialty: columns.find(col => col.toLowerCase().includes('speciality') || col.toLowerCase().includes('specialty')),\n        activeIngredient: columns.find(col => col.toLowerCase().includes('active') && col.toLowerCase().includes('ingredient')),\n        diagnosisColumns: columns.filter(col => col.toLowerCase().includes('diag')),\n        activityCode: columns.find(col => col.toLowerCase().includes('activity') && col.toLowerCase().includes('code'))\n      }\n    };\n  }\n  \n  // Check for the old format (original expected format)\n  const hasPatientId = columns.some(col => col.toLowerCase() === 'patientid');\n  const hasMedication = columns.some(col => col.toLowerCase() === 'medication');\n  const hasDiagnosis = columns.some(col => col.toLowerCase() === 'diagnosis');\n  \n  if (hasPatientId && hasMedication && hasDiagnosis) {\n    return {\n      isValid: true,\n      mapping: {\n        format: 'original',\n        patientId: 'patientId',\n        medication: 'medication',\n        diagnosis: 'diagnosis',\n        dosage: 'dosage',\n        icd10Code: 'icd10Code'\n      }\n    };\n  }\n  \n  return { isValid: false, mapping: null };\n}\n\n// Helper function to map row data based on detected format\nasync function mapRowData(row: any, columnMapping: any): Promise<UploadedFileData[]> {\n  const mapping = columnMapping.mapping;\n  \n  if (mapping.format === 'medical_claims') {\n    // For medical claims format - create one record per diagnosis\n    const records: UploadedFileData[] = [];\n    \n    for (const diagnosisCol of mapping.diagnosisColumns) {\n      const diagnosisCode = String(row[diagnosisCol] || '').trim();\n      \n      // Only create a record if diagnosis exists\n      if (diagnosisCode !== '') {\n        const medicationName = await deriveFromActiveIngredient(String(row[mapping.activeIngredient] || '').trim());\n        records.push({\n          patientId: String(row[mapping.patientId] || '').trim(),\n          medication: medicationName,\n          dosage: '', // Not available in this format\n          diagnosis: diagnosisCode,\n          icd10Code: diagnosisCode // Use diagnosis code directly\n        });\n      }\n    }\n    \n    return records;\n  } else {\n    // For original format - single record\n    return [{\n      patientId: row[mapping.patientId] || '',\n      medication: row[mapping.medication] || '',\n      dosage: row[mapping.dosage] || '',\n      diagnosis: row[mapping.diagnosis] || '',\n      icd10Code: row[mapping.icd10Code] || ''\n    }];\n  }\n}\n\n// Enhanced helper function to derive medication name from active ingredient using FDA data\nasync function deriveFromActiveIngredient(activeIngredient: string): Promise<string> {\n  if (!activeIngredient) return 'Unknown';\n  \n  // Normalize the active ingredient for better matching\n  const normalizedIngredient = normalizeMedicationName(activeIngredient);\n  \n  // Try FDA API search first for most accurate results using multiple search strategies\n  try {\n    // Strategy 1: Direct search with original name\n    let fdaResults = await storage.searchMedicationsFDA(activeIngredient, 3);\n    \n    // Strategy 2: Try normalized name if original didn't work\n    if (fdaResults.length === 0 && normalizedIngredient !== activeIngredient) {\n      fdaResults = await storage.searchMedicationsFDA(normalizedIngredient, 3);\n    }\n    \n    // Strategy 3: Try first component if compound ingredient\n    if (fdaResults.length === 0 && activeIngredient.includes(',')) {\n      const firstComponent = activeIngredient.split(',')[0].trim();\n      fdaResults = await storage.searchMedicationsFDA(firstComponent, 3);\n    }\n    \n    if (fdaResults.length > 0) {\n      // Find best match using fuzzy matching\n      const bestMatch = findBestMedicationMatch(activeIngredient, fdaResults);\n      return bestMatch.brandName || bestMatch.genericName;\n    }\n  } catch (error) {\n    console.warn(`Error searching FDA for active ingredient ${activeIngredient}:`, error);\n  }\n  \n  // Enhanced mapping for common ingredients with variations\n  const enhancedIngredientMappings = getEnhancedIngredientMappings();\n  \n  // Check for exact matches first\n  const exactMatch = enhancedIngredientMappings[normalizedIngredient];\n  if (exactMatch) {\n    return exactMatch;\n  }\n  \n  // Use fuzzy matching for ingredient mappings\n  const fuzzyMatch = findFuzzyIngredientMatch(normalizedIngredient, enhancedIngredientMappings);\n  if (fuzzyMatch) {\n    return fuzzyMatch;\n  }\n  \n  // Default: clean up the active ingredient name\n  const cleanIngredient = activeIngredient.split(',')[0].trim();\n  return cleanIngredient;\n}\n\n// Helper function to normalize medication names for better matching\nfunction normalizeMedicationName(name: string): string {\n  if (!name) return '';\n  \n  return name\n    .trim()\n    .toLowerCase()\n    // Remove common pharmaceutical suffixes/prefixes\n    .replace(/\\s+(hcl|hydrochloride|sodium|potassium|mesylate|maleate|succinate|tartrate|citrate|sulfate|phosphate|acetate|chloride)\\b/g, '')\n    .replace(/\\b(extended|immediate|sustained|controlled|delayed)\\s+release\\b/g, '')\n    .replace(/\\b(tablet|capsule|injection|syrup|solution|suspension|cream|ointment)\\b/g, '')\n    // Remove dosage information\n    .replace(/\\b\\d+\\s*(mg|mcg|g|ml|units?)\\b/g, '')\n    // Clean up spacing and punctuation\n    .replace(/[()]/g, '')\n    .replace(/\\s+/g, ' ')\n    .trim();\n}\n\n// Enhanced medication matching using fuzzy logic\nfunction findBestMedicationMatch(searchTerm: string, medications: any[]): any {\n  if (!medications || medications.length === 0) return null;\n  \n  const normalizedSearch = normalizeMedicationName(searchTerm);\n  \n  let bestMatch = medications[0];\n  let highestScore = 0;\n  \n  for (const medication of medications) {\n    const brandScore = calculateSimilarityScore(normalizedSearch, normalizeMedicationName(medication.brandName || ''));\n    const genericScore = calculateSimilarityScore(normalizedSearch, normalizeMedicationName(medication.genericName || ''));\n    \n    // Check active ingredients similarity\n    let ingredientScore = 0;\n    if (medication.activeIngredients && medication.activeIngredients.length > 0) {\n      ingredientScore = Math.max(...medication.activeIngredients.map((ing: string) => \n        calculateSimilarityScore(normalizedSearch, normalizeMedicationName(ing))\n      ));\n    }\n    \n    const maxScore = Math.max(brandScore, genericScore, ingredientScore);\n    \n    if (maxScore > highestScore) {\n      highestScore = maxScore;\n      bestMatch = medication;\n    }\n  }\n  \n  return bestMatch;\n}\n\n// Calculate similarity score using Levenshtein distance\nfunction calculateSimilarityScore(str1: string, str2: string): number {\n  if (!str1 || !str2) return 0;\n  \n  const longer = str1.length > str2.length ? str1 : str2;\n  const shorter = str1.length > str2.length ? str2 : str1;\n  \n  if (longer.length === 0) return 1.0;\n  \n  const editDistance = levenshteinDistance(longer, shorter);\n  return (longer.length - editDistance) / longer.length;\n}\n\n// Levenshtein distance implementation\nfunction levenshteinDistance(str1: string, str2: string): number {\n  const matrix = [];\n  \n  for (let i = 0; i <= str2.length; i++) {\n    matrix[i] = [i];\n  }\n  \n  for (let j = 0; j <= str1.length; j++) {\n    matrix[0][j] = j;\n  }\n  \n  for (let i = 1; i <= str2.length; i++) {\n    for (let j = 1; j <= str1.length; j++) {\n      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {\n        matrix[i][j] = matrix[i - 1][j - 1];\n      } else {\n        matrix[i][j] = Math.min(\n          matrix[i - 1][j - 1] + 1, // substitution\n          matrix[i][j - 1] + 1,     // insertion\n          matrix[i - 1][j] + 1      // deletion\n        );\n      }\n    }\n  }\n  \n  return matrix[str2.length][str1.length];\n}\n\n// Enhanced ingredient mappings with variations and synonyms\nfunction getEnhancedIngredientMappings(): { [key: string]: string } {\n  return {\n    // Pain relief medications\n    'paracetamol (acetaminophen)': 'Acetaminophen',\n    'paracetamol': 'Acetaminophen',\n    'acetaminophen': 'Acetaminophen',\n    'tylenol': 'Acetaminophen',\n    'aspirin': 'Aspirin',\n    'acetylsalicylic acid': 'Aspirin',\n    'ibuprofen': 'Ibuprofen',\n    'advil': 'Ibuprofen',\n    'motrin': 'Ibuprofen',\n    'naproxen': 'Naproxen',\n    'aleve': 'Naproxen',\n    \n    // Antihistamines\n    'diphenhydramine': 'Diphenhydramine',\n    'diphenhydramine hydrochloride': 'Diphenhydramine',\n    'benadryl': 'Diphenhydramine',\n    'ammonium chloride,diphenhydramine hydrochloride': 'Diphenhydramine',\n    'loratadine': 'Loratadine',\n    'claritin': 'Loratadine',\n    'cetirizine': 'Cetirizine',\n    'zyrtec': 'Cetirizine',\n    \n    // Diabetes medications\n    'metformin': 'Metformin',\n    'metformin hydrochloride': 'Metformin',\n    'glucophage': 'Metformin',\n    'insulin': 'Insulin',\n    'insulin glargine': 'Insulin Glargine',\n    'lantus': 'Insulin Glargine',\n    'insulin aspart': 'Insulin Aspart',\n    'novolog': 'Insulin Aspart',\n    \n    // Cardiovascular medications\n    'warfarin': 'Warfarin',\n    'warfarin sodium': 'Warfarin',\n    'coumadin': 'Warfarin',\n    'lisinopril': 'Lisinopril',\n    'prinivil': 'Lisinopril',\n    'zestril': 'Lisinopril',\n    'amlodipine': 'Amlodipine',\n    'norvasc': 'Amlodipine',\n    'atorvastatin': 'Atorvastatin',\n    'lipitor': 'Atorvastatin',\n    \n    // Antibiotics\n    'amoxicillin': 'Amoxicillin',\n    'amoxil': 'Amoxicillin',\n    'azithromycin': 'Azithromycin',\n    'zithromax': 'Azithromycin',\n    'ciprofloxacin': 'Ciprofloxacin',\n    'cipro': 'Ciprofloxacin',\n    \n    // Neurological medications\n    'phenytoin': 'Phenytoin',\n    'phenytoin sodium': 'Phenytoin',\n    'dilantin': 'Phenytoin',\n    'gabapentin': 'Gabapentin',\n    'neurontin': 'Gabapentin',\n    \n    // Corticosteroids\n    'prednisone': 'Prednisone',\n    'deltasone': 'Prednisone',\n    'prednisolone': 'Prednisolone',\n    'hydrocortisone': 'Hydrocortisone',\n    'cortef': 'Hydrocortisone'\n  };\n}\n\n// Find fuzzy match in ingredient mappings\nfunction findFuzzyIngredientMatch(searchTerm: string, mappings: { [key: string]: string }): string | null {\n  const threshold = 0.8; // 80% similarity threshold\n  \n  let bestMatch = '';\n  let highestScore = 0;\n  \n  for (const [ingredient, medication] of Object.entries(mappings)) {\n    const score = calculateSimilarityScore(searchTerm, ingredient);\n    \n    if (score > highestScore && score >= threshold) {\n      highestScore = score;\n      bestMatch = medication;\n    }\n  }\n  \n  return bestMatch || null;\n}\n\n// Enhanced medication data retrieval using multiple search strategies\nasync function getEnhancedMedicationData(medicationName: string): Promise<any | null> {\n  if (!medicationName) return null;\n  \n  // Strategy 1: Try local cache first\n  let medication = await storage.getMedication(medicationName);\n  if (medication) {\n    return medication;\n  }\n  \n  // Strategy 2: Try by active ingredient\n  medication = await storage.getMedicationByActiveIngredient(medicationName);\n  if (medication) {\n    return medication;\n  }\n  \n  // Strategy 3: Enhanced FDA search with fuzzy matching\n  try {\n    const normalizedName = normalizeMedicationName(medicationName);\n    \n    // Try multiple search variations\n    const searchTerms = [\n      medicationName,\n      normalizedName,\n      medicationName.split(' ')[0], // First word only\n      medicationName.toLowerCase()\n    ].filter((term, index, arr) => arr.indexOf(term) === index); // Remove duplicates\n    \n    for (const searchTerm of searchTerms) {\n      const fdaResults = await storage.searchMedicationsFDA(searchTerm, 5);\n      \n      if (fdaResults.length > 0) {\n        // Find best match using fuzzy matching\n        const bestMatch = findBestMedicationMatch(medicationName, fdaResults);\n        \n        if (bestMatch) {\n          // Get contraindications for the matched medication\n          const contraindications = await storage.getMedicationContraindications(\n            bestMatch.brandName || bestMatch.genericName\n          );\n          \n          // Create medication object from FDA data\n          const medicationData = {\n            name: bestMatch.brandName || bestMatch.genericName,\n            activeIngredient: bestMatch.activeIngredients[0] || 'Unknown',\n            contraindications: contraindications.map(c => c.condition),\n            compatibleIcd10Codes: [],\n            incompatibleIcd10Codes: extractIcd10CodesFromContraindications(contraindications)\n          };\n          \n          // Try to cache in local database for future requests\n          try {\n            const cachedMedication = await storage.createMedication(medicationData);\n            return cachedMedication;\n          } catch (error) {\n            // Return the medication data even if caching fails\n            console.warn(`Error caching medication ${medicationName}:`, error);\n            return {\n              id: `temp_${Date.now()}`,\n              ...medicationData\n            };\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.warn(`Error in enhanced FDA medication search for ${medicationName}:`, error);\n  }\n  \n  return null;\n}\n\n// Helper function to extract ICD-10 codes from contraindications\nfunction extractIcd10CodesFromContraindications(contraindications: any[]): string[] {\n  const icd10Codes: string[] = [];\n  \n  // Map common contraindication conditions to ICD-10 codes\n  const conditionToIcd10Map: { [key: string]: string[] } = {\n    'renal disease': ['N18.6', 'N17.9'],\n    'kidney disease': ['N18.6', 'N17.9'],\n    'heart failure': ['I50.9', 'I21.9'],\n    'cardiac disease': ['I25.9', 'I21.9'],\n    'liver disease': ['K72.9', 'K76.9'],\n    'hepatic impairment': ['K72.9', 'K76.9'],\n    'asthma': ['J45.9'],\n    'pregnancy': ['Z34.90'],\n    'peptic ulcer': ['K25.9'],\n    'diabetes': ['E11.9']\n  };\n  \n  for (const contraindication of contraindications) {\n    const condition = contraindication.condition?.toLowerCase() || '';\n    \n    for (const [conditionKey, codes] of Object.entries(conditionToIcd10Map)) {\n      if (condition.includes(conditionKey)) {\n        icd10Codes.push(...codes);\n      }\n    }\n  }\n  \n  return Array.from(new Set(icd10Codes)); // Remove duplicates\n}\n\n// Enhanced helper function to analyze contraindications for compatibility\nfunction analyzeContraindicationCompatibility(\n  contraindications: MedicationContraindication[],\n  diagnosis: string,\n  icd10Code: string,\n  specialty: string\n): { isCompatible: boolean; riskLevel: \"low\" | \"medium\" | \"high\"; notes: string } {\n  if (contraindications.length === 0) {\n    return {\n      isCompatible: true,\n      riskLevel: \"medium\",\n      notes: \"No contraindication data available from FDA. Manual review recommended.\"\n    };\n  }\n\n  let highestRiskLevel: \"low\" | \"medium\" | \"high\" = \"low\";\n  const matchedContraindications: Array<{condition: string, severity: string, confidence: number}> = [];\n  const detailedAnalysis = analyzeContraindicationsWithContext(contraindications, diagnosis, icd10Code, specialty);\n\n  // Process analysis results\n  for (const match of detailedAnalysis.matches) {\n    matchedContraindications.push({\n      condition: match.condition,\n      severity: match.severity,\n      confidence: match.confidence\n    });\n    \n    // Enhanced risk level calculation with confidence weighting\n    const effectiveRisk = calculateEffectiveRisk(match.severity, match.confidence);\n    \n    if (effectiveRisk === 'high' || (effectiveRisk === 'medium' && match.confidence > 0.8)) {\n      highestRiskLevel = \"high\";\n    } else if (effectiveRisk === 'medium' && highestRiskLevel !== \"high\") {\n      highestRiskLevel = \"medium\";\n    } else if (effectiveRisk === 'low' && highestRiskLevel === \"low\") {\n      // Keep as low risk but note the match\n    }\n  }\n\n  // Enhanced compatibility determination\n  if (matchedContraindications.length > 0) {\n    const isCompatible = determineCompatibilityWithContext(matchedContraindications, detailedAnalysis.contextualFactors);\n    const enhancedNotes = generateEnhancedAnalysisNotes(matchedContraindications, detailedAnalysis, highestRiskLevel);\n    \n    return {\n      isCompatible,\n      riskLevel: highestRiskLevel,\n      notes: enhancedNotes\n    };\n  }\n\n  // Enhanced assessment even with no direct matches\n  const contextualRisk = assessContextualRisk(diagnosis, icd10Code, specialty);\n  \n  return {\n    isCompatible: true,\n    riskLevel: contextualRisk.riskLevel,\n    notes: contextualRisk.notes\n  };\n}\n\n// Enhanced medical terminology and contextual analysis\nfunction analyzeContraindicationsWithContext(\n  contraindications: MedicationContraindication[],\n  diagnosis: string,\n  icd10Code: string,\n  specialty: string\n) {\n  const matches: Array<{condition: string, severity: string, confidence: number, reasoning: string}> = [];\n  const contextualFactors = {\n    specialty,\n    diagnosisCategory: getIcd10Category(icd10Code),\n    riskFactors: identifyRiskFactors(diagnosis, icd10Code)\n  };\n\n  for (const contraindication of contraindications) {\n    const matchResult = performAdvancedMedicalMatching(\n      diagnosis, \n      icd10Code, \n      contraindication.condition, \n      contraindication.description,\n      specialty\n    );\n    \n    if (matchResult.isMatch && matchResult.confidence > 0.5) {\n      matches.push({\n        condition: contraindication.condition,\n        severity: contraindication.severity,\n        confidence: matchResult.confidence,\n        reasoning: matchResult.reasoning\n      });\n    }\n  }\n\n  return { matches, contextualFactors };\n}\n\n// Advanced medical terminology matching with multiple strategies\nfunction performAdvancedMedicalMatching(\n  diagnosis: string,\n  icd10Code: string,\n  contraindicationCondition: string,\n  contraindicationDescription: string,\n  specialty: string\n): { isMatch: boolean; confidence: number; reasoning: string } {\n  const diagnosisLower = diagnosis.toLowerCase();\n  const icd10Lower = icd10Code.toLowerCase();\n  const conditionLower = contraindicationCondition.toLowerCase();\n  const descriptionLower = contraindicationDescription.toLowerCase();\n\n  let maxConfidence = 0;\n  let matchReasoning = '';\n\n  // Strategy 1: Direct text matching (high confidence if exact)\n  if (conditionLower === diagnosisLower || conditionLower.includes(diagnosisLower)) {\n    maxConfidence = Math.max(maxConfidence, 0.95);\n    matchReasoning = 'Direct condition match';\n  }\n\n  // Strategy 2: ICD-10 code matching\n  if (descriptionLower.includes(icd10Lower) || conditionLower.includes(icd10Lower)) {\n    maxConfidence = Math.max(maxConfidence, 0.9);\n    matchReasoning = 'ICD-10 code match';\n  }\n\n  // Strategy 3: Enhanced medical terminology matching\n  const terminologyMatch = checkEnhancedMedicalTerminology(\n    diagnosisLower, \n    icd10Lower, \n    conditionLower, \n    descriptionLower,\n    specialty\n  );\n  if (terminologyMatch.confidence > maxConfidence) {\n    maxConfidence = terminologyMatch.confidence;\n    matchReasoning = terminologyMatch.reasoning;\n  }\n\n  // Strategy 4: Semantic similarity using medical synonyms\n  const semanticMatch = checkMedicalSemanticSimilarity(diagnosisLower, conditionLower, icd10Code);\n  if (semanticMatch.confidence > maxConfidence) {\n    maxConfidence = semanticMatch.confidence;\n    matchReasoning = semanticMatch.reasoning;\n  }\n\n  // Strategy 5: Drug class and mechanism-based matching\n  const mechanismMatch = checkDrugMechanismContraindications(diagnosisLower, conditionLower, specialty);\n  if (mechanismMatch.confidence > maxConfidence) {\n    maxConfidence = mechanismMatch.confidence;\n    matchReasoning = mechanismMatch.reasoning;\n  }\n\n  return {\n    isMatch: maxConfidence > 0.5,\n    confidence: maxConfidence,\n    reasoning: matchReasoning\n  };\n}\n\n// Enhanced medical terminology matching with comprehensive mappings\nfunction checkEnhancedMedicalTerminology(\n  diagnosisLower: string,\n  icd10Lower: string,\n  conditionLower: string,\n  descriptionLower: string,\n  specialty: string\n): { confidence: number; reasoning: string } {\n  const enhancedConditionMappings = getComprehensiveMedicalTerminologyMappings();\n  \n  let maxConfidence = 0;\n  let bestReasoning = '';\n\n  for (const category of enhancedConditionMappings) {\n    // Check if diagnosis matches any keywords in this category\n    const diagnosisMatch = category.keywords.some(keyword => \n      diagnosisLower.includes(keyword) || keyword.includes(diagnosisLower)\n    );\n    \n    if (diagnosisMatch) {\n      // Check if contraindication matches any conditions in this category\n      const conditionMatches = category.conditions.filter(condition => \n        conditionLower.includes(condition.term) || \n        descriptionLower.includes(condition.term) ||\n        condition.synonyms.some(synonym => \n          conditionLower.includes(synonym) || descriptionLower.includes(synonym)\n        )\n      );\n      \n      if (conditionMatches.length > 0) {\n        // Calculate confidence based on exactness and category severity\n        const bestMatch = conditionMatches.reduce((best, current) => \n          current.severity > best.severity ? current : best\n        );\n        \n        const confidence = calculateMatchConfidence(diagnosisLower, bestMatch, category.category);\n        \n        if (confidence > maxConfidence) {\n          maxConfidence = confidence;\n          bestReasoning = `${category.category} terminology match: ${bestMatch.term}`;\n        }\n      }\n    }\n  }\n\n  return { confidence: maxConfidence, reasoning: bestReasoning };\n}\n\n// Medical semantic similarity using comprehensive synonym database\nfunction checkMedicalSemanticSimilarity(\n  diagnosisLower: string,\n  conditionLower: string,\n  icd10Code: string\n): { confidence: number; reasoning: string } {\n  const medicalSynonyms = getMedicalSynonymDatabase();\n  \n  let maxConfidence = 0;\n  let bestReasoning = '';\n\n  // Extract key medical terms from diagnosis\n  const diagnosisTerms = extractMedicalTerms(diagnosisLower);\n  const conditionTerms = extractMedicalTerms(conditionLower);\n\n  for (const diagnosisTerm of diagnosisTerms) {\n    if (medicalSynonyms[diagnosisTerm as keyof typeof medicalSynonyms]) {\n      const synonymGroup = medicalSynonyms[diagnosisTerm as keyof typeof medicalSynonyms];\n      \n      for (const conditionTerm of conditionTerms) {\n        if (synonymGroup.synonyms.includes(conditionTerm)) {\n          const confidence = synonymGroup.confidence * 0.85; // Slight reduction for synonym match\n          if (confidence > maxConfidence) {\n            maxConfidence = confidence;\n            bestReasoning = `Medical synonym match: ${diagnosisTerm} ↔ ${conditionTerm}`;\n          }\n        }\n      }\n    }\n  }\n\n  return { confidence: maxConfidence, reasoning: bestReasoning };\n}\n\n// Drug mechanism and class-based contraindication checking\nfunction checkDrugMechanismContraindications(\n  diagnosisLower: string,\n  conditionLower: string,\n  specialty: string\n): { confidence: number; reasoning: string } {\n  const mechanismMappings = getDrugMechanismContraindications();\n  \n  let maxConfidence = 0;\n  let bestReasoning = '';\n\n  for (const mechanism of mechanismMappings) {\n    const diagnosisInCategory = mechanism.diagnoses.some(diag => \n      diagnosisLower.includes(diag) || diag.includes(diagnosisLower)\n    );\n    \n    const contraindicationInCategory = mechanism.contraindications.some(contraind => \n      conditionLower.includes(contraind) || contraind.includes(conditionLower)\n    );\n    \n    if (diagnosisInCategory && contraindicationInCategory) {\n      const confidence = mechanism.severity * 0.8; // Mechanism-based matches are slightly less certain\n      if (confidence > maxConfidence) {\n        maxConfidence = confidence;\n        bestReasoning = `Drug mechanism contraindication: ${mechanism.category}`;\n      }\n    }\n  }\n\n  return { confidence: maxConfidence, reasoning: bestReasoning };\n}\n\n// Helper functions for enhanced contraindication analysis\n\nfunction calculateEffectiveRisk(severity: string, confidence: number): 'low' | 'medium' | 'high' {\n  const severityMap = {\n    'contraindicated': 'high',\n    'warning': 'medium',\n    'precaution': 'low'\n  } as const;\n  \n  const baseSeverity = severityMap[severity as keyof typeof severityMap] || 'medium';\n  \n  // Adjust based on confidence level\n  if (confidence < 0.6) {\n    // Low confidence reduces severity\n    return baseSeverity === 'high' ? 'medium' : baseSeverity === 'medium' ? 'low' : 'low';\n  }\n  \n  return baseSeverity;\n}\n\nfunction determineCompatibilityWithContext(\n  matchedContraindications: Array<{condition: string, severity: string, confidence: number}>,\n  contextualFactors: any\n): boolean {\n  // High confidence contraindicated conditions are incompatible\n  const highRiskMatches = matchedContraindications.filter(match => \n    match.severity === 'contraindicated' && match.confidence > 0.7\n  );\n  \n  if (highRiskMatches.length > 0) {\n    return false;\n  }\n  \n  // Consider specialty context\n  const criticalSpecialties = ['Cardiology', 'Nephrology', 'Hepatology', 'Critical Care Medicine'];\n  const mediumRiskMatches = matchedContraindications.filter(match => \n    match.severity === 'warning' && match.confidence > 0.6\n  );\n  \n  if (mediumRiskMatches.length > 0 && criticalSpecialties.includes(contextualFactors.specialty)) {\n    return false; // More strict in critical specialties\n  }\n  \n  return true; // Compatible with monitoring\n}\n\nfunction generateEnhancedAnalysisNotes(\n  matchedContraindications: Array<{condition: string, severity: string, confidence: number}>,\n  detailedAnalysis: any,\n  riskLevel: string\n): string {\n  if (matchedContraindications.length === 0) {\n    return detailedAnalysis.contextualFactors?.riskFactors?.length > 0 \n      ? `No direct contraindications found. Monitor for: ${detailedAnalysis.contextualFactors.riskFactors.join(', ')}`\n      : \"No contraindications identified in FDA database.\";\n  }\n  \n  const highConfidenceMatches = matchedContraindications.filter(match => match.confidence > 0.8);\n  const mediumConfidenceMatches = matchedContraindications.filter(match => match.confidence > 0.6 && match.confidence <= 0.8);\n  \n  let notes = `${riskLevel.toUpperCase()} RISK: `;\n  \n  if (highConfidenceMatches.length > 0) {\n    const conditions = highConfidenceMatches.map(match => `${match.condition} (${match.severity})`).join(', ');\n    notes += `Strong contraindications: ${conditions}. `;\n  }\n  \n  if (mediumConfidenceMatches.length > 0) {\n    const conditions = mediumConfidenceMatches.map(match => match.condition).join(', ');\n    notes += `Possible contraindications: ${conditions}. `;\n  }\n  \n  notes += \"Clinical review recommended before administration.\";\n  \n  return notes;\n}\n\nfunction assessContextualRisk(diagnosis: string, icd10Code: string, specialty: string) {\n  const riskFactors = identifyRiskFactors(diagnosis, icd10Code);\n  const category = getIcd10Category(icd10Code);\n  \n  // Determine baseline risk based on specialty and category\n  let baselineRisk: 'low' | 'medium' | 'high' = 'low';\n  let notes = \"No specific contraindications identified. \";\n  \n  const highRiskSpecialties = ['Critical Care Medicine', 'Cardiology', 'Nephrology', 'Hepatology'];\n  const highRiskCategories = ['Diseases of the Circulatory System', 'Diseases of the Genitourinary System', 'Endocrine, Nutritional and Metabolic Diseases'];\n  \n  if (highRiskSpecialties.includes(specialty)) {\n    baselineRisk = 'medium';\n    notes += `${specialty} requires careful medication monitoring. `;\n  }\n  \n  if (highRiskCategories.includes(category)) {\n    baselineRisk = baselineRisk === 'low' ? 'medium' : baselineRisk;\n    notes += `${category} may affect drug metabolism. `;\n  }\n  \n  if (riskFactors.length > 0) {\n    notes += `Consider: ${riskFactors.join(', ')}. `;\n  }\n  \n  notes += \"Proceed with standard clinical monitoring.\";\n  \n  return { riskLevel: baselineRisk, notes };\n}\n\nfunction getIcd10Category(icd10Code: string): string {\n  if (!icd10Code) return 'Unknown';\n  \n  const firstChar = icd10Code.charAt(0).toUpperCase();\n  const categoryMap: { [key: string]: string } = {\n    'A': 'Infectious and Parasitic Diseases',\n    'B': 'Infectious and Parasitic Diseases',\n    'C': 'Neoplasms',\n    'D': 'Neoplasms',\n    'E': 'Endocrine, Nutritional and Metabolic Diseases',\n    'F': 'Mental, Behavioral and Neurodevelopmental Disorders',\n    'G': 'Diseases of the Nervous System',\n    'H': 'Diseases of the Eye and Ear',\n    'I': 'Diseases of the Circulatory System',\n    'J': 'Diseases of the Respiratory System',\n    'K': 'Diseases of the Digestive System',\n    'L': 'Diseases of the Skin and Subcutaneous Tissue',\n    'M': 'Diseases of the Musculoskeletal System',\n    'N': 'Diseases of the Genitourinary System',\n    'O': 'Pregnancy, Childbirth and the Puerperium',\n    'P': 'Certain Conditions Originating in the Perinatal Period',\n    'Q': 'Congenital Malformations',\n    'R': 'Symptoms, Signs and Abnormal Clinical Findings',\n    'S': 'Injury, Poisoning and External Causes',\n    'T': 'Injury, Poisoning and External Causes',\n    'V': 'External Causes of Morbidity',\n    'W': 'External Causes of Morbidity',\n    'X': 'External Causes of Morbidity',\n    'Y': 'External Causes of Morbidity',\n    'Z': 'Factors Influencing Health Status'\n  };\n  \n  return categoryMap[firstChar] || 'Unknown';\n}\n\nfunction identifyRiskFactors(diagnosis: string, icd10Code: string): string[] {\n  const riskFactors: string[] = [];\n  const diagnosisLower = diagnosis.toLowerCase();\n  \n  // Age-related risk factors\n  if (diagnosisLower.includes('elderly') || diagnosisLower.includes('geriatric') || icd10Code.startsWith('Z')) {\n    riskFactors.push('Age-related dosing adjustments');\n  }\n  \n  // Organ system risk factors\n  if (diagnosisLower.includes('kidney') || diagnosisLower.includes('renal') || icd10Code.startsWith('N')) {\n    riskFactors.push('Renal function monitoring');\n  }\n  \n  if (diagnosisLower.includes('liver') || diagnosisLower.includes('hepatic') || icd10Code.startsWith('K7')) {\n    riskFactors.push('Hepatic function monitoring');\n  }\n  \n  if (diagnosisLower.includes('heart') || diagnosisLower.includes('cardiac') || icd10Code.startsWith('I')) {\n    riskFactors.push('Cardiovascular monitoring');\n  }\n  \n  if (diagnosisLower.includes('diabetes') || icd10Code.startsWith('E1')) {\n    riskFactors.push('Blood glucose monitoring');\n  }\n  \n  if (diagnosisLower.includes('pregnancy') || diagnosisLower.includes('pregnant') || icd10Code.startsWith('O')) {\n    riskFactors.push('Pregnancy safety category review');\n  }\n  \n  return riskFactors;\n}\n\nfunction getComprehensiveMedicalTerminologyMappings() {\n  return [\n    {\n      category: 'Cardiovascular',\n      keywords: ['heart', 'cardiac', 'cardio', 'myocardial', 'coronary', 'arrhythmia', 'hypertension'],\n      conditions: [\n        { term: 'heart failure', synonyms: ['cardiac failure', 'congestive heart failure', 'chf'], severity: 0.9 },\n        { term: 'myocardial infarction', synonyms: ['heart attack', 'mi', 'acute coronary syndrome'], severity: 0.95 },\n        { term: 'arrhythmia', synonyms: ['irregular heartbeat', 'dysrhythmia', 'atrial fibrillation'], severity: 0.8 },\n        { term: 'hypertension', synonyms: ['high blood pressure', 'elevated blood pressure'], severity: 0.7 }\n      ]\n    },\n    {\n      category: 'Renal',\n      keywords: ['kidney', 'renal', 'nephro', 'glomerular', 'creatinine'],\n      conditions: [\n        { term: 'kidney disease', synonyms: ['renal disease', 'nephropathy', 'renal impairment'], severity: 0.9 },\n        { term: 'kidney failure', synonyms: ['renal failure', 'acute kidney injury', 'chronic kidney disease'], severity: 0.95 },\n        { term: 'dialysis', synonyms: ['hemodialysis', 'peritoneal dialysis'], severity: 0.85 }\n      ]\n    },\n    {\n      category: 'Hepatic',\n      keywords: ['liver', 'hepatic', 'hepato', 'cirrhosis', 'jaundice'],\n      conditions: [\n        { term: 'liver disease', synonyms: ['hepatic disease', 'hepatopathy'], severity: 0.9 },\n        { term: 'liver failure', synonyms: ['hepatic failure', 'acute liver failure'], severity: 0.95 },\n        { term: 'cirrhosis', synonyms: ['hepatic cirrhosis', 'liver cirrhosis'], severity: 0.9 }\n      ]\n    },\n    {\n      category: 'Respiratory',\n      keywords: ['lung', 'respiratory', 'pulmonary', 'asthma', 'copd', 'broncho'],\n      conditions: [\n        { term: 'asthma', synonyms: ['bronchial asthma', 'allergic asthma'], severity: 0.8 },\n        { term: 'copd', synonyms: ['chronic obstructive pulmonary disease', 'emphysema'], severity: 0.85 },\n        { term: 'respiratory failure', synonyms: ['acute respiratory distress'], severity: 0.9 }\n      ]\n    },\n    {\n      category: 'Endocrine',\n      keywords: ['diabetes', 'diabetic', 'thyroid', 'adrenal', 'insulin'],\n      conditions: [\n        { term: 'diabetes', synonyms: ['diabetes mellitus', 'diabetic', 'dm'], severity: 0.8 },\n        { term: 'hyperthyroidism', synonyms: ['overactive thyroid', 'thyrotoxicosis'], severity: 0.8 },\n        { term: 'hypothyroidism', synonyms: ['underactive thyroid', 'myxedema'], severity: 0.7 }\n      ]\n    },\n    {\n      category: 'Neurological',\n      keywords: ['seizure', 'epilepsy', 'stroke', 'neurological', 'brain'],\n      conditions: [\n        { term: 'seizure', synonyms: ['epilepsy', 'convulsion', 'epileptic'], severity: 0.85 },\n        { term: 'stroke', synonyms: ['cerebrovascular accident', 'cva'], severity: 0.9 },\n        { term: 'brain injury', synonyms: ['traumatic brain injury', 'tbi'], severity: 0.85 }\n      ]\n    }\n  ];\n}\n\nfunction calculateMatchConfidence(diagnosisLower: string, bestMatch: any, category: string): number {\n  let baseConfidence = bestMatch.severity;\n  \n  // Boost confidence for exact matches\n  if (diagnosisLower.includes(bestMatch.term)) {\n    baseConfidence = Math.min(0.95, baseConfidence + 0.1);\n  }\n  \n  // Boost confidence for high-risk categories\n  const highRiskCategories = ['Cardiovascular', 'Renal', 'Hepatic'];\n  if (highRiskCategories.includes(category)) {\n    baseConfidence = Math.min(0.95, baseConfidence + 0.05);\n  }\n  \n  return baseConfidence;\n}\n\nfunction getMedicalSynonymDatabase() {\n  return {\n    'diabetes': {\n      synonyms: ['diabetic', 'dm', 'diabetes mellitus', 'hyperglycemia', 'insulin resistance'],\n      confidence: 0.9\n    },\n    'kidney': {\n      synonyms: ['renal', 'nephro', 'kidney disease', 'renal disease', 'nephropathy'],\n      confidence: 0.9\n    },\n    'heart': {\n      synonyms: ['cardiac', 'cardio', 'myocardial', 'coronary', 'cardiovascular'],\n      confidence: 0.9\n    },\n    'liver': {\n      synonyms: ['hepatic', 'hepato', 'liver disease', 'hepatopathy'],\n      confidence: 0.9\n    },\n    'lung': {\n      synonyms: ['pulmonary', 'respiratory', 'bronchial', 'alveolar'],\n      confidence: 0.85\n    },\n    'asthma': {\n      synonyms: ['bronchial asthma', 'allergic asthma', 'bronchospasm'],\n      confidence: 0.85\n    },\n    'hypertension': {\n      synonyms: ['high blood pressure', 'elevated blood pressure', 'htn'],\n      confidence: 0.8\n    },\n    'seizure': {\n      synonyms: ['epilepsy', 'epileptic', 'convulsion', 'fit'],\n      confidence: 0.85\n    },\n    'pregnancy': {\n      synonyms: ['pregnant', 'gestation', 'prenatal', 'maternal'],\n      confidence: 0.95\n    },\n    'elderly': {\n      synonyms: ['geriatric', 'aged', 'senior', 'older adult'],\n      confidence: 0.8\n    }\n  };\n}\n\nfunction extractMedicalTerms(text: string): string[] {\n  // Extract meaningful medical terms from text\n  const medicalTerms: string[] = [];\n  const words = text.toLowerCase().split(/\\s+/);\n  \n  // Common medical root words and terms\n  const medicalRoots = [\n    'cardio', 'cardiac', 'heart', 'renal', 'kidney', 'hepatic', 'liver',\n    'pulmonary', 'lung', 'diabetes', 'diabetic', 'asthma', 'hypertension',\n    'seizure', 'epilepsy', 'stroke', 'pregnancy', 'pregnant', 'elderly',\n    'geriatric', 'failure', 'disease', 'syndrome', 'disorder'\n  ];\n  \n  for (const word of words) {\n    if (medicalRoots.includes(word) || word.length > 4) {\n      medicalTerms.push(word);\n    }\n  }\n  \n  // Also look for compound terms\n  const text_lower = text.toLowerCase();\n  const compoundTerms = [\n    'heart failure', 'kidney disease', 'liver disease', 'diabetes mellitus',\n    'myocardial infarction', 'renal failure', 'respiratory failure'\n  ];\n  \n  for (const term of compoundTerms) {\n    if (text_lower.includes(term)) {\n      medicalTerms.push(term.replace(' ', '_'));\n    }\n  }\n  \n  return Array.from(new Set(medicalTerms)); // Remove duplicates\n}\n\nfunction getDrugMechanismContraindications() {\n  return [\n    {\n      category: 'ACE Inhibitors',\n      diagnoses: ['kidney', 'renal', 'hyperkalemia', 'angioedema'],\n      contraindications: ['kidney disease', 'renal impairment', 'hyperkalemia', 'angioedema'],\n      severity: 0.9\n    },\n    {\n      category: 'Beta Blockers',\n      diagnoses: ['asthma', 'copd', 'heart block', 'bradycardia'],\n      contraindications: ['asthma', 'bronchospasm', 'heart block', 'severe bradycardia'],\n      severity: 0.85\n    },\n    {\n      category: 'NSAIDs',\n      diagnoses: ['kidney', 'heart failure', 'peptic ulcer', 'bleeding'],\n      contraindications: ['kidney disease', 'heart failure', 'peptic ulcer', 'bleeding disorder'],\n      severity: 0.8\n    },\n    {\n      category: 'Anticoagulants',\n      diagnoses: ['bleeding', 'surgery', 'liver disease', 'peptic ulcer'],\n      contraindications: ['active bleeding', 'recent surgery', 'liver disease', 'peptic ulcer'],\n      severity: 0.9\n    },\n    {\n      category: 'Metformin',\n      diagnoses: ['kidney', 'liver', 'heart failure', 'acidosis'],\n      contraindications: ['kidney disease', 'liver disease', 'heart failure', 'metabolic acidosis'],\n      severity: 0.85\n    },\n    {\n      category: 'Statins',\n      diagnoses: ['liver disease', 'myopathy', 'rhabdomyolysis'],\n      contraindications: ['active liver disease', 'myopathy', 'rhabdomyolysis'],\n      severity: 0.8\n    }\n  ];\n}\n\n// Sophisticated Risk Assessment with Clinical Decision Support\nfunction performSophisticatedRiskAssessment(\n  contraindications: MedicationContraindication[],\n  diagnosis: string,\n  icd10Code: string,\n  specialty: string,\n  medication: any,\n  medicationName: string\n): { isCompatible: boolean; riskLevel: \"low\" | \"medium\" | \"high\"; clinicalNotes: string } {\n  \n  // Initialize sophisticated risk scoring components\n  const riskComponents = {\n    contraindicationSeverity: 0,\n    clinicalContext: 0,\n    patientSafety: 0,\n    drugClass: 0,\n    interactionPotential: 0\n  };\n  \n  let criticalFindings: string[] = [];\n  let clinicalConsiderations: string[] = [];\n  let monitoringRequirements: string[] = [];\n  \n  // Component 1: Advanced contraindication severity analysis\n  const contraindicationAnalysis = analyzeContraindicationSeverityWithContext(\n    contraindications, diagnosis, icd10Code, specialty\n  );\n  riskComponents.contraindicationSeverity = contraindicationAnalysis.severityScore;\n  criticalFindings.push(...contraindicationAnalysis.criticalFindings);\n  \n  // Component 2: Clinical context assessment\n  const clinicalContextAnalysis = assessClinicalContext(diagnosis, icd10Code, specialty, medication);\n  riskComponents.clinicalContext = clinicalContextAnalysis.contextScore;\n  clinicalConsiderations.push(...clinicalContextAnalysis.considerations);\n  \n  // Component 3: Patient safety prioritization\n  const patientSafetyAnalysis = evaluatePatientSafetyFactors(diagnosis, icd10Code, medication);\n  riskComponents.patientSafety = patientSafetyAnalysis.safetyScore;\n  monitoringRequirements.push(...patientSafetyAnalysis.monitoringNeeded);\n  \n  // Component 4: Drug class specific risk assessment\n  const drugClassAnalysis = assessDrugClassSpecificRisks(medication, diagnosis, specialty);\n  riskComponents.drugClass = drugClassAnalysis.drugClassRisk;\n  clinicalConsiderations.push(...drugClassAnalysis.classConsiderations);\n  \n  // Component 5: Interaction potential scoring\n  const interactionAnalysis = calculateInteractionPotential(medication, diagnosis, icd10Code);\n  riskComponents.interactionPotential = interactionAnalysis.interactionScore;\n  \n  // Calculate comprehensive risk score using weighted algorithm\n  const comprehensiveRiskScore = calculateComprehensiveRiskScore(riskComponents, specialty);\n  \n  // Determine final risk level using sophisticated algorithm\n  const finalRiskLevel = determineFinalRiskLevel(comprehensiveRiskScore, criticalFindings);\n  \n  // Generate clinical decision support notes\n  const clinicalNotes = generateClinicalDecisionSupportNotes(\n    finalRiskLevel,\n    criticalFindings,\n    clinicalConsiderations,\n    monitoringRequirements,\n    comprehensiveRiskScore,\n    medicationName,\n    diagnosis\n  );\n  \n  // Determine compatibility with enhanced decision logic\n  const isCompatible = determineCompatibilityWithSophisticatedLogic(\n    finalRiskLevel, \n    criticalFindings, \n    specialty, \n    comprehensiveRiskScore\n  );\n  \n  return {\n    isCompatible,\n    riskLevel: finalRiskLevel,\n    clinicalNotes\n  };\n}\n\n// Advanced contraindication severity analysis with clinical context\nfunction analyzeContraindicationSeverityWithContext(\n  contraindications: MedicationContraindication[],\n  diagnosis: string,\n  icd10Code: string,\n  specialty: string\n): { severityScore: number; criticalFindings: string[] } {\n  \n  let severityScore = 0;\n  const criticalFindings: string[] = [];\n  \n  // Enhanced matching with confidence weighting\n  const detailedAnalysis = analyzeContraindicationsWithContext(contraindications, diagnosis, icd10Code, specialty);\n  \n  for (const match of detailedAnalysis.matches) {\n    // Calculate weighted severity based on confidence and FDA classification\n    let matchSeverity = 0;\n    \n    switch (match.severity) {\n      case 'contraindicated':\n        matchSeverity = 10 * match.confidence;\n        if (match.confidence > 0.8) {\n          criticalFindings.push(`CRITICAL: ${match.condition} - Contraindicated (Confidence: ${(match.confidence * 100).toFixed(1)}%)`);\n        }\n        break;\n      case 'warning':\n        matchSeverity = 6 * match.confidence;\n        if (match.confidence > 0.7) {\n          criticalFindings.push(`WARNING: ${match.condition} - Major precaution required (Confidence: ${(match.confidence * 100).toFixed(1)}%)`);\n        }\n        break;\n      case 'precaution':\n        matchSeverity = 3 * match.confidence;\n        if (match.confidence > 0.6) {\n          criticalFindings.push(`CAUTION: ${match.condition} - Monitor closely (Confidence: ${(match.confidence * 100).toFixed(1)}%)`);\n        }\n        break;\n      default:\n        matchSeverity = 2 * match.confidence;\n    }\n    \n    severityScore = Math.max(severityScore, matchSeverity);\n  }\n  \n  return { severityScore, criticalFindings };\n}\n\n// Clinical context assessment\nfunction assessClinicalContext(\n  diagnosis: string, \n  icd10Code: string, \n  specialty: string, \n  medication: any\n): { contextScore: number; considerations: string[] } {\n  \n  let contextScore = 0;\n  const considerations: string[] = [];\n  \n  // High-risk specialties and conditions\n  const criticalSpecialties = {\n    'Critical Care Medicine': 8,\n    'Cardiology': 7,\n    'Nephrology': 7,\n    'Hepatology': 6,\n    'Oncology': 6,\n    'Emergency Medicine': 5\n  };\n  \n  const specialtyRisk = criticalSpecialties[specialty as keyof typeof criticalSpecialties] || 2;\n  contextScore += specialtyRisk;\n  \n  if (specialtyRisk >= 6) {\n    considerations.push(`High-risk specialty (${specialty}) - Enhanced monitoring required`);\n  }\n  \n  // ICD-10 category risk assessment\n  const categoryRisk = assessIcd10CategoryRisk(icd10Code);\n  contextScore += categoryRisk.score;\n  considerations.push(...categoryRisk.considerations);\n  \n  // Comorbidity risk factors\n  const comorbidityRisk = identifyComorbidityRiskFactors(diagnosis, icd10Code);\n  contextScore += comorbidityRisk.score;\n  considerations.push(...comorbidityRisk.considerations);\n  \n  return { contextScore, considerations };\n}\n\n// Patient safety factor evaluation\nfunction evaluatePatientSafetyFactors(\n  diagnosis: string, \n  icd10Code: string, \n  medication: any\n): { safetyScore: number; monitoringNeeded: string[] } {\n  \n  let safetyScore = 0;\n  const monitoringNeeded: string[] = [];\n  \n  const diagnosisLower = diagnosis.toLowerCase();\n  \n  // Age-related safety factors\n  if (diagnosisLower.includes('elderly') || diagnosisLower.includes('geriatric') || icd10Code.startsWith('Z')) {\n    safetyScore += 3;\n    monitoringNeeded.push('Geriatric dosing protocols and enhanced monitoring');\n  }\n  \n  // Organ system specific safety\n  const organSystemSafety = {\n    renal: { keywords: ['kidney', 'renal'], score: 5, monitoring: 'Creatinine clearance and renal function monitoring' },\n    hepatic: { keywords: ['liver', 'hepatic'], score: 5, monitoring: 'Liver function tests and hepatic monitoring' },\n    cardiac: { keywords: ['heart', 'cardiac'], score: 4, monitoring: 'Cardiac function and rhythm monitoring' },\n    respiratory: { keywords: ['lung', 'respiratory', 'asthma'], score: 3, monitoring: 'Respiratory function assessment' },\n    neurological: { keywords: ['seizure', 'stroke', 'brain'], score: 4, monitoring: 'Neurological status monitoring' }\n  };\n  \n  for (const [system, config] of Object.entries(organSystemSafety)) {\n    if (config.keywords.some(keyword => diagnosisLower.includes(keyword)) || \n        isRelevantIcd10Category(icd10Code, system)) {\n      safetyScore += config.score;\n      monitoringNeeded.push(config.monitoring);\n    }\n  }\n  \n  // Pregnancy and reproductive safety\n  if (diagnosisLower.includes('pregnancy') || diagnosisLower.includes('pregnant') || icd10Code.startsWith('O')) {\n    safetyScore += 6;\n    monitoringNeeded.push('Pregnancy safety category review and fetal monitoring');\n  }\n  \n  return { safetyScore, monitoringNeeded };\n}\n\n// Drug class specific risk assessment\nfunction assessDrugClassSpecificRisks(\n  medication: any, \n  diagnosis: string, \n  specialty: string\n): { drugClassRisk: number; classConsiderations: string[] } {\n  \n  let drugClassRisk = 0;\n  const classConsiderations: string[] = [];\n  \n  if (!medication || !medication.activeIngredient) {\n    return { drugClassRisk: 1, classConsiderations: ['Unknown drug class - exercise caution'] };\n  }\n  \n  const activeIngredient = medication.activeIngredient.toLowerCase();\n  const diagnosisLower = diagnosis.toLowerCase();\n  \n  // High-risk drug classes with specific considerations\n  const riskProfileMap = [\n    {\n      drugs: ['warfarin', 'heparin', 'rivaroxaban', 'dabigatran'],\n      class: 'Anticoagulants',\n      baseRisk: 7,\n      conditions: [\n        { condition: ['bleeding', 'surgery', 'trauma'], additionalRisk: 3, note: 'High bleeding risk - consider alternatives' },\n        { condition: ['liver'], additionalRisk: 2, note: 'Hepatic metabolism affects anticoagulation' }\n      ]\n    },\n    {\n      drugs: ['insulin', 'metformin', 'glimepiride', 'glyburide'],\n      class: 'Antidiabetic Agents',\n      baseRisk: 5,\n      conditions: [\n        { condition: ['kidney', 'renal'], additionalRisk: 3, note: 'Renal impairment affects drug clearance' },\n        { condition: ['liver', 'hepatic'], additionalRisk: 2, note: 'Hepatic dysfunction affects metabolism' }\n      ]\n    },\n    {\n      drugs: ['lisinopril', 'losartan', 'amlodipine', 'metoprolol'],\n      class: 'Cardiovascular Agents',\n      baseRisk: 4,\n      conditions: [\n        { condition: ['heart failure', 'cardiac'], additionalRisk: 2, note: 'Careful titration required in heart failure' },\n        { condition: ['kidney'], additionalRisk: 3, note: 'Monitor renal function closely' }\n      ]\n    },\n    {\n      drugs: ['phenytoin', 'carbamazepine', 'valproic acid', 'lamotrigine'],\n      class: 'Antiepileptic Drugs',\n      baseRisk: 6,\n      conditions: [\n        { condition: ['liver'], additionalRisk: 3, note: 'Hepatic enzyme induction/inhibition concerns' },\n        { condition: ['pregnancy'], additionalRisk: 4, note: 'Teratogenic risk - specialized management required' }\n      ]\n    }\n  ];\n  \n  for (const profile of riskProfileMap) {\n    if (profile.drugs.some(drug => activeIngredient.includes(drug))) {\n      drugClassRisk = profile.baseRisk;\n      classConsiderations.push(`${profile.class} therapy identified`);\n      \n      for (const condition of profile.conditions) {\n        if (condition.condition.some(cond => diagnosisLower.includes(cond))) {\n          drugClassRisk += condition.additionalRisk;\n          classConsiderations.push(condition.note);\n        }\n      }\n      break;\n    }\n  }\n  \n  return { drugClassRisk, classConsiderations };\n}\n\n// Calculate interaction potential\nfunction calculateInteractionPotential(\n  medication: any, \n  diagnosis: string, \n  icd10Code: string\n): { interactionScore: number } {\n  \n  let interactionScore = 0;\n  \n  if (!medication) return { interactionScore: 1 };\n  \n  const activeIngredient = medication.activeIngredient?.toLowerCase() || '';\n  const diagnosisLower = diagnosis.toLowerCase();\n  \n  // High interaction potential drugs\n  const highInteractionDrugs = [\n    'warfarin', 'phenytoin', 'carbamazepine', 'rifampin', 'ketoconazole',\n    'erythromycin', 'cimetidine', 'omeprazole'\n  ];\n  \n  if (highInteractionDrugs.some(drug => activeIngredient.includes(drug))) {\n    interactionScore += 4;\n  }\n  \n  // Disease states that increase interaction risk\n  const interactionRiskConditions = [\n    { conditions: ['liver', 'hepatic'], risk: 3 },\n    { conditions: ['kidney', 'renal'], risk: 2 },\n    { conditions: ['elderly', 'geriatric'], risk: 2 }\n  ];\n  \n  for (const riskCondition of interactionRiskConditions) {\n    if (riskCondition.conditions.some(condition => diagnosisLower.includes(condition))) {\n      interactionScore += riskCondition.risk;\n    }\n  }\n  \n  return { interactionScore };\n}\n\n// Calculate comprehensive risk score using sophisticated weighting\nfunction calculateComprehensiveRiskScore(\n  riskComponents: any, \n  specialty: string\n): number {\n  \n  // Specialty-specific weighting factors\n  const specialtyWeights = {\n    'Critical Care Medicine': { contraindication: 1.2, clinical: 1.1, safety: 1.3, drugClass: 1.1, interaction: 1.2 },\n    'Cardiology': { contraindication: 1.1, clinical: 1.2, safety: 1.1, drugClass: 1.3, interaction: 1.1 },\n    'Nephrology': { contraindication: 1.0, clinical: 1.1, safety: 1.3, drugClass: 1.2, interaction: 1.2 },\n    'Hepatology': { contraindication: 1.0, clinical: 1.1, safety: 1.2, drugClass: 1.3, interaction: 1.3 },\n    'default': { contraindication: 1.0, clinical: 1.0, safety: 1.0, drugClass: 1.0, interaction: 1.0 }\n  };\n  \n  const weights = specialtyWeights[specialty as keyof typeof specialtyWeights] || specialtyWeights['default'];\n  \n  const weightedScore = (\n    riskComponents.contraindicationSeverity * weights.contraindication * 0.35 +\n    riskComponents.clinicalContext * weights.clinical * 0.20 +\n    riskComponents.patientSafety * weights.safety * 0.25 +\n    riskComponents.drugClass * weights.drugClass * 0.15 +\n    riskComponents.interactionPotential * weights.interaction * 0.05\n  );\n  \n  return Math.min(10, weightedScore); // Cap at 10\n}\n\n// Determine final risk level with sophisticated logic\nfunction determineFinalRiskLevel(\n  comprehensiveRiskScore: number, \n  criticalFindings: string[]\n): \"low\" | \"medium\" | \"high\" {\n  \n  // Critical findings override score-based assessment\n  if (criticalFindings.some(finding => finding.includes('CRITICAL'))) {\n    return 'high';\n  }\n  \n  // Score-based risk level determination with nuanced thresholds\n  if (comprehensiveRiskScore >= 7.5) {\n    return 'high';\n  } else if (comprehensiveRiskScore >= 4.5) {\n    return 'medium';\n  } else if (comprehensiveRiskScore >= 2.5) {\n    return criticalFindings.length > 0 ? 'medium' : 'low';\n  } else {\n    return 'low';\n  }\n}\n\n// Generate comprehensive clinical decision support notes\nfunction generateClinicalDecisionSupportNotes(\n  riskLevel: \"low\" | \"medium\" | \"high\",\n  criticalFindings: string[],\n  clinicalConsiderations: string[],\n  monitoringRequirements: string[],\n  riskScore: number,\n  medicationName: string,\n  diagnosis: string\n): string {\n  \n  let notes = `CLINICAL DECISION SUPPORT - ${riskLevel.toUpperCase()} RISK (Score: ${riskScore.toFixed(1)}/10)\\n\\n`;\n  \n  // Risk level specific guidance\n  switch (riskLevel) {\n    case 'high':\n      notes += \"⚠️  HIGH RISK: Consider alternative therapy or specialist consultation.\\n\";\n      break;\n    case 'medium':\n      notes += \"⚡ MEDIUM RISK: Proceed with enhanced monitoring and dose adjustments as needed.\\n\";\n      break;\n    case 'low':\n      notes += \"✓ LOW RISK: Standard monitoring protocols apply.\\n\";\n      break;\n  }\n  \n  // Critical findings\n  if (criticalFindings.length > 0) {\n    notes += \"\\n🔴 CRITICAL FINDINGS:\\n\";\n    criticalFindings.forEach(finding => notes += `• ${finding}\\n`);\n  }\n  \n  // Clinical considerations\n  if (clinicalConsiderations.length > 0) {\n    notes += \"\\n📋 CLINICAL CONSIDERATIONS:\\n\";\n    clinicalConsiderations.slice(0, 5).forEach(consideration => notes += `• ${consideration}\\n`); // Limit to top 5\n  }\n  \n  // Monitoring requirements\n  if (monitoringRequirements.length > 0) {\n    notes += \"\\n🔬 MONITORING REQUIREMENTS:\\n\";\n    monitoringRequirements.slice(0, 4).forEach(requirement => notes += `• ${requirement}\\n`); // Limit to top 4\n  }\n  \n  // Final recommendation\n  notes += `\\n💊 RECOMMENDATION: `;\n  if (riskLevel === 'high') {\n    notes += `Consider alternative to ${medicationName} for ${diagnosis}. If no alternatives available, requires specialist oversight.`;\n  } else if (riskLevel === 'medium') {\n    notes += `${medicationName} may be used for ${diagnosis} with appropriate monitoring and dose adjustments.`;\n  } else {\n    notes += `${medicationName} appears suitable for ${diagnosis} with standard clinical monitoring.`;\n  }\n  \n  return notes;\n}\n\n// Determine compatibility with sophisticated decision logic\nfunction determineCompatibilityWithSophisticatedLogic(\n  riskLevel: \"low\" | \"medium\" | \"high\",\n  criticalFindings: string[],\n  specialty: string,\n  riskScore: number\n): boolean {\n  \n  // Absolute contraindications\n  if (criticalFindings.some(finding => \n    finding.includes('CRITICAL') && finding.includes('Contraindicated')\n  )) {\n    return false;\n  }\n  \n  // High risk scenarios in critical specialties\n  const criticalSpecialties = ['Critical Care Medicine', 'Emergency Medicine'];\n  if (riskLevel === 'high' && criticalSpecialties.includes(specialty) && riskScore > 8) {\n    return false;\n  }\n  \n  // Medium and low risk generally compatible with monitoring\n  return riskLevel !== 'high' || riskScore < 8;\n}\n\n// Helper functions for sophisticated risk assessment\n\nfunction assessIcd10CategoryRisk(icd10Code: string): { score: number; considerations: string[] } {\n  const firstChar = icd10Code.charAt(0).toUpperCase();\n  const considerations: string[] = [];\n  \n  const categoryRisks: { [key: string]: { score: number; note: string } } = {\n    'E': { score: 4, note: 'Endocrine disorders require careful medication management' },\n    'I': { score: 5, note: 'Cardiovascular conditions increase medication risks' },\n    'N': { score: 4, note: 'Kidney/urogenital conditions affect drug clearance' },\n    'K': { score: 3, note: 'Gastrointestinal conditions may affect absorption' },\n    'F': { score: 3, note: 'Mental health conditions require consideration of drug interactions' },\n    'O': { score: 6, note: 'Pregnancy requires specialized medication safety protocols' }\n  };\n  \n  const risk = categoryRisks[firstChar];\n  if (risk) {\n    considerations.push(risk.note);\n    return { score: risk.score, considerations };\n  }\n  \n  return { score: 1, considerations };\n}\n\nfunction identifyComorbidityRiskFactors(diagnosis: string, icd10Code: string): { score: number; considerations: string[] } {\n  const diagnosisLower = diagnosis.toLowerCase();\n  let score = 0;\n  const considerations: string[] = [];\n  \n  const comorbidityFactors = [\n    { keywords: ['diabetes', 'diabetic'], score: 2, note: 'Diabetes increases medication monitoring requirements' },\n    { keywords: ['hypertension', 'high blood pressure'], score: 1, note: 'Hypertension may be affected by medication choice' },\n    { keywords: ['heart failure'], score: 3, note: 'Heart failure significantly impacts medication selection' },\n    { keywords: ['chronic kidney disease', 'renal failure'], score: 4, note: 'Kidney disease requires dose adjustments' },\n    { keywords: ['liver disease', 'cirrhosis'], score: 3, note: 'Liver disease affects medication metabolism' }\n  ];\n  \n  for (const factor of comorbidityFactors) {\n    if (factor.keywords.some(keyword => diagnosisLower.includes(keyword))) {\n      score += factor.score;\n      considerations.push(factor.note);\n    }\n  }\n  \n  return { score, considerations };\n}\n\nfunction isRelevantIcd10Category(icd10Code: string, organSystem: string): boolean {\n  const firstChar = icd10Code.charAt(0).toUpperCase();\n  \n  const systemMappings: { [key: string]: string[] } = {\n    'renal': ['N'],\n    'hepatic': ['K'],\n    'cardiac': ['I'],\n    'respiratory': ['J'],\n    'neurological': ['G', 'F']\n  };\n  \n  return systemMappings[organSystem]?.includes(firstChar) || false;\n}\n\n// Helper function to find ICD-10 code for diagnosis\nasync function findIcd10Code(diagnosis: string): Promise<string> {\n  // Guard against empty/whitespace diagnoses\n  if (!diagnosis || diagnosis.trim() === '') {\n    return '';\n  }\n  \n  const trimmedDiagnosis = diagnosis.trim();\n  \n  // If diagnosis is already an ICD-10 code (format: Letter + digits + optional dot + digits)\n  if (/^[A-Z]\\d{2}(\\.\\d+)?$/.test(trimmedDiagnosis)) {\n    // Validate the ICD-10 code using NLM API service\n    try {\n      const validationResult = await icd10Service.validateIcd10Code(trimmedDiagnosis);\n      if (validationResult.isValid) {\n        return trimmedDiagnosis;\n      }\n    } catch (error) {\n      console.warn(`Error validating ICD-10 code ${trimmedDiagnosis}:`, error);\n    }\n    return trimmedDiagnosis; // Return as-is if validation fails but format is correct\n  }\n  \n  // Try comprehensive search using NLM API service first\n  try {\n    const searchResults = await storage.searchIcd10Codes(trimmedDiagnosis, 5);\n    if (searchResults && searchResults.length > 0) {\n      // Return the most relevant match (first result)\n      const bestMatch = searchResults[0];\n      return bestMatch.code;\n    }\n  } catch (error) {\n    console.warn(`Error searching ICD-10 codes for ${trimmedDiagnosis}:`, error);\n  }\n  \n  // Fallback to local database search\n  const allCodes = await storage.getAllIcd10Codes();\n  const foundCode = allCodes.find(code => \n    code.description.toLowerCase().includes(trimmedDiagnosis.toLowerCase()) ||\n    trimmedDiagnosis.toLowerCase().includes(code.description.toLowerCase().split(',')[0])\n  );\n  \n  return foundCode?.code || trimmedDiagnosis; // Return original if not found, might already be ICD-10 code\n}\n","size_bytes":87994},"server/storage.ts":{"content":"import { \n  type MedicalRecord, \n  type InsertMedicalRecord,\n  type AnalysisResult,\n  type InsertAnalysisResult,\n  type Icd10Code,\n  type InsertIcd10Code,\n  type Medication,\n  type InsertMedication,\n  type DashboardStats,\n  type SpecialtyData,\n  type CompatibilityConfig,\n  defaultCompatibilityConfig,\n  medicalRecords,\n  analysisResults,\n  icd10Codes,\n  medications\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, count, sql } from \"drizzle-orm\";\nimport { icd10Service } from \"./services/icd10Service\";\nimport { medicationService, type MedicationSearchResult, type MedicationContraindication } from \"./services/medicationService\";\n\nexport interface IStorage {\n  // Medical Records\n  getMedicalRecord(id: string): Promise<MedicalRecord | undefined>;\n  getAllMedicalRecords(): Promise<MedicalRecord[]>;\n  createMedicalRecord(record: InsertMedicalRecord): Promise<MedicalRecord>;\n  createMedicalRecords(records: InsertMedicalRecord[]): Promise<MedicalRecord[]>;\n  \n  // Analysis Results\n  getAnalysisResult(id: string): Promise<AnalysisResult | undefined>;\n  getAllAnalysisResults(): Promise<AnalysisResult[]>;\n  createAnalysisResult(result: InsertAnalysisResult): Promise<AnalysisResult>;\n  \n  // ICD-10 Codes\n  getIcd10Code(code: string): Promise<Icd10Code | undefined>;\n  getAllIcd10Codes(): Promise<Icd10Code[]>;\n  searchIcd10Codes(searchTerm: string, maxResults?: number): Promise<Icd10Code[]>;\n  createIcd10Code(icd10: InsertIcd10Code): Promise<Icd10Code>;\n  \n  // Medications\n  getMedication(name: string): Promise<Medication | undefined>;\n  getMedicationByActiveIngredient(ingredient: string): Promise<Medication | undefined>;\n  getAllMedications(): Promise<Medication[]>;\n  searchMedicationsFDA(searchTerm: string, maxResults?: number): Promise<MedicationSearchResult[]>;\n  getMedicationContraindications(medicationName: string): Promise<MedicationContraindication[]>;\n  createMedication(medication: InsertMedication): Promise<Medication>;\n  \n  // Dashboard Analytics\n  getDashboardStats(config?: CompatibilityConfig): Promise<DashboardStats>;\n  getSpecialtyBreakdown(): Promise<SpecialtyData[]>;\n  getIncompatibleRecords(limit?: number): Promise<MedicalRecord[]>;\n  \n  // Data Management\n  clearAllMedicalRecords(): Promise<void>;\n  updateMedicalRecordSpecialty(id: string, specialty: string): Promise<number>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  constructor() {\n    // Initialize static data on first run\n    this.initializeStaticData();\n  }\n\n  private async initializeStaticData() {\n    // Check if data already exists\n    const existingMedCount = await db.select({ count: count() }).from(medications);\n    \n    if (existingMedCount[0].count > 0) {\n      return; // Data already initialized\n    }\n\n    // Note: ICD-10 codes are now dynamically loaded from NLM API as needed\n    // We only initialize a few common ones for bootstrapping\n    const bootstrapIcd10Codes = [\n      { code: \"I21.9\", description: \"Acute myocardial infarction, unspecified\", category: \"Diseases of the Circulatory System\", specialty: \"Cardiology\" },\n      { code: \"E11.9\", description: \"Type 2 diabetes mellitus without complications\", category: \"Endocrine, Nutritional and Metabolic Diseases\", specialty: \"Endocrinology\" },\n      { code: \"J45.9\", description: \"Asthma, unspecified\", category: \"Diseases of the Respiratory System\", specialty: \"Pulmonology\" },\n      { code: \"N18.6\", description: \"End stage renal disease\", category: \"Diseases of the Genitourinary System\", specialty: \"Nephrology\" },\n      { code: \"K25.9\", description: \"Gastric ulcer, unspecified\", category: \"Diseases of the Digestive System\", specialty: \"Gastroenterology\" }\n    ];\n\n    try {\n      await db.insert(icd10Codes).values(bootstrapIcd10Codes);\n    } catch (error) {\n      console.log(\"Bootstrap ICD-10 codes already exist, skipping insertion\");\n    }\n\n    // Note: Medications are now dynamically loaded from FDA API as needed\n    // We initialize only a few commonly used medications for bootstrapping\n    const bootstrapMedications = [\n      {\n        name: \"Metformin\",\n        activeIngredient: \"Metformin\",\n        contraindications: [\"Renal disease\", \"Heart failure\"],\n        compatibleIcd10Codes: [],\n        incompatibleIcd10Codes: [\"I21.9\", \"N18.6\"]\n      },\n      {\n        name: \"Aspirin\",\n        activeIngredient: \"Acetylsalicylic Acid\",\n        contraindications: [\"Asthma\", \"Peptic ulcer\"],\n        compatibleIcd10Codes: [],\n        incompatibleIcd10Codes: [\"J45.9\", \"K25.9\"]\n      }\n    ];\n\n    try {\n      await db.insert(medications).values(bootstrapMedications);\n    } catch (error) {\n      console.log(\"Bootstrap medications already exist, skipping insertion\");\n    }\n  }\n\n  async getMedicalRecord(id: string): Promise<MedicalRecord | undefined> {\n    const [record] = await db.select().from(medicalRecords).where(eq(medicalRecords.id, id));\n    return record || undefined;\n  }\n\n  async getAllMedicalRecords(): Promise<MedicalRecord[]> {\n    return await db.select().from(medicalRecords);\n  }\n\n  async createMedicalRecord(insertRecord: InsertMedicalRecord): Promise<MedicalRecord> {\n    const [record] = await db\n      .insert(medicalRecords)\n      .values(insertRecord)\n      .returning();\n    return record;\n  }\n\n  async createMedicalRecords(insertRecords: InsertMedicalRecord[]): Promise<MedicalRecord[]> {\n    const records = await db\n      .insert(medicalRecords)\n      .values(insertRecords)\n      .returning();\n    return records;\n  }\n\n  async getAnalysisResult(id: string): Promise<AnalysisResult | undefined> {\n    const [result] = await db.select().from(analysisResults).where(eq(analysisResults.id, id));\n    return result || undefined;\n  }\n\n  async getAllAnalysisResults(): Promise<AnalysisResult[]> {\n    return await db.select().from(analysisResults);\n  }\n\n  async createAnalysisResult(insertResult: InsertAnalysisResult): Promise<AnalysisResult> {\n    const [result] = await db\n      .insert(analysisResults)\n      .values(insertResult)\n      .returning();\n    return result;\n  }\n\n  async getIcd10Code(code: string): Promise<Icd10Code | undefined> {\n    // First check local database for cached codes\n    const [icd10] = await db.select().from(icd10Codes).where(eq(icd10Codes.code, code));\n    if (icd10) {\n      return icd10;\n    }\n\n    // If not found locally, validate using the NLM API service\n    try {\n      const validationResult = await icd10Service.validateIcd10Code(code);\n      if (validationResult.isValid) {\n        // Cache the validated code locally\n        const newIcd10Code = await this.createIcd10Code({\n          code: code,\n          description: validationResult.description || 'Description from NLM API',\n          category: validationResult.category || 'Unknown',\n          specialty: validationResult.specialty || 'Unknown'\n        });\n        return newIcd10Code;\n      }\n    } catch (error) {\n      console.warn(`Error validating ICD-10 code ${code}:`, error);\n    }\n\n    return undefined;\n  }\n\n  async getAllIcd10Codes(): Promise<Icd10Code[]> {\n    // Return cached codes from local database\n    // For comprehensive searches, use the searchIcd10Codes method instead\n    return await db.select().from(icd10Codes);\n  }\n\n  async searchIcd10Codes(searchTerm: string, maxResults: number = 20): Promise<Icd10Code[]> {\n    try {\n      // Use the NLM API service for comprehensive search\n      const searchResults = await icd10Service.searchIcd10Code(searchTerm, maxResults);\n      \n      // Convert search results to our Icd10Code format and cache them\n      const icd10Codes: Icd10Code[] = [];\n      for (const result of searchResults) {\n        // Check if we already have this code cached\n        const existing = await this.getIcd10Code(result.code);\n        if (existing) {\n          icd10Codes.push(existing);\n        } else {\n          // Cache new codes from search results\n          try {\n            const newCode = await this.createIcd10Code({\n              code: result.code,\n              description: result.description,\n              category: result.category || 'Unknown',\n              specialty: this.determineSpecialtyFromCode(result.code)\n            });\n            icd10Codes.push(newCode);\n          } catch (error) {\n            // If creation fails (e.g., duplicate), try to get existing\n            const existing = await this.getIcd10Code(result.code);\n            if (existing) {\n              icd10Codes.push(existing);\n            }\n          }\n        }\n      }\n      \n      return icd10Codes;\n    } catch (error) {\n      console.warn('Error searching ICD-10 codes via API, falling back to local database:', error);\n      // Fallback to local database search\n      const localCodes = await db.select().from(icd10Codes);\n      return localCodes.filter(code => \n        code.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        code.code.toLowerCase().includes(searchTerm.toLowerCase())\n      ).slice(0, maxResults);\n    }\n  }\n\n  private determineSpecialtyFromCode(code: string): string {\n    if (!code) return 'Unknown';\n\n    const firstChar = code.charAt(0).toUpperCase();\n    \n    // Enhanced specialty mapping based on comprehensive ICD-10 categories\n    // This matches the enhanced logic in icd10Service.ts\n    const enhancedSpecialtyMap: { [key: string]: string } = {\n      'A': 'Infectious Disease',\n      'B': 'Infectious Disease',\n      'C': 'Oncology',\n      'D': 'Hematology', // More specific for blood/lymphatic disorders\n      'E': 'Endocrinology',\n      'F': 'Psychiatry',\n      'G': 'Neurology',\n      'H': 'Ophthalmology', // Note: H00-H59 are eye, H60-H95 are ear\n      'I': 'Cardiology',\n      'J': 'Pulmonology',\n      'K': 'Gastroenterology',\n      'L': 'Dermatology',\n      'M': 'Rheumatology', // More specific for musculoskeletal/connective tissue\n      'N': 'Nephrology', // Note: N00-N39 are kidney, N40-N99 are genitourinary\n      'O': 'Obstetrics and Gynecology',\n      'P': 'Neonatology', // More specific for perinatal conditions\n      'Q': 'Medical Genetics', // More appropriate for congenital malformations\n      'R': 'Internal Medicine', // Symptoms and signs\n      'S': 'Trauma Surgery', // More specific for injury/trauma\n      'T': 'Emergency Medicine',\n      'V': 'Emergency Medicine',\n      'W': 'Emergency Medicine',\n      'X': 'Emergency Medicine',\n      'Y': 'Emergency Medicine',\n      'Z': 'Family Medicine' // More appropriate for health status factors\n    };\n\n    return enhancedSpecialtyMap[firstChar] || 'Internal Medicine';\n  }\n\n  private extractIcd10CodesFromContraindications(contraindications: MedicationContraindication[]): string[] {\n    // Extract potential ICD-10 codes from contraindication descriptions\n    const icd10Codes: string[] = [];\n    const icd10Pattern = /\\b[A-Z]\\d{2}(\\.\\d{1,2})?\\b/g;\n    \n    for (const contraindication of contraindications) {\n      const matches = contraindication.description.match(icd10Pattern);\n      if (matches) {\n        icd10Codes.push(...matches);\n      }\n      \n      // Also map common condition names to known ICD-10 codes\n      const conditionMappings: { [key: string]: string[] } = {\n        'diabetes': ['E11.9', 'E10.9'],\n        'renal disease': ['N18.6', 'N18.5'],\n        'kidney disease': ['N18.6', 'N18.5'],\n        'heart failure': ['I50.9'],\n        'asthma': ['J45.9'],\n        'peptic ulcer': ['K25.9', 'K26.9'],\n        'pregnancy': ['O99.89'],\n        'liver disease': ['K72.90'],\n        'hepatic impairment': ['K72.90']\n      };\n      \n      const condition = contraindication.condition.toLowerCase();\n      for (const [key, codes] of Object.entries(conditionMappings)) {\n        if (condition.includes(key)) {\n          icd10Codes.push(...codes);\n        }\n      }\n    }\n    \n    // Remove duplicates and return\n    return Array.from(new Set(icd10Codes));\n  }\n\n  async createIcd10Code(insertIcd10: InsertIcd10Code): Promise<Icd10Code> {\n    const [icd10] = await db\n      .insert(icd10Codes)\n      .values(insertIcd10)\n      .returning();\n    return icd10;\n  }\n\n  async getMedication(name: string): Promise<Medication | undefined> {\n    // First check local database for cached medications\n    const [localMedication] = await db.select().from(medications).where(eq(medications.name, name));\n    if (localMedication) {\n      return localMedication;\n    }\n\n    // Search FDA database for real medication data\n    try {\n      const fdaResults = await medicationService.searchMedication(name, 1);\n      if (fdaResults.length > 0) {\n        const fdaMed = fdaResults[0];\n        \n        // Get contraindications from FDA\n        const contraindications = await medicationService.getMedicationContraindications(name);\n        \n        // Convert FDA data to our medication format and cache it\n        const medicationData = {\n          name: fdaMed.brandName || fdaMed.genericName,\n          activeIngredient: fdaMed.activeIngredients[0] || 'Unknown',\n          contraindications: contraindications.map(c => c.condition),\n          compatibleIcd10Codes: [],\n          incompatibleIcd10Codes: this.extractIcd10CodesFromContraindications(contraindications)\n        };\n        \n        // Cache in local database for future requests\n        try {\n          const cachedMedication = await this.createMedication(medicationData);\n          return cachedMedication;\n        } catch (error) {\n          console.warn(`Error caching medication ${name}:`, error);\n          // Return the medication data even if caching fails\n          return {\n            id: randomUUID(),\n            ...medicationData\n          } as Medication;\n        }\n      }\n    } catch (error) {\n      console.warn(`Error fetching FDA medication data for ${name}:`, error);\n    }\n\n    return undefined;\n  }\n\n  async getMedicationByActiveIngredient(ingredient: string): Promise<Medication | undefined> {\n    // First check local database for cached medications by active ingredient\n    const [localMedication] = await db.select().from(medications).where(sql`lower(${medications.activeIngredient}) = ${ingredient.toLowerCase()}`);\n    if (localMedication) {\n      return localMedication;\n    }\n\n    // Search FDA database by active ingredient\n    try {\n      const fdaResults = await medicationService.searchMedication(ingredient, 5);\n      \n      // Find medication with matching active ingredient\n      for (const fdaMed of fdaResults) {\n        if (fdaMed.activeIngredients.some(ai => \n          ai.toLowerCase().includes(ingredient.toLowerCase()) || \n          ingredient.toLowerCase().includes(ai.toLowerCase())\n        )) {\n          // Get contraindications from FDA\n          const contraindications = await medicationService.getMedicationContraindications(fdaMed.brandName || fdaMed.genericName);\n          \n          // Convert FDA data to our medication format and cache it\n          const medicationData = {\n            name: fdaMed.brandName || fdaMed.genericName,\n            activeIngredient: fdaMed.activeIngredients[0] || ingredient,\n            contraindications: contraindications.map(c => c.condition),\n            compatibleIcd10Codes: [],\n            incompatibleIcd10Codes: this.extractIcd10CodesFromContraindications(contraindications)\n          };\n          \n          // Cache in local database for future requests\n          try {\n            const cachedMedication = await this.createMedication(medicationData);\n            return cachedMedication;\n          } catch (error) {\n            console.warn(`Error caching medication by ingredient ${ingredient}:`, error);\n            // Return the medication data even if caching fails\n            return {\n              id: randomUUID(),\n              ...medicationData\n            } as Medication;\n          }\n        }\n      }\n    } catch (error) {\n      console.warn(`Error fetching FDA medication data by ingredient ${ingredient}:`, error);\n    }\n\n    return undefined;\n  }\n\n  async getAllMedications(): Promise<Medication[]> {\n    // Return cached medications from local database\n    // Note: For comprehensive searches, use the searchMedicationsFDA method instead\n    return await db.select().from(medications);\n  }\n\n  async searchMedicationsFDA(searchTerm: string, maxResults: number = 10): Promise<MedicationSearchResult[]> {\n    try {\n      // Use FDA API service for comprehensive medication search\n      return await medicationService.searchMedication(searchTerm, maxResults);\n    } catch (error) {\n      console.warn('Error searching FDA medications:', error);\n      return [];\n    }\n  }\n\n  async getMedicationContraindications(medicationName: string): Promise<MedicationContraindication[]> {\n    try {\n      // Get real FDA contraindication data\n      return await medicationService.getMedicationContraindications(medicationName);\n    } catch (error) {\n      console.warn(`Error getting contraindications for ${medicationName}:`, error);\n      return [];\n    }\n  }\n\n  async createMedication(insertMedication: InsertMedication): Promise<Medication> {\n    const [medication] = await db\n      .insert(medications)\n      .values(insertMedication)\n      .returning();\n    return medication;\n  }\n\n  async getDashboardStats(config: CompatibilityConfig = defaultCompatibilityConfig): Promise<DashboardStats> {\n    const records = await db.select().from(medicalRecords);\n    const totalRecords = records.length;\n    \n    if (totalRecords === 0) {\n      return {\n        totalRecords: 0,\n        compatibilityIssues: 0,\n        successRate: \"0.0%\",\n        specialtiesAffected: 0,\n        compatibleCount: 0,\n        needsReviewCount: 0,\n        incompatibleCount: 0\n      };\n    }\n    \n    // Categorize records based on configuration\n    let compatibleCount = 0;\n    let needsReviewCount = 0;\n    let incompatibleCount = 0;\n    \n    for (const record of records) {\n      const category = this.categorizeRecord(record, config);\n      switch (category) {\n        case 'compatible':\n          compatibleCount++;\n          break;\n        case 'needsReview':\n          needsReviewCount++;\n          break;\n        case 'incompatible':\n          incompatibleCount++;\n          break;\n      }\n    }\n    \n    // Ensure math consistency\n    const calculatedTotal = compatibleCount + needsReviewCount + incompatibleCount;\n    if (calculatedTotal !== totalRecords) {\n      console.warn(`Math inconsistency detected: ${calculatedTotal} !== ${totalRecords}`);\n    }\n    \n    const compatibilityIssues = needsReviewCount + incompatibleCount;\n    const successRate = totalRecords > 0 ? ((compatibleCount / totalRecords) * 100).toFixed(1) : \"0.0\";\n    const specialties = new Set(records.map(r => r.specialty));\n    \n    return {\n      totalRecords,\n      compatibilityIssues,\n      successRate: `${successRate}%`,\n      specialtiesAffected: specialties.size,\n      compatibleCount,\n      needsReviewCount,\n      incompatibleCount\n    };\n  }\n  \n  private categorizeRecord(record: MedicalRecord, config: CompatibilityConfig): 'compatible' | 'needsReview' | 'incompatible' {\n    const { riskLevel, isCompatible } = record;\n    \n    // Priority order: incompatible -> needsReview -> compatible\n    \n    // 1. Check incompatible conditions (highest priority)\n    const isIncompatibleByRisk = config.incompatible.riskLevels.includes(riskLevel as any);\n    const isIncompatibleByFlag = config.incompatible.includeIncompatibleFlag && !isCompatible;\n    \n    if (isIncompatibleByRisk || isIncompatibleByFlag) {\n      return 'incompatible';\n    }\n    \n    // 2. Check needs review (medium priority)\n    if (config.needsReview.riskLevels.includes(riskLevel as any)) {\n      return 'needsReview';\n    }\n    \n    // 3. Check compatible (lowest priority)\n    if (config.compatible.riskLevels.includes(riskLevel as any)) {\n      // If requiresCompatibleFlag is true, must also have isCompatible = true\n      if (config.compatible.requiresCompatibleFlag && !isCompatible) {\n        return 'incompatible';\n      }\n      return 'compatible';\n    }\n    \n    // 4. Default fallback\n    return 'incompatible';\n  }\n\n  async getSpecialtyBreakdown(): Promise<SpecialtyData[]> {\n    const records = await db.select().from(medicalRecords);\n    const specialtyMap = new Map<string, { total: number; issues: number }>();\n    \n    records.forEach(record => {\n      const specialty = record.specialty;\n      const current = specialtyMap.get(specialty) || { total: 0, issues: 0 };\n      current.total += 1;\n      if (!record.isCompatible || record.riskLevel !== \"low\") {\n        current.issues += 1;\n      }\n      specialtyMap.set(specialty, current);\n    });\n\n    const specialtyData: SpecialtyData[] = Array.from(specialtyMap.entries()).map(([name, data]) => ({\n      name,\n      issueCount: data.issues,\n      percentage: data.total > 0 ? (data.issues / data.total) * 100 : 0,\n      riskLevel: data.issues / data.total > 0.6 ? \"high\" : data.issues / data.total > 0.3 ? \"medium\" : \"low\"\n    }));\n\n    return specialtyData.sort((a, b) => b.issueCount - a.issueCount);\n  }\n\n  async getIncompatibleRecords(limit: number = 10): Promise<MedicalRecord[]> {\n    const records = await db.select().from(medicalRecords);\n    return records\n      .filter(r => !r.isCompatible || r.riskLevel !== \"low\")\n      .sort((a, b) => {\n        const riskOrder = { high: 3, medium: 2, low: 1 };\n        return riskOrder[b.riskLevel as keyof typeof riskOrder] - riskOrder[a.riskLevel as keyof typeof riskOrder];\n      })\n      .slice(0, limit);\n  }\n\n  async clearAllMedicalRecords(): Promise<void> {\n    try {\n      await db.delete(medicalRecords);\n      console.log(\"All medical records cleared successfully\");\n    } catch (error) {\n      console.error(\"Error clearing medical records:\", error);\n      throw new Error(\"Failed to clear medical records\");\n    }\n  }\n\n  async updateMedicalRecordSpecialty(id: string, specialty: string): Promise<number> {\n    try {\n      const result = await db.update(medicalRecords)\n        .set({ specialty })\n        .where(eq(medicalRecords.id, id));\n      \n      // Return affected rows count (Drizzle returns an array of affected objects)\n      return Array.isArray(result) ? result.length : 1;\n    } catch (error) {\n      console.error(`Error updating specialty for record ${id}:`, error);\n      throw new Error(\"Failed to update medical record specialty\");\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":22290},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const medicalRecords = pgTable(\"medical_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: text(\"patient_id\").notNull(),\n  medication: text(\"medication\").notNull(),\n  dosage: text(\"dosage\"),\n  activeIngredient: text(\"active_ingredient\").notNull(),\n  diagnosis: text(\"diagnosis\").notNull(),\n  icd10Code: text(\"icd10_code\").notNull(),\n  specialty: text(\"specialty\").notNull(),\n  riskLevel: text(\"risk_level\").notNull(), // \"low\", \"medium\", \"high\"\n  isCompatible: boolean(\"is_compatible\").notNull(),\n  analysisNotes: text(\"analysis_notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const analysisResults = pgTable(\"analysis_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fileName: text(\"file_name\").notNull(),\n  totalRecords: integer(\"total_records\").notNull(),\n  compatibleRecords: integer(\"compatible_records\").notNull(),\n  incompatibleRecords: integer(\"incompatible_records\").notNull(),\n  needsReviewRecords: integer(\"needs_review_records\").notNull(),\n  successRate: text(\"success_rate\").notNull(),\n  specialtiesAffected: integer(\"specialties_affected\").notNull(),\n  processingStatus: text(\"processing_status\").notNull(), // \"processing\", \"completed\", \"failed\"\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const icd10Codes = pgTable(\"icd10_codes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  code: text(\"code\").notNull().unique(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(),\n  specialty: text(\"specialty\").notNull(),\n});\n\nexport const medications = pgTable(\"medications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  activeIngredient: text(\"active_ingredient\").notNull(),\n  contraindications: jsonb(\"contraindications\"),\n  compatibleIcd10Codes: jsonb(\"compatible_icd10_codes\"),\n  incompatibleIcd10Codes: jsonb(\"incompatible_icd10_codes\"),\n});\n\nexport const insertMedicalRecordSchema = createInsertSchema(medicalRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAnalysisResultSchema = createInsertSchema(analysisResults).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertIcd10CodeSchema = createInsertSchema(icd10Codes).omit({\n  id: true,\n});\n\nexport const insertMedicationSchema = createInsertSchema(medications).omit({\n  id: true,\n});\n\nexport type InsertMedicalRecord = z.infer<typeof insertMedicalRecordSchema>;\nexport type MedicalRecord = typeof medicalRecords.$inferSelect;\n\nexport type InsertAnalysisResult = z.infer<typeof insertAnalysisResultSchema>;\nexport type AnalysisResult = typeof analysisResults.$inferSelect;\n\nexport type InsertIcd10Code = z.infer<typeof insertIcd10CodeSchema>;\nexport type Icd10Code = typeof icd10Codes.$inferSelect;\n\nexport type InsertMedication = z.infer<typeof insertMedicationSchema>;\nexport type Medication = typeof medications.$inferSelect;\n\nexport interface UploadedFileData {\n  patientId: string;\n  medication: string;\n  dosage?: string;\n  diagnosis: string;\n  icd10Code?: string;\n}\n\nexport interface CompatibilityAnalysis {\n  isCompatible: boolean;\n  riskLevel: \"low\" | \"medium\" | \"high\";\n  specialty: string;\n  notes: string;\n  activeIngredient: string;\n}\n\nexport interface DashboardStats {\n  totalRecords: number;\n  compatibilityIssues: number;\n  successRate: string;\n  specialtiesAffected: number;\n  compatibleCount: number;\n  needsReviewCount: number;\n  incompatibleCount: number;\n}\n\nexport interface SpecialtyData {\n  name: string;\n  issueCount: number;\n  percentage: number;\n  riskLevel: \"low\" | \"medium\" | \"high\";\n}\n\n// Configuration types for user-customizable compatibility categorization\nexport type RiskLevel = \"low\" | \"medium\" | \"high\";\n\nexport type CompatibilityConfig = {\n  compatible: {\n    riskLevels: RiskLevel[];\n    requiresCompatibleFlag: boolean;\n  };\n  needsReview: {\n    riskLevels: RiskLevel[];\n  };\n  incompatible: {\n    riskLevels: RiskLevel[];\n    includeIncompatibleFlag: boolean;\n  };\n};\n\nexport const defaultCompatibilityConfig: CompatibilityConfig = {\n  compatible: {\n    riskLevels: [\"low\"],\n    requiresCompatibleFlag: true\n  },\n  needsReview: {\n    riskLevels: [\"medium\"]\n  },\n  incompatible: {\n    riskLevels: [\"high\"],\n    includeIncompatibleFlag: true\n  }\n};\n\nexport const compatibilityPresets = {\n  conservative: {\n    name: \"Conservative\",\n    description: \"Only low-risk records as compatible\",\n    config: {\n      compatible: { riskLevels: [\"low\" as RiskLevel], requiresCompatibleFlag: true },\n      needsReview: { riskLevels: [\"medium\" as RiskLevel] },\n      incompatible: { riskLevels: [\"high\" as RiskLevel], includeIncompatibleFlag: true }\n    }\n  },\n  standard: {\n    name: \"Standard\", \n    description: \"Low and medium-risk as compatible\",\n    config: {\n      compatible: { riskLevels: [\"low\" as RiskLevel, \"medium\" as RiskLevel], requiresCompatibleFlag: true },\n      needsReview: { riskLevels: [] as RiskLevel[] },\n      incompatible: { riskLevels: [\"high\" as RiskLevel], includeIncompatibleFlag: true }\n    }\n  },\n  permissive: {\n    name: \"Permissive\",\n    description: \"All risk levels as compatible unless flagged incompatible\",\n    config: {\n      compatible: { riskLevels: [\"low\" as RiskLevel, \"medium\" as RiskLevel, \"high\" as RiskLevel], requiresCompatibleFlag: false },\n      needsReview: { riskLevels: [] as RiskLevel[] },\n      incompatible: { riskLevels: [] as RiskLevel[], includeIncompatibleFlag: true }\n    }\n  }\n};\n","size_bytes":5707},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Upload from \"@/pages/upload\";\nimport Mismatches from \"@/pages/mismatches\";\nimport MismatchDetail from \"@/pages/mismatch-detail\";\nimport Settings from \"@/pages/settings\";\nimport Sidebar from \"@/components/layout/sidebar\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex\">\n      <Sidebar />\n      <div className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/upload\" component={Upload} />\n          <Route path=\"/mismatches\" component={Mismatches} />\n          <Route path=\"/mismatch/:id\" component={MismatchDetail} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1313},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 16% 13%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 16% 13%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 16% 13%);\n  --primary: hsl(210 83% 53%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(186 100% 40%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 13% 55%);\n  --accent: hsl(210 40% 96%);\n  --accent-foreground: hsl(222 16% 13%);\n  --destructive: hsl(0 65% 51%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --success: hsl(120 40% 40%);\n  --success-foreground: hsl(0 0% 98%);\n  --warning: hsl(35 91% 62%);\n  --warning-foreground: hsl(0 0% 98%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(214 32% 91%);\n  --ring: hsl(210 83% 53%);\n  --chart-1: hsl(210 83% 53%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(35 91% 62%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 16% 13%);\n  --sidebar-primary: hsl(210 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 98%);\n  --sidebar-accent: hsl(210 40% 96%);\n  --sidebar-accent-foreground: hsl(222 16% 13%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(210 83% 53%);\n  --font-sans: \"Inter\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210 83% 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210 83% 53% / 0.00);\n  --shadow-sm: 0px 1px 2px 0px hsl(210 83% 53% / 0.05);\n  --shadow: 0px 1px 3px 0px hsl(210 83% 53% / 0.1), 0px 1px 2px 0px hsl(210 83% 53% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(210 83% 53% / 0.1), 0px 2px 4px -1px hsl(210 83% 53% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(210 83% 53% / 0.1), 0px 4px 6px -2px hsl(210 83% 53% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(210 83% 53% / 0.1), 0px 10px 10px -5px hsl(210 83% 53% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(210 83% 53% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222 16% 13%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(222 16% 13%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(210 83% 53%);\n  --primary-foreground: hsl(0 0% 98%);\n  --secondary: hsl(186 100% 40%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 65% 51%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --success: hsl(120 40% 40%);\n  --success-foreground: hsl(0 0% 98%);\n  --warning: hsl(35 91% 62%);\n  --warning-foreground: hsl(0 0% 98%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(210 83% 53%);\n  --chart-1: hsl(210 83% 53%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(35 91% 62%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(210 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 98%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(0 0% 98%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(210 83% 53%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.upload-zone {\n  background-image: url(\"data:image/svg+xml,%3csvg width='100' height='100' xmlns='http://www.w3.org/2000/svg'%3e%3cdefs%3e%3cpattern id='a' patternUnits='userSpaceOnUse' width='20' height='20' patternTransform='scale(2) rotate(0)'%3e%3crect x='0' y='0' width='100%25' height='100%25' fill='hsla(0,0%25,100%25,1)'/%3e%3cpath d='M 10,-2.55e-7 V 20 Z M -1.1677362e-8,10 H 20 Z' stroke-width='1' stroke='hsla(210, 40%25, 85%25, 1)' fill='none'/%3e%3c/pattern%3e%3c/defs%3e%3crect width='100%25' height='100%25' fill='url(%23a)'/%3e%3c/svg%3e\");\n}\n\n.sidebar-item:hover {\n  background-color: hsl(var(--accent));\n}\n","size_bytes":4388},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/icd10-data.ts":{"content":"export interface ICD10Code {\n  code: string;\n  description: string;\n  category: string;\n  specialty: string;\n}\n\nexport const icd10Database: ICD10Code[] = [\n  // Cardiovascular\n  {\n    code: \"I21.9\",\n    description: \"Acute myocardial infarction, unspecified\",\n    category: \"Cardiovascular\",\n    specialty: \"Cardiology\"\n  },\n  {\n    code: \"I25.10\",\n    description: \"Atherosclerotic heart disease of native coronary artery without angina pectoris\",\n    category: \"Cardiovascular\",\n    specialty: \"Cardiology\"\n  },\n  {\n    code: \"I50.9\",\n    description: \"Heart failure, unspecified\",\n    category: \"Cardiovascular\",\n    specialty: \"Cardiology\"\n  },\n  \n  // Mental Health\n  {\n    code: \"F31.2\",\n    description: \"Bipolar disorder, current episode manic severe without psychotic features\",\n    category: \"Mental Health\",\n    specialty: \"Psychiatry\"\n  },\n  {\n    code: \"F32.9\",\n    description: \"Major depressive disorder, single episode, unspecified\",\n    category: \"Mental Health\",\n    specialty: \"Psychiatry\"\n  },\n  {\n    code: \"F41.9\",\n    description: \"Anxiety disorder, unspecified\",\n    category: \"Mental Health\",\n    specialty: \"Psychiatry\"\n  },\n  \n  // Renal/Genitourinary\n  {\n    code: \"N18.6\",\n    description: \"End stage renal disease\",\n    category: \"Genitourinary\",\n    specialty: \"Nephrology\"\n  },\n  {\n    code: \"N18.3\",\n    description: \"Chronic kidney disease, stage 3 (moderate)\",\n    category: \"Genitourinary\",\n    specialty: \"Nephrology\"\n  },\n  \n  // Digestive\n  {\n    code: \"K25.9\",\n    description: \"Gastric ulcer, unspecified as acute or chronic, without hemorrhage or perforation\",\n    category: \"Digestive\",\n    specialty: \"Gastroenterology\"\n  },\n  {\n    code: \"K50.90\",\n    description: \"Crohn's disease, unspecified, without complications\",\n    category: \"Digestive\",\n    specialty: \"Gastroenterology\"\n  },\n  \n  // Respiratory\n  {\n    code: \"J45.9\",\n    description: \"Asthma, unspecified\",\n    category: \"Respiratory\",\n    specialty: \"Pulmonology\"\n  },\n  {\n    code: \"J44.1\",\n    description: \"Chronic obstructive pulmonary disease with acute exacerbation\",\n    category: \"Respiratory\",\n    specialty: \"Pulmonology\"\n  },\n  \n  // Endocrine\n  {\n    code: \"E11.9\",\n    description: \"Type 2 diabetes mellitus without complications\",\n    category: \"Endocrine\",\n    specialty: \"Endocrinology\"\n  },\n  {\n    code: \"E11.65\",\n    description: \"Type 2 diabetes mellitus with hyperglycemia\",\n    category: \"Endocrine\",\n    specialty: \"Endocrinology\"\n  },\n  {\n    code: \"E03.9\",\n    description: \"Hypothyroidism, unspecified\",\n    category: \"Endocrine\",\n    specialty: \"Endocrinology\"\n  },\n  \n  // Neurological\n  {\n    code: \"G40.9\",\n    description: \"Epilepsy, unspecified\",\n    category: \"Neurological\",\n    specialty: \"Neurology\"\n  },\n  {\n    code: \"G35\",\n    description: \"Multiple sclerosis\",\n    category: \"Neurological\",\n    specialty: \"Neurology\"\n  },\n  {\n    code: \"G20\",\n    description: \"Parkinson's disease\",\n    category: \"Neurological\",\n    specialty: \"Neurology\"\n  },\n  \n  // Default/Unknown\n  {\n    code: \"Z00.00\",\n    description: \"Encounter for general adult medical examination without abnormal findings\",\n    category: \"General\",\n    specialty: \"General Medicine\"\n  }\n];\n\nexport function findICD10ByCode(code: string): ICD10Code | undefined {\n  return icd10Database.find(icd => icd.code === code);\n}\n\nexport function findICD10ByDescription(description: string): ICD10Code | undefined {\n  const lowerDescription = description.toLowerCase();\n  return icd10Database.find(icd => \n    icd.description.toLowerCase().includes(lowerDescription) ||\n    lowerDescription.includes(icd.description.toLowerCase().split(',')[0])\n  );\n}\n\nexport function getICD10sBySpecialty(specialty: string): ICD10Code[] {\n  return icd10Database.filter(icd => icd.specialty === specialty);\n}\n","size_bytes":3794},"client/src/lib/medication-data.ts":{"content":"export interface MedicationInfo {\n  name: string;\n  activeIngredient: string;\n  contraindications: string[];\n  compatibleICD10Codes: string[];\n  incompatibleICD10Codes: string[];\n  riskFactors: string[];\n}\n\nexport const medicationDatabase: MedicationInfo[] = [\n  {\n    name: \"Metformin HCl\",\n    activeIngredient: \"Metformin\",\n    contraindications: [\"I21.9\", \"N18.6\", \"N18.3\"],\n    compatibleICD10Codes: [\"E11.9\", \"E11.65\"],\n    incompatibleICD10Codes: [\"I21.9\", \"N18.6\", \"N18.3\"],\n    riskFactors: [\"Renal impairment\", \"Heart failure\", \"Acidosis\"]\n  },\n  {\n    name: \"Warfarin\",\n    activeIngredient: \"Warfarin\",\n    contraindications: [\"F31.2\", \"K25.9\"],\n    compatibleICD10Codes: [\"I21.9\", \"I25.10\", \"I50.9\"],\n    incompatibleICD10Codes: [\"F31.2\", \"K25.9\"],\n    riskFactors: [\"Bleeding disorders\", \"GI ulcers\", \"Drug interactions\"]\n  },\n  {\n    name: \"Insulin Glargine\",\n    activeIngredient: \"Insulin\",\n    contraindications: [\"N18.6\"],\n    compatibleICD10Codes: [\"E11.9\", \"E11.65\"],\n    incompatibleICD10Codes: [\"N18.6\"],\n    riskFactors: [\"Severe kidney disease\", \"Hypoglycemia\"]\n  },\n  {\n    name: \"Phenytoin\",\n    activeIngredient: \"Phenytoin\",\n    contraindications: [\"K25.9\", \"F32.9\"],\n    compatibleICD10Codes: [\"G40.9\"],\n    incompatibleICD10Codes: [\"K25.9\", \"F32.9\"],\n    riskFactors: [\"GI irritation\", \"Drug interactions\", \"Mood changes\"]\n  },\n  {\n    name: \"Aspirin\",\n    activeIngredient: \"Acetylsalicylic Acid\",\n    contraindications: [\"J45.9\", \"K25.9\"],\n    compatibleICD10Codes: [\"I21.9\", \"I25.10\"],\n    incompatibleICD10Codes: [\"J45.9\", \"K25.9\"],\n    riskFactors: [\"Asthma\", \"GI bleeding\", \"Allergy\"]\n  },\n  {\n    name: \"Prednisone\",\n    activeIngredient: \"Prednisone\",\n    contraindications: [\"E11.9\", \"F41.9\"],\n    compatibleICD10Codes: [\"J45.9\", \"K50.90\"],\n    incompatibleICD10Codes: [\"E11.9\", \"F41.9\"],\n    riskFactors: [\"Diabetes\", \"Anxiety\", \"Immunosuppression\"]\n  },\n  {\n    name: \"Lisinopril\",\n    activeIngredient: \"Lisinopril\",\n    contraindications: [\"N18.6\"],\n    compatibleICD10Codes: [\"I25.10\", \"I50.9\"],\n    incompatibleICD10Codes: [\"N18.6\"],\n    riskFactors: [\"Renal impairment\", \"Hyperkalemia\"]\n  },\n  {\n    name: \"Levothyroxine\",\n    activeIngredient: \"Levothyroxine\",\n    contraindications: [\"I21.9\", \"F31.2\"],\n    compatibleICD10Codes: [\"E03.9\"],\n    incompatibleICD10Codes: [\"I21.9\", \"F31.2\"],\n    riskFactors: [\"Cardiovascular disease\", \"Bipolar disorder\"]\n  },\n  {\n    name: \"Albuterol\",\n    activeIngredient: \"Albuterol\",\n    contraindications: [\"I25.10\", \"F41.9\"],\n    compatibleICD10Codes: [\"J45.9\", \"J44.1\"],\n    incompatibleICD10Codes: [\"I25.10\", \"F41.9\"],\n    riskFactors: [\"Heart disease\", \"Anxiety disorders\"]\n  },\n  {\n    name: \"Carbamazepine\",\n    activeIngredient: \"Carbamazepine\",\n    contraindications: [\"F32.9\", \"K25.9\"],\n    compatibleICD10Codes: [\"G40.9\", \"F31.2\"],\n    incompatibleICD10Codes: [\"F32.9\", \"K25.9\"],\n    riskFactors: [\"Depression\", \"GI issues\", \"Blood disorders\"]\n  }\n];\n\nexport function findMedicationByName(name: string): MedicationInfo | undefined {\n  return medicationDatabase.find(med => \n    med.name.toLowerCase() === name.toLowerCase() ||\n    med.name.toLowerCase().includes(name.toLowerCase())\n  );\n}\n\nexport function findMedicationByActiveIngredient(ingredient: string): MedicationInfo | undefined {\n  return medicationDatabase.find(med => \n    med.activeIngredient.toLowerCase() === ingredient.toLowerCase()\n  );\n}\n\nexport function checkCompatibility(medicationName: string, icd10Code: string): {\n  isCompatible: boolean;\n  riskLevel: \"low\" | \"medium\" | \"high\";\n  notes: string;\n} {\n  const medication = findMedicationByName(medicationName);\n  \n  if (!medication) {\n    return {\n      isCompatible: false,\n      riskLevel: \"medium\",\n      notes: \"Medication not found in database\"\n    };\n  }\n  \n  if (medication.incompatibleICD10Codes.includes(icd10Code)) {\n    return {\n      isCompatible: false,\n      riskLevel: \"high\",\n      notes: `${medicationName} is contraindicated for this diagnosis`\n    };\n  }\n  \n  if (medication.compatibleICD10Codes.includes(icd10Code)) {\n    return {\n      isCompatible: true,\n      riskLevel: \"low\",\n      notes: `${medicationName} is appropriate for this diagnosis`\n    };\n  }\n  \n  return {\n    isCompatible: true,\n    riskLevel: \"medium\",\n    notes: \"Compatibility requires manual review\"\n  };\n}\n","size_bytes":4316},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { fdaUsageTracker } from \"./fda-usage-tracker\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// FDA-related endpoints that trigger backend FDA API calls\nconst FDA_TRIGGERING_ENDPOINTS = [\n  '/api/upload',\n  '/api/medications/search',\n  '/api/medications/',\n  '/api/fda-status'\n];\n\n// Determine if a URL triggers FDA API usage on the backend\nfunction triggersFdaApiUsage(url: string): boolean {\n  return FDA_TRIGGERING_ENDPOINTS.some(endpoint => {\n    if (endpoint.endsWith('/')) {\n      return url.includes(endpoint);\n    }\n    return url === endpoint || url.startsWith(endpoint + '?');\n  });\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  // Handle FormData differently - don't set Content-Type header\n  const isFormData = data instanceof FormData;\n  \n  // Track when we're about to make a call that triggers FDA API usage\n  const willTriggerFda = triggersFdaApiUsage(url);\n  \n  try {\n    const res = await fetch(url, {\n      method,\n      headers: data && !isFormData ? { \"Content-Type\": \"application/json\" } : {},\n      body: isFormData ? data : data ? JSON.stringify(data) : undefined,\n      credentials: \"include\",\n    });\n\n    await throwIfResNotOk(res);\n    \n    // Record successful FDA-triggering operation\n    if (willTriggerFda) {\n      fdaUsageTracker.recordApiCall(url, true);\n    }\n    \n    return res;\n  } catch (error) {\n    // Record failed FDA-triggering operation\n    if (willTriggerFda) {\n      const errorType = error instanceof Error ? error.message : 'unknown_error';\n      fdaUsageTracker.recordApiCall(url, false, errorType);\n    }\n    \n    throw error;\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2646},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport StatsOverview from \"@/components/dashboard/stats-overview\";\nimport CompatibilityChart from \"@/components/dashboard/compatibility-chart\";\nimport SpecialtyBreakdown from \"@/components/dashboard/specialty-breakdown\";\nimport MismatchesTable from \"@/components/dashboard/mismatches-table\";\nimport CompatibilitySettings from \"@/components/dashboard/compatibility-settings\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, User, RotateCcw } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { \n  DashboardStats, \n  MedicalRecord, \n  CompatibilityConfig \n} from \"@shared/schema\";\nimport { defaultCompatibilityConfig } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  loadCompatibilityConfig, \n  saveCompatibilityConfig,\n  isLocalStorageAvailable \n} from \"@/lib/storage\";\n\nexport default function Dashboard() {\n  const { toast } = useToast();\n  const [appliedConfig, setAppliedConfig] = useState<CompatibilityConfig>(defaultCompatibilityConfig);\n  const [draftConfig, setDraftConfig] = useState<CompatibilityConfig>(defaultCompatibilityConfig);\n\n  // Load saved compatibility configuration from localStorage on mount\n  useEffect(() => {\n    const savedConfig = loadCompatibilityConfig();\n    setAppliedConfig(savedConfig);\n    setDraftConfig(savedConfig);\n    \n    // Show notification if localStorage is not available\n    if (!isLocalStorageAvailable()) {\n      toast({\n        title: \"Local Storage Unavailable\",\n        description: \"Your configuration preferences cannot be saved for future sessions.\",\n        variant: \"default\",\n      });\n    }\n  }, [toast]);\n\n  const { data: stats, isLoading: statsLoading, error: statsError } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\", appliedConfig],\n    queryFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/dashboard/stats\", appliedConfig);\n      return await response.json();\n    },\n  });\n\n  // Preview stats query for draft configuration\n  const { data: previewStats, isLoading: previewStatsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\", \"preview\", draftConfig],\n    queryFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/dashboard/stats\", draftConfig);\n      return await response.json();\n    },\n  });\n\n  const { data: mismatches, isLoading: mismatchesLoading } = useQuery<MedicalRecord[]>({\n    queryKey: [\"/api/mismatches\"],\n  });\n\n  const resetDataMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/data/reset\"),\n    onSuccess: () => {\n      // Invalidate all relevant queries to refresh the dashboard\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/mismatches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/specialties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/records\"] });\n      \n      toast({\n        title: \"Data Reset Complete\",\n        description: \"All uploaded medical data has been cleared successfully.\",\n      });\n    },\n    onError: (error) => {\n      console.error(\"Reset error:\", error);\n      toast({\n        title: \"Reset Failed\",\n        description: \"Failed to clear medical data. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleReset = () => {\n    if (window.confirm(\"Are you sure you want to clear all uploaded medical data? This action cannot be undone.\")) {\n      resetDataMutation.mutate();\n    }\n  };\n\n  const handleDraftConfigChange = (newConfig: CompatibilityConfig) => {\n    setDraftConfig(newConfig);\n  };\n\n  const handleSaveConfiguration = (configToSave: CompatibilityConfig) => {\n    // Apply the draft configuration\n    setAppliedConfig(configToSave);\n    setDraftConfig(configToSave);\n    \n    // Save configuration to localStorage for persistence\n    const saved = saveCompatibilityConfig(configToSave);\n    \n    if (!saved && isLocalStorageAvailable()) {\n      // Only show error if localStorage is available but saving failed\n      toast({\n        title: \"Settings Not Saved\",\n        description: \"Failed to save your configuration preferences. Your settings will reset when you refresh the page.\",\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Settings Saved\",\n        description: \"Your compatibility configuration has been applied successfully.\",\n      });\n    }\n    \n    // Invalidate main stats query to refresh with new applied config\n    queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\", configToSave] });\n  };\n\n  return (\n    <div className=\"flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Medical Data Analysis Dashboard</h2>\n            <p className=\"text-muted-foreground\">Analyze medication compatibility with ICD-10 diagnoses</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <Button \n              variant=\"outline\"\n              onClick={handleReset}\n              disabled={resetDataMutation.isPending || !stats?.totalRecords}\n              data-testid=\"button-reset-data\"\n            >\n              <RotateCcw className=\"mr-2 h-4 w-4\" />\n              {resetDataMutation.isPending ? \"Clearing...\" : \"Reset Data\"}\n            </Button>\n            <Link href=\"/upload\">\n              <Button data-testid=\"button-new-analysis\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                New Analysis\n              </Button>\n            </Link>\n            <div className=\"w-8 h-8 bg-muted rounded-full flex items-center justify-center\" data-testid=\"avatar-user\">\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Dashboard Content */}\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        {/* Compatibility Configuration */}\n        <div className=\"mb-8\">\n          <CompatibilitySettings\n            config={draftConfig}\n            onChange={handleDraftConfigChange}\n            onSave={handleSaveConfiguration}\n            stats={previewStats}\n            isLoading={previewStatsLoading}\n            defaultOpen={false}\n          />\n        </div>\n\n\n        {/* Error State */}\n        {statsError && (\n          <div className=\"mb-8 p-4 bg-destructive/10 border border-destructive/20 rounded-lg\" data-testid=\"error-stats\">\n            <p className=\"text-destructive text-sm\">\n              Error loading statistics: {statsError.message}\n            </p>\n          </div>\n        )}\n\n        {/* Stats Overview */}\n        <StatsOverview stats={stats} isLoading={statsLoading} />\n\n        {/* Analysis Results */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <CompatibilityChart stats={stats} isLoading={statsLoading} />\n          <SpecialtyBreakdown />\n        </div>\n\n        {/* Recent Mismatches */}\n        <MismatchesTable \n          mismatches={mismatches} \n          isLoading={mismatchesLoading}\n          showPagination={true}\n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":7460},"client/src/pages/mismatches.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport MismatchesTable from \"@/components/dashboard/mismatches-table\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertTriangle } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { MedicalRecord } from \"@shared/schema\";\n\nexport default function Mismatches() {\n  const { data: mismatches, isLoading } = useQuery<MedicalRecord[]>({\n    queryKey: [\"/api/mismatches\"],\n  });\n\n  return (\n    <div className=\"flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground flex items-center\">\n              <AlertTriangle className=\"mr-3 h-6 w-6 text-destructive\" />\n              Medication Mismatches\n            </h2>\n            <p className=\"text-muted-foreground\">Review medication-diagnosis compatibility issues</p>\n          </div>\n          <Link href=\"/\">\n            <Button variant=\"outline\" data-testid=\"button-back-dashboard\">\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n      </header>\n\n      {/* Mismatches Content */}\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <MismatchesTable \n          mismatches={mismatches} \n          isLoading={isLoading}\n          showPagination={true}\n          showHeader={false}\n        />\n      </main>\n    </div>\n  );\n}\n","size_bytes":1500},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/upload.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport UploadZone from \"@/components/upload/upload-zone\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { CheckCircle, AlertTriangle, FileText, Upload as UploadIcon, FileSpreadsheet } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface UploadResponse {\n  success: boolean;\n  analysisId: string;\n  summary: {\n    totalRecords: number;\n    compatibleRecords: number;\n    incompatibleRecords: number;\n    needsReviewRecords: number;\n    successRate: string;\n    specialtiesAffected: number;\n  };\n}\n\nexport default function Upload() {\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [uploadedFile, setUploadedFile] = useState<File | null>(null);\n  const [analysisResult, setAnalysisResult] = useState<UploadResponse | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const uploadMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      \n      // Simulate progress\n      setUploadProgress(10);\n      \n      const response = await apiRequest(\"POST\", \"/api/upload\", formData);\n      \n      setUploadProgress(50);\n      \n      // Simulate additional processing time\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setUploadProgress(80);\n      \n      const result = await response.json();\n      setUploadProgress(100);\n      \n      return result;\n    },\n    onSuccess: (data: UploadResponse) => {\n      setAnalysisResult(data);\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/mismatches\"] });\n      toast({\n        title: \"Analysis Complete\",\n        description: `Successfully analyzed ${data.summary.totalRecords} records`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Upload Failed\",\n        description: error.message || \"Failed to process the uploaded file\",\n        variant: \"destructive\",\n      });\n      setUploadProgress(0);\n      setUploadedFile(null);\n    },\n  });\n\n  const handleFileUpload = (file: File) => {\n    setUploadedFile(file);\n    setUploadProgress(0);\n    setAnalysisResult(null);\n    uploadMutation.mutate(file);\n  };\n\n  return (\n    <div className=\"flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold text-foreground\">Upload Medical Data</h2>\n            <p className=\"text-muted-foreground\">Upload Excel files for medication-diagnosis compatibility analysis</p>\n          </div>\n          <Link href=\"/\">\n            <Button variant=\"outline\" data-testid=\"button-back-dashboard\">\n              Back to Dashboard\n            </Button>\n          </Link>\n        </div>\n      </header>\n\n      {/* Upload Content */}\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Upload Section */}\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n              <UploadIcon className=\"mr-2 h-5 w-5 text-primary\" />\n              Upload Medical Data\n            </h3>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <UploadZone \n                  onFileUpload={handleFileUpload}\n                  disabled={uploadMutation.isPending}\n                />\n                \n                {/* Format Information */}\n                <div className=\"mt-6 p-4 bg-accent/50 rounded-lg border\" data-testid=\"format-info\">\n                  <h4 className=\"font-medium text-foreground mb-3 flex items-center\">\n                    <FileSpreadsheet className=\"mr-2 h-4 w-4\" />\n                    Expected Excel Format\n                  </h4>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <h5 className=\"font-medium text-foreground mb-2\">Required Columns:</h5>\n                      <ul className=\"space-y-1 text-muted-foreground\">\n                        <li>• <strong>Claim Code Ref</strong> - Patient identifier</li>\n                        <li>• <strong>Speciality</strong> - Medical specialty</li>\n                        <li>• <strong>Active Ingredient</strong> - Medication ingredient</li>\n                        <li>• <strong>Diag 1</strong> - Primary ICD-10 diagnosis code</li>\n                      </ul>\n                    </div>\n                    <div>\n                      <h5 className=\"font-medium text-foreground mb-2\">Optional Columns:</h5>\n                      <ul className=\"space-y-1 text-muted-foreground\">\n                        <li>• <strong>Diag 2, Diag 3...</strong> - Additional diagnoses</li>\n                        <li>• <strong>Activity Code</strong> - Procedure code</li>\n                        <li>• <strong>Gender</strong> - Patient gender</li>\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"mt-3 text-xs text-muted-foreground\">\n                    Note: The system will automatically map your Excel columns to the required format.\n                  </div>\n                </div>\n                \n                {/* Upload Progress */}\n                {uploadMutation.isPending && uploadedFile && (\n                  <div className=\"mt-6\" data-testid=\"upload-progress\">\n                    <Card className=\"bg-accent\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-foreground\">\n                            Processing: {uploadedFile.name}\n                          </span>\n                          <span className=\"text-sm text-muted-foreground\">{uploadProgress}%</span>\n                        </div>\n                        <Progress value={uploadProgress} className=\"mb-2\" />\n                        <div className=\"text-xs text-muted-foreground\">\n                          {uploadProgress < 30 ? \"Validating data structure...\" :\n                           uploadProgress < 70 ? \"Analyzing ICD-10 codes...\" :\n                           \"Generating compatibility report...\"}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Analysis Results */}\n          {analysisResult && (\n            <div className=\"mb-8\" data-testid=\"analysis-results\">\n              <h3 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n                <CheckCircle className=\"mr-2 h-5 w-5 text-success\" />\n                Analysis Complete\n              </h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Total Records</p>\n                        <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-records\">\n                          {analysisResult.summary.totalRecords}\n                        </p>\n                      </div>\n                      <FileText className=\"h-8 w-8 text-primary\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Compatibility Issues</p>\n                        <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-issues\">\n                          {analysisResult.summary.incompatibleRecords + analysisResult.summary.needsReviewRecords}\n                        </p>\n                      </div>\n                      <AlertTriangle className=\"h-8 w-8 text-destructive\" />\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"text-sm text-muted-foreground\">Success Rate</p>\n                        <p className=\"text-2xl font-bold text-success\" data-testid=\"text-success-rate\">\n                          {analysisResult.summary.successRate}\n                        </p>\n                      </div>\n                      <CheckCircle className=\"h-8 w-8 text-success\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <h4 className=\"text-lg font-semibold text-foreground mb-4\">Analysis Summary</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-muted-foreground\">Compatible Records:</span>\n                      <span className=\"font-medium text-success\">{analysisResult.summary.compatibleRecords}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-muted-foreground\">Records Needing Review:</span>\n                      <span className=\"font-medium text-warning\">{analysisResult.summary.needsReviewRecords}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-muted-foreground\">Incompatible Records:</span>\n                      <span className=\"font-medium text-destructive\">{analysisResult.summary.incompatibleRecords}</span>\n                    </div>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-muted-foreground\">Medical Specialties Affected:</span>\n                      <span className=\"font-medium text-foreground\">{analysisResult.summary.specialtiesAffected}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-6 flex space-x-4\">\n                    <Link href=\"/\">\n                      <Button data-testid=\"button-view-dashboard\">\n                        View Dashboard\n                      </Button>\n                    </Link>\n                    <Link href=\"/mismatches\">\n                      <Button variant=\"outline\" data-testid=\"button-view-mismatches\">\n                        View Detailed Mismatches\n                      </Button>\n                    </Link>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* File Format Instructions */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <h4 className=\"text-lg font-semibold text-foreground mb-4\">Required File Format</h4>\n              <div className=\"space-y-3\">\n                <p className=\"text-muted-foreground\">\n                  Your Excel file should contain the following columns:\n                </p>\n                <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                  <li><strong>patientId:</strong> Unique identifier for each patient</li>\n                  <li><strong>medication:</strong> Name of the prescribed medication</li>\n                  <li><strong>dosage:</strong> Medication dosage (optional)</li>\n                  <li><strong>diagnosis:</strong> Patient's diagnosis description</li>\n                  <li><strong>icd10Code:</strong> ICD-10 diagnosis code (optional, will be auto-detected if missing)</li>\n                </ul>\n                <p className=\"text-sm text-muted-foreground mt-3\">\n                  <strong>Supported formats:</strong> .xlsx, .xls (max 10MB)\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":12735},"client/src/components/dashboard/compatibility-chart.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Tooltip as UiTooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { InfoHint } from \"@/components/ui/info-hint\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend, Tooltip } from \"recharts\";\nimport { TrendingUp, Info } from \"lucide-react\";\nimport type { DashboardStats } from \"@shared/schema\";\n\ninterface CompatibilityChartProps {\n  stats?: DashboardStats;\n  isLoading: boolean;\n}\n\nexport default function CompatibilityChart({ stats, isLoading }: CompatibilityChartProps) {\n  if (isLoading || !stats) {\n    return (\n      <TooltipProvider>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"mb-4\">\n              <div className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"text-primary h-5 w-5\" />\n                <h4 className=\"text-lg font-semibold text-foreground\">\n                  Medication Compatibility Overview\n                </h4>\n                <InfoHint\n                  content=\"Visual breakdown of compatibility analysis results\"\n                  ariaLabel=\"Show Compatibility Overview description\"\n                  testId=\"info-compatibility-overview\"\n                />\n              </div>\n            </div>\n            <div className=\"h-[300px] flex items-center justify-center\">\n              <div className=\"text-center text-muted-foreground\">\n                {isLoading ? \"Loading chart...\" : \"No data available\"}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </TooltipProvider>\n    );\n  }\n\n  // Define explicit colors that work with Recharts\n  const CHART_COLORS = {\n    compatible: \"#22c55e\", // Green for compatible\n    needsReview: \"#f59e0b\", // Orange for needs review  \n    incompatible: \"#ef4444\" // Red for incompatible\n  };\n\n  const chartData = [\n    {\n      name: \"Compatible\",\n      value: stats.compatibleCount,\n      color: CHART_COLORS.compatible\n    },\n    {\n      name: \"Needs Review\",\n      value: stats.needsReviewCount,\n      color: CHART_COLORS.needsReview\n    },\n    {\n      name: \"Incompatible\",\n      value: stats.incompatibleCount,\n      color: CHART_COLORS.incompatible\n    }\n  ];\n\n  const RADIAN = Math.PI / 180;\n  const renderCustomizedLabel = ({\n    cx, cy, midAngle, innerRadius, outerRadius, percent\n  }: any) => {\n    const radius = innerRadius + (outerRadius - innerRadius) * 0.5;\n    const x = cx + radius * Math.cos(-midAngle * RADIAN);\n    const y = cy + radius * Math.sin(-midAngle * RADIAN);\n\n    return (\n      <text \n        x={x} \n        y={y} \n        fill=\"white\" \n        textAnchor={x > cx ? 'start' : 'end'} \n        dominantBaseline=\"central\"\n        fontSize={12}\n        fontWeight=\"bold\"\n      >\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    );\n  };\n\n  return (\n    <TooltipProvider>\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"text-primary h-5 w-5\" />\n              <h4 className=\"text-lg font-semibold text-foreground\">\n                Medication Compatibility Overview\n              </h4>\n              <InfoHint\n                content=\"Visual breakdown of compatibility analysis results\"\n                ariaLabel=\"Show Compatibility Overview description\"\n                testId=\"info-compatibility-overview\"\n              />\n            </div>\n          </div>\n        \n        <div className=\"h-[300px]\" data-testid=\"chart-compatibility\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={chartData}\n                cx=\"50%\"\n                cy=\"50%\"\n                labelLine={false}\n                label={renderCustomizedLabel}\n                outerRadius={80}\n                fill=\"#8884d8\"\n                dataKey=\"value\"\n              >\n                {chartData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={entry.color} />\n                ))}\n              </Pie>\n              <Tooltip \n                formatter={(value: number) => [value.toLocaleString(), \"Records\"]}\n              />\n              <Legend \n                verticalAlign=\"bottom\"\n                height={36}\n                formatter={(value, entry) => (\n                  <span style={{ color: entry.color }}>\n                    {value}: {chartData.find(d => d.name === value)?.value.toLocaleString()}\n                  </span>\n                )}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n    </TooltipProvider>\n  );\n}\n","size_bytes":4734},"client/src/components/dashboard/mismatches-table.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertTriangle, Eye, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { MedicalRecord } from \"@shared/schema\";\n\ninterface MismatchesTableProps {\n  mismatches?: MedicalRecord[];\n  isLoading: boolean;\n  showPagination?: boolean;\n  showHeader?: boolean;\n}\n\nexport default function MismatchesTable({ \n  mismatches, \n  isLoading, \n  showPagination = false,\n  showHeader = true \n}: MismatchesTableProps) {\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          {showHeader && (\n            <div className=\"border-b border-border pb-6 mb-6\">\n              <div>\n                <h4 className=\"text-lg font-semibold text-foreground flex items-center\">\n                  <AlertTriangle className=\"text-destructive mr-2 h-5 w-5\" />\n                  Critical Medication Mismatches\n                </h4>\n                <p className=\"text-xs text-muted-foreground/80 mt-1\">High-risk incompatible medication-diagnosis combinations</p>\n              </div>\n            </div>\n          )}\n          <div className=\"space-y-4\">\n            {Array.from({ length: 5 }).map((_, i) => (\n              <div key={i} className=\"h-16 bg-muted rounded animate-pulse\" />\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!mismatches || mismatches.length === 0) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          {showHeader && (\n            <div className=\"border-b border-border pb-6 mb-6\">\n              <div>\n                <h4 className=\"text-lg font-semibold text-foreground flex items-center\">\n                  <AlertTriangle className=\"text-destructive mr-2 h-5 w-5\" />\n                  Critical Medication Mismatches\n                </h4>\n                <p className=\"text-xs text-muted-foreground/80 mt-1\">High-risk incompatible medication-diagnosis combinations</p>\n              </div>\n            </div>\n          )}\n          <div className=\"text-center text-muted-foreground py-8\">\n            No mismatches found. All medications appear to be compatible.\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const getRiskBadgeVariant = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"destructive\";\n      case \"medium\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getRiskLabel = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"High Risk\";\n      case \"medium\":\n        return \"Medium Risk\";\n      default:\n        return \"Low Risk\";\n    }\n  };\n\n  return (\n    <Card>\n      {showHeader && (\n        <div className=\"p-6 border-b border-border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div>\n                <h4 className=\"text-lg font-semibold text-foreground flex items-center\">\n                  <AlertTriangle className=\"text-destructive mr-2 h-5 w-5\" />\n                  Critical Medication Mismatches\n                </h4>\n                <p className=\"text-xs text-muted-foreground/80 mt-1\">High-risk incompatible medication-diagnosis combinations</p>\n              </div>\n              <p className=\"text-xs text-muted-foreground/80 mt-1\">High-risk incompatible medication-diagnosis combinations</p>\n            </div>\n            <Link href=\"/mismatches\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-mismatches\">\n                View All <ArrowRight className=\"ml-1 h-4 w-4\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\" data-testid=\"table-mismatches\">\n          <thead className=\"bg-muted\">\n            <tr>\n              <th className=\"text-left px-6 py-3 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Patient ID\n              </th>\n              <th className=\"text-left px-6 py-3 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Medication\n              </th>\n              <th className=\"text-left px-6 py-3 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Diagnosis\n              </th>\n              <th className=\"text-left px-6 py-3 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                ICD-10\n              </th>\n              <th className=\"text-left px-6 py-3 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Specialty\n              </th>\n              <th className=\"text-left px-6 py-3 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Risk Level\n              </th>\n              <th className=\"text-left px-6 py-3 text-xs font-medium text-muted-foreground uppercase tracking-wider\">\n                Action\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-card divide-y divide-border\">\n            {mismatches.map((record) => (\n              <tr \n                key={record.id} \n                className=\"hover:bg-accent transition-colors\"\n                data-testid={`row-mismatch-${record.patientId}`}\n              >\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-foreground\">\n                  {record.patientId}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-foreground\">{record.medication}</div>\n                  {record.dosage && (\n                    <div className=\"text-xs text-muted-foreground\">{record.dosage}</div>\n                  )}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                  {record.diagnosis}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-foreground\">\n                  {record.icd10Code}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-foreground\">\n                  {record.specialty}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <Badge \n                    variant={getRiskBadgeVariant(record.riskLevel)}\n                    data-testid={`badge-risk-${record.riskLevel}`}\n                  >\n                    {getRiskLabel(record.riskLevel)}\n                  </Badge>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm\">\n                  <Link href={`/mismatch/${record.id}`}>\n                    <Button \n                      variant=\"ghost\" \n                      size=\"sm\"\n                      data-testid={`button-view-details-${record.patientId}`}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                  </Link>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n\n      {showPagination && (\n        <div className=\"px-6 py-4 border-t border-border bg-muted/30\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              Showing {mismatches.length} of {mismatches.length} critical mismatches\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-previous-page\">\n                Previous\n              </Button>\n              <Button size=\"sm\" data-testid=\"button-page-1\">\n                1\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-next-page\">\n                Next\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":8077},"client/src/components/dashboard/specialty-breakdown.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { InfoHint } from \"@/components/ui/info-hint\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { BarChart3, Info } from \"lucide-react\";\nimport type { SpecialtyData } from \"@shared/schema\";\n\nexport default function SpecialtyBreakdown() {\n  const { data: specialties, isLoading } = useQuery<SpecialtyData[]>({\n    queryKey: [\"/api/dashboard/specialties\"],\n  });\n\n  if (isLoading) {\n    return (\n      <TooltipProvider>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"mb-4\">\n              <div className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"text-secondary h-5 w-5\" />\n                <h4 className=\"text-lg font-semibold text-foreground\">\n                  Affected Medical Specialties\n                </h4>\n                <InfoHint\n                  content=\"Distribution of compatibility issues by medical specialty\"\n                  ariaLabel=\"Show Medical Specialties description\"\n                  testId=\"info-medical-specialties\"\n                />\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              {Array.from({ length: 5 }).map((_, i) => (\n                <div key={i} className=\"space-y-2\">\n                  <div className=\"h-4 bg-muted rounded animate-pulse\" />\n                  <div className=\"h-2 bg-muted rounded animate-pulse\" />\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </TooltipProvider>\n    );\n  }\n\n  if (!specialties || specialties.length === 0) {\n    return (\n      <TooltipProvider>\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"mb-4\">\n              <div className=\"flex items-center space-x-2\">\n                <BarChart3 className=\"text-secondary h-5 w-5\" />\n                <h4 className=\"text-lg font-semibold text-foreground\">\n                  Affected Medical Specialties\n                </h4>\n                <InfoHint\n                  content=\"Distribution of compatibility issues by medical specialty\"\n                  ariaLabel=\"Show Medical Specialties description\"\n                  testId=\"info-medical-specialties\"\n                />\n              </div>\n            </div>\n            <div className=\"text-center text-muted-foreground py-8\">\n              No specialty data available\n            </div>\n          </CardContent>\n        </Card>\n      </TooltipProvider>\n    );\n  }\n\n  const getRiskColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"bg-destructive\";\n      case \"medium\":\n        return \"bg-warning\";\n      default:\n        return \"bg-success\";\n    }\n  };\n\n  const getRiskTextColor = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"text-destructive\";\n      case \"medium\":\n        return \"text-warning\";\n      default:\n        return \"text-success\";\n    }\n  };\n\n  return (\n    <TooltipProvider>\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"mb-4\">\n            <div className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"text-secondary h-5 w-5\" />\n              <h4 className=\"text-lg font-semibold text-foreground\">\n                Affected Medical Specialties\n              </h4>\n              <InfoHint\n                content=\"Distribution of compatibility issues by medical specialty\"\n                ariaLabel=\"Show Medical Specialties description\"\n                testId=\"info-medical-specialties\"\n              />\n            </div>\n          </div>\n        <div className=\"space-y-4\" data-testid=\"specialty-breakdown\">\n          {specialties.slice(0, 6).map((specialty, index) => (\n            <div key={specialty.name} className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-foreground\">\n                  {specialty.name}\n                </span>\n                <span className={`text-sm font-medium ${getRiskTextColor(specialty.riskLevel)}`}>\n                  {specialty.issueCount} issues\n                </span>\n              </div>\n              <Progress \n                value={specialty.percentage} \n                className=\"h-2\"\n                data-testid={`progress-${specialty.name.toLowerCase().replace(/\\s+/g, '-')}`}\n              />\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n    </TooltipProvider>\n  );\n}\n","size_bytes":4688},"client/src/components/dashboard/stats-overview.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { InfoHint } from \"@/components/ui/info-hint\";\nimport { Database, AlertTriangle, CheckCircle, Stethoscope, Info } from \"lucide-react\";\nimport type { DashboardStats } from \"@shared/schema\";\n\ninterface StatsOverviewProps {\n  stats?: DashboardStats;\n  isLoading: boolean;\n}\n\nexport default function StatsOverview({ stats, isLoading }: StatsOverviewProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <Skeleton className=\"h-12 w-full\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"text-center text-muted-foreground\">\n              No data available. Upload a file to see statistics.\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <TooltipProvider>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <p className=\"text-sm text-muted-foreground\">Total Records</p>\n                  <InfoHint\n                    content=\"Patient medication records analyzed\"\n                    ariaLabel=\"Show Total Records description\"\n                    testId=\"info-total-records\"\n                  />\n                </div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-total-records\">\n                  {stats.totalRecords.toLocaleString()}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                <Database className=\"text-primary h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <p className=\"text-sm text-muted-foreground\">Compatibility Issues</p>\n                  <InfoHint\n                    content=\"Incompatible + needs review records\"\n                    ariaLabel=\"Show Compatibility Issues description\"\n                    testId=\"info-compatibility-issues\"\n                  />\n                </div>\n                <p className=\"text-2xl font-bold text-destructive\" data-testid=\"text-compatibility-issues\">\n                  {stats.compatibilityIssues.toLocaleString()}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-destructive/10 rounded-lg flex items-center justify-center\">\n                <AlertTriangle className=\"text-destructive h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <p className=\"text-sm text-muted-foreground\">Success Rate</p>\n                  <InfoHint\n                    content=\"Percentage of compatible combinations\"\n                    ariaLabel=\"Show Success Rate description\"\n                    testId=\"info-success-rate\"\n                  />\n                </div>\n                <p className=\"text-2xl font-bold text-success\" data-testid=\"text-success-rate\">\n                  {stats.successRate}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-success/10 rounded-lg flex items-center justify-center\">\n                <CheckCircle className=\"text-success h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <p className=\"text-sm text-muted-foreground\">Specialties Affected</p>\n                  <InfoHint\n                    content=\"Medical specialties with issues found\"\n                    ariaLabel=\"Show Specialties Affected description\"\n                    testId=\"info-specialties-affected\"\n                  />\n                </div>\n                <p className=\"text-2xl font-bold text-foreground\" data-testid=\"text-specialties-affected\">\n                  {stats.specialtiesAffected}\n                </p>\n              </div>\n              <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                <Stethoscope className=\"text-secondary h-6 w-6\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </TooltipProvider>\n  );\n}\n","size_bytes":5443},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  ChartLine, \n  Upload, \n  Database, \n  AlertTriangle, \n  BarChart3, \n  Settings,\n  Stethoscope\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: ChartLine },\n  { name: \"Upload Data\", href: \"/upload\", icon: Upload },\n  { name: \"ICD-10 Database\", href: \"/icd10\", icon: Database },\n  { name: \"Mismatches\", href: \"/mismatches\", icon: AlertTriangle },\n  { name: \"Analytics\", href: \"/analytics\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"w-64 bg-card border-r border-border shadow-sm\">\n      {/* Logo/Header */}\n      <div className=\"p-6 border-b border-border\">\n        <h1 className=\"text-xl font-bold text-foreground flex items-center\" data-testid=\"text-app-title\">\n          <ChartLine className=\"text-primary mr-3 h-6 w-6\" />\n          MedAnalyzer\n        </h1>\n        <p className=\"text-sm text-muted-foreground mt-1\">Medical Data Analysis Portal</p>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"p-4 space-y-2\">\n        {navigation.map((item) => {\n          const isActive = location === item.href;\n          const Icon = item.icon;\n          \n          return (\n            <Link \n              key={item.name} \n              href={item.href}\n              data-testid={`link-${item.name.toLowerCase().replace(' ', '-')}`}\n            >\n              <div\n                className={cn(\n                  \"sidebar-item flex items-center px-4 py-3 rounded-md transition-colors\",\n                  isActive\n                    ? \"text-primary bg-accent\"\n                    : \"text-muted-foreground hover:bg-accent hover:text-foreground\"\n                )}\n              >\n                <Icon className=\"mr-3 h-4 w-4\" />\n                {item.name}\n              </div>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Footer */}\n      <div className=\"absolute bottom-4 left-4 right-4\">\n        <div className=\"flex items-center text-xs text-muted-foreground\">\n          <Stethoscope className=\"mr-2 h-3 w-3\" />\n          Healthcare Compliance Ready\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2302},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"import { X, AlertCircle, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { cn } from \"@/lib/utils\";\nimport { useEffect } from \"react\";\n\ninterface DrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: React.ReactNode;\n  isLoading?: boolean;\n  error?: string | null;\n  className?: string;\n  width?: string;\n}\n\nfunction LoadingState() {\n  return (\n    <div className=\"flex items-center justify-center py-12\" data-testid=\"drawer-loading\">\n      <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      <span className=\"ml-3 text-sm text-muted-foreground\">Loading...</span>\n    </div>\n  );\n}\n\nfunction ErrorState({ error, onRetry }: { error: string; onRetry?: () => void }) {\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 text-center\" data-testid=\"drawer-error\">\n      <AlertCircle className=\"h-12 w-12 text-destructive mb-4\" />\n      <h3 className=\"text-lg font-medium text-foreground mb-2\">Something went wrong</h3>\n      <p className=\"text-sm text-muted-foreground max-w-sm mb-4\">{error}</p>\n      {onRetry && (\n        <Button variant=\"outline\" onClick={onRetry} size=\"sm\" data-testid=\"button-retry\">\n          Try Again\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default function Drawer({\n  isOpen,\n  onClose,\n  title,\n  children,\n  isLoading = false,\n  error = null,\n  className,\n  width = \"40%\"\n}: DrawerProps) {\n  // Handle ESC key to close drawer\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape' && isOpen) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      // Prevent body scroll when drawer is open\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose]);\n\n  // Handle overlay click to close drawer\n  const handleOverlayClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  // Focus trap management\n  useEffect(() => {\n    if (isOpen) {\n      const focusableElements = document.querySelectorAll(\n        'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n      );\n      const firstFocusable = focusableElements[0] as HTMLElement;\n      const lastFocusable = focusableElements[focusableElements.length - 1] as HTMLElement;\n\n      const handleTabKey = (e: KeyboardEvent) => {\n        if (e.key !== 'Tab') return;\n\n        if (e.shiftKey) {\n          if (document.activeElement === firstFocusable) {\n            lastFocusable?.focus();\n            e.preventDefault();\n          }\n        } else {\n          if (document.activeElement === lastFocusable) {\n            firstFocusable?.focus();\n            e.preventDefault();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', handleTabKey);\n      // Focus the close button when drawer opens\n      setTimeout(() => {\n        const closeButton = document.querySelector('[data-testid=\"button-close-drawer\"]') as HTMLElement;\n        closeButton?.focus();\n      }, 100);\n\n      return () => {\n        document.removeEventListener('keydown', handleTabKey);\n      };\n    }\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"drawer-title\"\n      data-testid=\"drawer-overlay-container\"\n    >\n      {/* Overlay Background */}\n      <div\n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300 ease-in-out\"\n        onClick={handleOverlayClick}\n        data-testid=\"drawer-overlay\"\n        aria-hidden=\"true\"\n      />\n\n      {/* Drawer Container */}\n      <div className=\"ml-auto relative\">\n        <div\n          className={cn(\n            \"h-full bg-background border-l border-border shadow-2xl\",\n            \"transform transition-transform duration-300 ease-in-out\",\n            \"flex flex-col\",\n            // Responsive width\n            \"w-full sm:w-auto\",\n            className\n          )}\n          style={{\n            width: window.innerWidth < 640 ? '100%' : width,\n            minWidth: window.innerWidth < 640 ? '100%' : '400px',\n            maxWidth: '90vw'\n          }}\n          data-testid=\"drawer-content\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-6 border-b border-border bg-card/50 flex-shrink-0\">\n            <div className=\"min-w-0 flex-1\">\n              <h2\n                id=\"drawer-title\"\n                className=\"text-lg font-semibold text-foreground truncate pr-4\"\n                data-testid=\"drawer-title\"\n              >\n                {title}\n              </h2>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8 text-muted-foreground hover:text-foreground flex-shrink-0\"\n              data-testid=\"button-close-drawer\"\n              aria-label=\"Close drawer\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Content Area */}\n          <div className=\"flex-1 overflow-hidden\">\n            {error ? (\n              <div className=\"p-6\">\n                <ErrorState error={error} />\n              </div>\n            ) : isLoading ? (\n              <div className=\"p-6\">\n                <LoadingState />\n              </div>\n            ) : (\n              <ScrollArea className=\"h-full\" data-testid=\"drawer-scroll-area\">\n                <div className=\"p-6\">\n                  {children}\n                </div>\n              </ScrollArea>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport type { DrawerProps };","size_bytes":5956},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/upload/upload-zone.tsx":{"content":"import { useCallback, useState } from \"react\";\nimport { CloudUpload, FileSpreadsheet, AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface UploadZoneProps {\n  onFileUpload: (file: File) => void;\n  disabled?: boolean;\n}\n\nexport default function UploadZone({ onFileUpload, disabled = false }: UploadZoneProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const validateFile = (file: File): string | null => {\n    const validTypes = [\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', // .xlsx\n      'application/vnd.ms-excel', // .xls\n    ];\n    \n    if (!validTypes.includes(file.type)) {\n      return \"Please upload an Excel file (.xlsx or .xls)\";\n    }\n    \n    if (file.size > 10 * 1024 * 1024) { // 10MB\n      return \"File size must be less than 10MB\";\n    }\n    \n    return null;\n  };\n\n  const handleFile = useCallback((file: File) => {\n    const validationError = validateFile(file);\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n    \n    setError(null);\n    onFileUpload(file);\n  }, [onFileUpload]);\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    if (disabled) return;\n    \n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFile(files[0]);\n    }\n  }, [handleFile, disabled]);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    if (!disabled) {\n      setIsDragOver(true);\n    }\n  }, [disabled]);\n\n  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFile(files[0]);\n    }\n  }, [handleFile]);\n\n  const handleClick = () => {\n    if (disabled) return;\n    document.getElementById('file-input')?.click();\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <div\n        className={`upload-zone border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${\n          isDragOver\n            ? \"border-primary/50 bg-primary/5\"\n            : \"border-border hover:border-primary/50\"\n        } ${disabled ? \"opacity-50 cursor-not-allowed\" : \"\"}`}\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        onClick={handleClick}\n        data-testid=\"upload-zone\"\n      >\n        <div className=\"max-w-sm mx-auto\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CloudUpload className=\"text-2xl text-primary h-8 w-8\" />\n          </div>\n          <h4 className=\"text-lg font-medium text-foreground mb-2\">\n            Drop your Excel file here\n          </h4>\n          <p className=\"text-muted-foreground mb-4\">or click to browse files</p>\n          <Button \n            disabled={disabled}\n            data-testid=\"button-select-file\"\n          >\n            <FileSpreadsheet className=\"mr-2 h-4 w-4\" />\n            Select File\n          </Button>\n          <p className=\"text-xs text-muted-foreground mt-3\">\n            Supports .xlsx, .xls files up to 10MB\n          </p>\n        </div>\n      </div>\n      \n      <input\n        id=\"file-input\"\n        type=\"file\"\n        accept=\".xlsx,.xls\"\n        onChange={handleFileInput}\n        className=\"hidden\"\n        disabled={disabled}\n        data-testid=\"input-file\"\n      />\n      \n      {error && (\n        <div className=\"flex items-center text-sm text-destructive bg-destructive/10 border border-destructive/20 rounded-md p-3\" data-testid=\"text-upload-error\">\n          <AlertCircle className=\"mr-2 h-4 w-4\" />\n          {error}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3990},"server/services/icd10Service.ts":{"content":"interface Icd10SearchResult {\n  code: string;\n  description: string;\n  category?: string;\n}\n\ninterface Icd10ApiResponse {\n  0: number; // Total count\n  1: string[]; // Array of codes\n  2: null;\n  3: string[][]; // Array of [code, description, additional_info]\n}\n\ninterface CachedIcd10Result {\n  data: Icd10SearchResult[];\n  timestamp: number;\n  expiresAt: number;\n}\n\ninterface Icd10ValidationResult {\n  isValid: boolean;\n  description?: string;\n  category?: string;\n  specialty?: string;\n}\n\nclass Icd10Service {\n  private static instance: Icd10Service;\n  private cache = new Map<string, CachedIcd10Result>();\n  private readonly baseUrl = 'https://clinicaltables.nlm.nih.gov/api/icd10cm/v3/search';\n  private readonly cacheExpirationMs = 1000 * 60 * 60 * 24; // 24 hours\n  private readonly requestTimeout = 10000; // 10 seconds\n\n  private constructor() {}\n\n  public static getInstance(): Icd10Service {\n    if (!Icd10Service.instance) {\n      Icd10Service.instance = new Icd10Service();\n    }\n    return Icd10Service.instance;\n  }\n\n  /**\n   * Search for ICD-10 codes based on a search term\n   * @param term - The search term (e.g., \"diabetes\", \"heart attack\")\n   * @param maxResults - Maximum number of results to return (default: 20)\n   * @returns Promise<Icd10SearchResult[]>\n   */\n  public async searchIcd10Code(term: string, maxResults: number = 20): Promise<Icd10SearchResult[]> {\n    if (!term || term.trim().length === 0) {\n      throw new Error('Search term cannot be empty');\n    }\n\n    const normalizedTerm = term.trim().toLowerCase();\n    const cacheKey = `search:${normalizedTerm}:${maxResults}`;\n\n    // Check cache first\n    const cachedResult = this.getFromCache(cacheKey);\n    if (cachedResult) {\n      return cachedResult.slice(0, maxResults);\n    }\n\n    try {\n      // Try NLM API first with corrected format\n      const searchParams = new URLSearchParams({\n        terms: normalizedTerm,\n        sf: 'name',\n        df: 'code,name',\n        maxList: maxResults.toString()\n      });\n\n      const url = `${this.baseUrl}?${searchParams.toString()}`;\n      \n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.requestTimeout);\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Medical-Compatibility-System/1.0'\n        },\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        // Fallback to mock data if API is unavailable\n        console.warn(`NLM API unavailable (${response.status}), using fallback data for: ${normalizedTerm}`);\n        const fallbackResults = this.getFallbackSearchResults(normalizedTerm, maxResults);\n        this.setCache(cacheKey, fallbackResults);\n        return fallbackResults;\n      }\n\n      const data: Icd10ApiResponse = await response.json();\n      const results = this.parseSearchResponse(data);\n\n      // Cache the results\n      this.setCache(cacheKey, results);\n\n      return results.slice(0, maxResults);\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new Error('ICD-10 search request timed out');\n      }\n      \n      // Fallback to mock data if there's any API error\n      console.warn(`ICD-10 API error, using fallback data for: ${normalizedTerm}`, error);\n      const fallbackResults = this.getFallbackSearchResults(normalizedTerm, maxResults);\n      this.setCache(cacheKey, fallbackResults);\n      return fallbackResults;\n    }\n  }\n\n  /**\n   * Validate and get information about a specific ICD-10 code\n   * @param code - The ICD-10 code to validate (e.g., \"E11.9\")\n   * @returns Promise<Icd10ValidationResult>\n   */\n  public async validateIcd10Code(code: string): Promise<Icd10ValidationResult> {\n    if (!code || code.trim().length === 0) {\n      return { isValid: false };\n    }\n\n    const normalizedCode = code.trim().toUpperCase();\n    const cacheKey = `validate:${normalizedCode}`;\n\n    // Check cache first\n    const cachedResult = this.getValidationFromCache(cacheKey);\n    if (cachedResult) {\n      return cachedResult;\n    }\n\n    try {\n      // Try NLM API first with corrected format\n      const searchParams = new URLSearchParams({\n        terms: normalizedCode,\n        sf: 'code',\n        df: 'code,name',\n        maxList: '1'\n      });\n\n      const url = `${this.baseUrl}?${searchParams.toString()}`;\n      \n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.requestTimeout);\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Medical-Compatibility-System/1.0'\n        },\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n\n      if (!response.ok) {\n        // Try fallback validation\n        console.warn(`NLM API unavailable for validation (${response.status}), using fallback for: ${normalizedCode}`);\n        const fallbackResult = this.getFallbackValidationResult(normalizedCode);\n        this.setValidationCache(cacheKey, fallbackResult);\n        return fallbackResult;\n      }\n\n      const data: Icd10ApiResponse = await response.json();\n      const results = this.parseSearchResponse(data);\n\n      // Check if we found an exact match\n      const exactMatch = results.find(result => result.code === normalizedCode);\n      \n      if (exactMatch) {\n        const validationResult: Icd10ValidationResult = {\n          isValid: true,\n          description: exactMatch.description,\n          category: exactMatch.category || this.determineCategory(normalizedCode),\n          specialty: this.determineSpecialty(normalizedCode)\n        };\n\n        this.setValidationCache(cacheKey, validationResult);\n        return validationResult;\n      } else {\n        const result: Icd10ValidationResult = { isValid: false };\n        this.setValidationCache(cacheKey, result);\n        return result;\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new Error('ICD-10 validation request timed out');\n      }\n      \n      // Try fallback validation\n      console.warn(`ICD-10 validation API error, using fallback for: ${normalizedCode}`, error);\n      const fallbackResult = this.getFallbackValidationResult(normalizedCode);\n      this.setValidationCache(cacheKey, fallbackResult);\n      return fallbackResult;\n    }\n  }\n\n  /**\n   * Clear all cached data\n   */\n  public clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Get cache statistics for monitoring\n   */\n  public getCacheStats(): { size: number; hitRate?: number } {\n    return {\n      size: this.cache.size\n    };\n  }\n\n  private parseSearchResponse(data: Icd10ApiResponse): Icd10SearchResult[] {\n    if (!data || !Array.isArray(data[3])) {\n      return [];\n    }\n\n    return data[3].map(item => ({\n      code: item[0] || '',\n      description: item[1] || '',\n      category: this.determineCategory(item[0] || '')\n    })).filter(result => result.code && result.description);\n  }\n\n  private determineCategory(code: string): string {\n    if (!code) return 'Unknown';\n\n    const firstChar = code.charAt(0).toUpperCase();\n    \n    // ICD-10 category mapping based on first character\n    const categoryMap: { [key: string]: string } = {\n      'A': 'Infectious and Parasitic Diseases',\n      'B': 'Infectious and Parasitic Diseases', \n      'C': 'Neoplasms',\n      'D': 'Neoplasms',\n      'E': 'Endocrine, Nutritional and Metabolic Diseases',\n      'F': 'Mental, Behavioral and Neurodevelopmental Disorders',\n      'G': 'Diseases of the Nervous System',\n      'H': 'Diseases of the Eye and Ear',\n      'I': 'Diseases of the Circulatory System',\n      'J': 'Diseases of the Respiratory System',\n      'K': 'Diseases of the Digestive System',\n      'L': 'Diseases of the Skin and Subcutaneous Tissue',\n      'M': 'Diseases of the Musculoskeletal System',\n      'N': 'Diseases of the Genitourinary System',\n      'O': 'Pregnancy, Childbirth and the Puerperium',\n      'P': 'Certain Conditions Originating in the Perinatal Period',\n      'Q': 'Congenital Malformations',\n      'R': 'Symptoms, Signs and Abnormal Clinical Findings',\n      'S': 'Injury, Poisoning and External Causes',\n      'T': 'Injury, Poisoning and External Causes',\n      'V': 'External Causes of Morbidity',\n      'W': 'External Causes of Morbidity',\n      'X': 'External Causes of Morbidity',\n      'Y': 'External Causes of Morbidity',\n      'Z': 'Factors Influencing Health Status'\n    };\n\n    return categoryMap[firstChar] || 'Unknown';\n  }\n\n  private determineSpecialty(code: string): string {\n    if (!code) return 'Unknown';\n\n    const upperCode = code.toUpperCase();\n    \n    // Enhanced specialty mapping with specific code ranges for better accuracy\n    const enhancedSpecialtyMapping = this.getEnhancedSpecialtyMapping();\n    \n    // Try specific code mapping first\n    for (const mapping of enhancedSpecialtyMapping.specificCodes) {\n      if (upperCode.startsWith(mapping.codePrefix) || mapping.codes.includes(upperCode)) {\n        return mapping.specialty;\n      }\n    }\n    \n    // Try code range mapping\n    for (const mapping of enhancedSpecialtyMapping.codeRanges) {\n      if (this.isCodeInRange(upperCode, mapping.startCode, mapping.endCode)) {\n        return mapping.specialty;\n      }\n    }\n    \n    // Fall back to basic first character mapping\n    const firstChar = upperCode.charAt(0);\n    const basicSpecialtyMap: { [key: string]: string } = {\n      'A': 'Infectious Disease',\n      'B': 'Infectious Disease',\n      'C': 'Oncology',\n      'D': 'Hematology', // More specific for D codes\n      'E': 'Endocrinology',\n      'F': 'Psychiatry',\n      'G': 'Neurology',\n      'H': 'Ophthalmology', // H00-H59 are eye, H60-H95 are ear\n      'I': 'Cardiology',\n      'J': 'Pulmonology',\n      'K': 'Gastroenterology',\n      'L': 'Dermatology',\n      'M': 'Rheumatology', // More specific for musculoskeletal\n      'N': 'Nephrology', // N00-N39 are kidney, N40-N99 are genitourinary\n      'O': 'Obstetrics and Gynecology',\n      'P': 'Neonatology', // More specific for perinatal\n      'Q': 'Medical Genetics',\n      'R': 'Internal Medicine',\n      'S': 'Trauma Surgery',\n      'T': 'Emergency Medicine',\n      'V': 'Emergency Medicine',\n      'W': 'Emergency Medicine',\n      'X': 'Emergency Medicine',\n      'Y': 'Emergency Medicine',\n      'Z': 'Family Medicine' // More appropriate for health status factors\n    };\n\n    return basicSpecialtyMap[firstChar] || 'Internal Medicine';\n  }\n\n  /**\n   * Enhanced specialty mapping with specific code ranges and conditions\n   */\n  private getEnhancedSpecialtyMapping() {\n    return {\n      specificCodes: [\n        // Cardiology - more specific mappings\n        { codePrefix: 'I20', specialty: 'Cardiology', codes: [] }, // Angina pectoris\n        { codePrefix: 'I21', specialty: 'Cardiology', codes: [] }, // Acute myocardial infarction\n        { codePrefix: 'I25', specialty: 'Cardiology', codes: [] }, // Chronic ischemic heart disease\n        { codePrefix: 'I35', specialty: 'Cardiothoracic Surgery', codes: [] }, // Aortic valve disorders\n        { codePrefix: 'I42', specialty: 'Cardiology', codes: [] }, // Cardiomyopathy\n        { codePrefix: 'I48', specialty: 'Electrophysiology', codes: [] }, // Atrial fibrillation\n        { codePrefix: 'I50', specialty: 'Cardiology', codes: [] }, // Heart failure\n        \n        // Endocrinology - specific conditions\n        { codePrefix: 'E10', specialty: 'Endocrinology', codes: [] }, // Type 1 diabetes\n        { codePrefix: 'E11', specialty: 'Endocrinology', codes: [] }, // Type 2 diabetes\n        { codePrefix: 'E05', specialty: 'Endocrinology', codes: [] }, // Hyperthyroidism\n        { codePrefix: 'E06', specialty: 'Endocrinology', codes: [] }, // Thyroiditis\n        { codePrefix: 'E27', specialty: 'Endocrinology', codes: [] }, // Adrenal disorders\n        \n        // Nephrology - kidney specific\n        { codePrefix: 'N17', specialty: 'Nephrology', codes: [] }, // Acute kidney failure\n        { codePrefix: 'N18', specialty: 'Nephrology', codes: [] }, // Chronic kidney disease\n        { codePrefix: 'N00', specialty: 'Nephrology', codes: [] }, // Glomerular diseases\n        { codePrefix: 'N04', specialty: 'Nephrology', codes: [] }, // Nephrotic syndrome\n        \n        // Urology - genitourinary\n        { codePrefix: 'N40', specialty: 'Urology', codes: [] }, // Benign prostatic hyperplasia\n        { codePrefix: 'N20', specialty: 'Urology', codes: [] }, // Calculus of kidney and ureter\n        { codePrefix: 'N39', specialty: 'Urology', codes: [] }, // Urinary tract disorders\n        \n        // Pulmonology - respiratory specific\n        { codePrefix: 'J44', specialty: 'Pulmonology', codes: [] }, // COPD\n        { codePrefix: 'J45', specialty: 'Pulmonology', codes: [] }, // Asthma\n        { codePrefix: 'J18', specialty: 'Pulmonology', codes: [] }, // Pneumonia\n        { codePrefix: 'J84', specialty: 'Pulmonology', codes: [] }, // Interstitial lung diseases\n        \n        // Gastroenterology - specific conditions\n        { codePrefix: 'K25', specialty: 'Gastroenterology', codes: [] }, // Gastric ulcer\n        { codePrefix: 'K50', specialty: 'Gastroenterology', codes: [] }, // Crohn's disease\n        { codePrefix: 'K51', specialty: 'Gastroenterology', codes: [] }, // Ulcerative colitis\n        { codePrefix: 'K70', specialty: 'Hepatology', codes: [] }, // Alcoholic liver disease\n        { codePrefix: 'K72', specialty: 'Hepatology', codes: [] }, // Hepatic failure\n        { codePrefix: 'K76', specialty: 'Hepatology', codes: [] }, // Other diseases of liver\n        \n        // Neurology - specific conditions\n        { codePrefix: 'G40', specialty: 'Epileptology', codes: [] }, // Epilepsy\n        { codePrefix: 'G35', specialty: 'Multiple Sclerosis', codes: [] }, // Multiple sclerosis\n        { codePrefix: 'G20', specialty: 'Movement Disorders', codes: [] }, // Parkinson's disease\n        { codePrefix: 'G93', specialty: 'Neurology', codes: [] }, // Other disorders of brain\n        \n        // Oncology - cancer specific\n        { codePrefix: 'C78', specialty: 'Medical Oncology', codes: [] }, // Secondary malignant neoplasm\n        { codePrefix: 'C80', specialty: 'Medical Oncology', codes: [] }, // Malignant neoplasm, unspecified\n        \n        // Hematology - blood disorders\n        { codePrefix: 'D50', specialty: 'Hematology', codes: [] }, // Iron deficiency anemia\n        { codePrefix: 'D64', specialty: 'Hematology', codes: [] }, // Other anemias\n        { codePrefix: 'D65', specialty: 'Hematology', codes: [] }, // Disseminated intravascular coagulation\n        { codePrefix: 'D68', specialty: 'Hematology', codes: [] }, // Other coagulation defects\n        { codePrefix: 'D69', specialty: 'Hematology', codes: [] }, // Purpura and other hemorrhagic conditions\n        \n        // Rheumatology - autoimmune and joint diseases\n        { codePrefix: 'M05', specialty: 'Rheumatology', codes: [] }, // Rheumatoid arthritis\n        { codePrefix: 'M32', specialty: 'Rheumatology', codes: [] }, // Systemic lupus erythematosus\n        { codePrefix: 'M79', specialty: 'Rheumatology', codes: [] }, // Other soft tissue disorders\n        \n        // Orthopedics - bone and joint specific\n        { codePrefix: 'M84', specialty: 'Orthopedic Surgery', codes: [] }, // Disorders of continuity of bone\n        { codePrefix: 'S72', specialty: 'Orthopedic Surgery', codes: [] }, // Fracture of femur\n        \n        // ENT - ear, nose, throat\n        { codePrefix: 'H60', specialty: 'Otolaryngology', codes: [] }, // Otitis externa\n        { codePrefix: 'H65', specialty: 'Otolaryngology', codes: [] }, // Nonsuppurative otitis media\n        { codePrefix: 'H66', specialty: 'Otolaryngology', codes: [] }, // Suppurative otitis media\n        { codePrefix: 'J30', specialty: 'Otolaryngology', codes: [] }, // Vasomotor and allergic rhinitis\n        \n        // Pain Management - chronic pain conditions\n        { codePrefix: 'M54', specialty: 'Pain Management', codes: [] }, // Dorsalgia (back pain)\n        { codePrefix: 'G89', specialty: 'Pain Management', codes: [] }, // Pain, not elsewhere classified\n        \n        // Emergency Medicine - trauma and acute conditions\n        { codePrefix: 'R57', specialty: 'Critical Care Medicine', codes: [] }, // Shock\n        { codePrefix: 'R50', specialty: 'Emergency Medicine', codes: [] }, // Fever\n        { codePrefix: 'T78', specialty: 'Allergy and Immunology', codes: [] }, // Adverse effects\n        \n        // Psychiatry - mental health specific\n        { codePrefix: 'F20', specialty: 'Psychiatry', codes: [] }, // Schizophrenia\n        { codePrefix: 'F31', specialty: 'Psychiatry', codes: [] }, // Bipolar disorder\n        { codePrefix: 'F32', specialty: 'Psychiatry', codes: [] }, // Major depressive disorder\n        { codePrefix: 'F41', specialty: 'Psychiatry', codes: [] }, // Other anxiety disorders\n        { codePrefix: 'F90', specialty: 'Child Psychiatry', codes: [] } // ADHD\n      ],\n      \n      codeRanges: [\n        // Ophthalmology\n        { startCode: 'H00', endCode: 'H59', specialty: 'Ophthalmology' },\n        \n        // Otolaryngology\n        { startCode: 'H60', endCode: 'H95', specialty: 'Otolaryngology' },\n        \n        // Obstetrics (pregnancy related)\n        { startCode: 'O00', endCode: 'O9A', specialty: 'Obstetrics and Gynecology' },\n        \n        // Pediatrics - perinatal conditions\n        { startCode: 'P00', endCode: 'P96', specialty: 'Neonatology' },\n        \n        // Congenital malformations\n        { startCode: 'Q00', endCode: 'Q99', specialty: 'Medical Genetics' },\n        \n        // Mental health in children\n        { startCode: 'F90', endCode: 'F98', specialty: 'Child Psychiatry' }\n      ]\n    };\n  }\n\n  /**\n   * Check if a code falls within a specific range\n   */\n  private isCodeInRange(code: string, startCode: string, endCode: string): boolean {\n    // Simple alphabetical comparison for ICD-10 codes\n    return code >= startCode && code <= endCode;\n  }\n\n  private getFromCache(key: string): Icd10SearchResult[] | null {\n    const cached = this.cache.get(key);\n    if (!cached) {\n      return null;\n    }\n\n    if (Date.now() > cached.expiresAt) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return cached.data;\n  }\n\n  private getValidationFromCache(key: string): Icd10ValidationResult | null {\n    const cached = this.cache.get(key);\n    if (!cached) {\n      return null;\n    }\n\n    if (Date.now() > cached.expiresAt) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return cached.data as unknown as Icd10ValidationResult;\n  }\n\n  private setCache(key: string, data: Icd10SearchResult[]): void {\n    const cached: CachedIcd10Result = {\n      data,\n      timestamp: Date.now(),\n      expiresAt: Date.now() + this.cacheExpirationMs\n    };\n\n    this.cache.set(key, cached);\n\n    // Clean up expired entries periodically\n    if (this.cache.size > 1000) {\n      this.cleanupExpiredEntries();\n    }\n  }\n\n  private setValidationCache(key: string, data: Icd10ValidationResult): void {\n    const cached = {\n      data: data as unknown as Icd10SearchResult[],\n      timestamp: Date.now(),\n      expiresAt: Date.now() + this.cacheExpirationMs\n    };\n\n    this.cache.set(key, cached);\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = Date.now();\n    Array.from(this.cache.entries()).forEach(([key, value]) => {\n      if (now > value.expiresAt) {\n        this.cache.delete(key);\n      }\n    });\n  }\n\n  private getFallbackSearchResults(term: string, maxResults: number): Icd10SearchResult[] {\n    // Common ICD-10 codes that can be returned as fallback data\n    const fallbackData: Icd10SearchResult[] = [\n      { code: \"E11.9\", description: \"Type 2 diabetes mellitus without complications\", category: \"Endocrine, Nutritional and Metabolic Diseases\" },\n      { code: \"E11.65\", description: \"Type 2 diabetes mellitus with hyperglycemia\", category: \"Endocrine, Nutritional and Metabolic Diseases\" },\n      { code: \"I21.9\", description: \"Acute myocardial infarction, unspecified\", category: \"Diseases of the Circulatory System\" },\n      { code: \"J45.9\", description: \"Asthma, unspecified\", category: \"Diseases of the Respiratory System\" },\n      { code: \"N18.6\", description: \"End stage renal disease\", category: \"Diseases of the Genitourinary System\" },\n      { code: \"K25.9\", description: \"Gastric ulcer, unspecified\", category: \"Diseases of the Digestive System\" },\n      { code: \"F31.2\", description: \"Bipolar disorder, current episode manic\", category: \"Mental, Behavioral and Neurodevelopmental Disorders\" },\n      { code: \"G40.9\", description: \"Epilepsy, unspecified\", category: \"Diseases of the Nervous System\" },\n      { code: \"K50.90\", description: \"Crohn's disease, unspecified, without complications\", category: \"Diseases of the Digestive System\" }\n    ];\n\n    const termLower = term.toLowerCase();\n    \n    // Filter results based on search term\n    const filtered = fallbackData.filter(item => \n      item.description.toLowerCase().includes(termLower) ||\n      item.code.toLowerCase().includes(termLower) ||\n      item.category?.toLowerCase().includes(termLower)\n    );\n\n    return filtered.slice(0, maxResults);\n  }\n\n  private getFallbackValidationResult(code: string): Icd10ValidationResult {\n    // Common ICD-10 codes that can be validated\n    const knownCodes: { [key: string]: { description: string; category: string } } = {\n      \"E11.9\": { description: \"Type 2 diabetes mellitus without complications\", category: \"Endocrine, Nutritional and Metabolic Diseases\" },\n      \"E11.65\": { description: \"Type 2 diabetes mellitus with hyperglycemia\", category: \"Endocrine, Nutritional and Metabolic Diseases\" },\n      \"I21.9\": { description: \"Acute myocardial infarction, unspecified\", category: \"Diseases of the Circulatory System\" },\n      \"J45.9\": { description: \"Asthma, unspecified\", category: \"Diseases of the Respiratory System\" },\n      \"N18.6\": { description: \"End stage renal disease\", category: \"Diseases of the Genitourinary System\" },\n      \"K25.9\": { description: \"Gastric ulcer, unspecified\", category: \"Diseases of the Digestive System\" },\n      \"F31.2\": { description: \"Bipolar disorder, current episode manic\", category: \"Mental, Behavioral and Neurodevelopmental Disorders\" },\n      \"G40.9\": { description: \"Epilepsy, unspecified\", category: \"Diseases of the Nervous System\" },\n      \"K50.90\": { description: \"Crohn's disease, unspecified, without complications\", category: \"Diseases of the Digestive System\" }\n    };\n\n    const known = knownCodes[code];\n    if (known) {\n      return {\n        isValid: true,\n        description: known.description,\n        category: known.category,\n        specialty: this.determineSpecialty(code)\n      };\n    }\n\n    // For unknown codes, try to determine validity based on format\n    const isValidFormat = /^[A-Z]\\d{2}(\\.\\d+)?$/.test(code);\n    if (isValidFormat) {\n      return {\n        isValid: true,\n        description: `ICD-10 code (fallback validation)`,\n        category: this.determineCategory(code),\n        specialty: this.determineSpecialty(code)\n      };\n    }\n\n    return { isValid: false };\n  }\n}\n\nexport const icd10Service = Icd10Service.getInstance();\nexport type { Icd10SearchResult, Icd10ValidationResult };","size_bytes":23398},"server/services/medicationService.ts":{"content":"import { ResilientApiClient } from '../utils/errorHandler';\n\ninterface MedicationSearchResult {\n  brandName: string;\n  genericName: string;\n  activeIngredients: string[];\n  dosageForm?: string;\n  manufacturer?: string;\n  ndc?: string;\n}\n\ninterface MedicationContraindication {\n  condition: string;\n  severity: 'contraindicated' | 'warning' | 'precaution';\n  description: string;\n}\n\ninterface OpenFdaApiResponse {\n  results?: OpenFdaDrugLabel[];\n  error?: {\n    code: string;\n    message: string;\n  };\n}\n\ninterface OpenFdaDrugLabel {\n  openfda?: {\n    brand_name?: string[];\n    generic_name?: string[];\n    substance_name?: string[];\n    manufacturer_name?: string[];\n    product_ndc?: string[];\n    dosage_form?: string[];\n  };\n  contraindications?: string[];\n  warnings?: string[];\n  precautions?: string[];\n  drug_interactions?: string[];\n  active_ingredient?: string[];\n}\n\ninterface CachedMedicationResult {\n  data: MedicationSearchResult[] | MedicationContraindication[];\n  timestamp: number;\n  expiresAt: number;\n}\n\ninterface RateLimitState {\n  requests: number;\n  resetTime: number;\n}\n\ninterface ApiCallRecord {\n  timestamp: number;\n  endpoint: string;\n  success: boolean;\n  errorType?: string;\n  responseTimeMs?: number;\n}\n\ninterface DetailedUsageStats {\n  dailyUsage: number;\n  hourlyUsage: number;\n  minuteUsage: number;\n  lastCall?: number;\n  canMakeCall: boolean;\n  quotaInfo: {\n    dailyLimit: number;\n    hourlyLimit: number;\n    minuteLimit: number;\n    dailyRemaining: number;\n    hourlyRemaining: number;\n    minuteRemaining: number;\n  };\n  recentActivity: ApiCallRecord[];\n  errorRate: number;\n  cacheSize: number;\n}\n\nclass MedicationService {\n  private static instance: MedicationService;\n  private cache = new Map<string, CachedMedicationResult>();\n  private readonly baseUrl = 'https://api.fda.gov/drug/label.json';\n  private readonly cacheExpirationMs = 1000 * 60 * 60 * 12; // 12 hours\n  private readonly requestTimeout = 15000; // 15 seconds\n  private rateLimit: RateLimitState = { requests: 0, resetTime: Date.now() + 3600000 }; // Reset hourly\n  \n  // Comprehensive usage tracking\n  private apiCallHistory: ApiCallRecord[] = [];\n  private readonly maxHistoryRecords = 2000; // Keep recent history for analysis\n  \n  // Configurable FDA API limits (can be updated based on API key presence)\n  private apiLimits = {\n    dailyLimit: 1000,      // Default without API key\n    hourlyLimit: 240,      // 240 requests per hour (4 per second)\n    minuteLimit: 240,      // 240 requests per minute\n  };\n  \n  // Enhanced error handling and resilience\n  private resilientClient: ResilientApiClient;\n\n  private constructor() {\n    this.resilientClient = new ResilientApiClient('FDA_API', this.requestTimeout);\n    \n    // Configure API limits based on API key availability\n    this.configureApiLimitsFromEnvironment();\n  }\n\n  /**\n   * Configure API limits based on environment (API key presence)\n   */\n  private configureApiLimitsFromEnvironment(): void {\n    // Check for FDA API key in environment variables\n    const fdaApiKey = process.env.FDA_API_KEY || process.env.OPENFDA_API_KEY;\n    \n    if (fdaApiKey && fdaApiKey.trim() !== '') {\n      // With API key: much higher limits\n      this.apiLimits = {\n        dailyLimit: 120000,    // 120,000 requests per day with API key\n        hourlyLimit: 5000,     // 5,000 requests per hour with API key\n        minuteLimit: 240,      // Still 240 per minute (4/second burst)\n      };\n      console.log('FDA API: Using enhanced limits (API key detected)');\n    } else {\n      // Without API key: default limits\n      this.apiLimits = {\n        dailyLimit: 1000,      // 1,000 requests per day without API key\n        hourlyLimit: 240,      // 240 requests per hour without API key\n        minuteLimit: 240,      // 240 requests per minute (4/second)\n      };\n      console.log('FDA API: Using standard limits (no API key)');\n    }\n  }\n\n  /**\n   * Get API configuration information\n   */\n  public getApiConfig(): { hasApiKey: boolean; limits: { dailyLimit: number; hourlyLimit: number; minuteLimit: number } } {\n    const fdaApiKey = process.env.FDA_API_KEY || process.env.OPENFDA_API_KEY;\n    return {\n      hasApiKey: !!(fdaApiKey && fdaApiKey.trim() !== ''),\n      limits: { ...this.apiLimits }\n    };\n  }\n\n  public static getInstance(): MedicationService {\n    if (!MedicationService.instance) {\n      MedicationService.instance = new MedicationService();\n    }\n    return MedicationService.instance;\n  }\n\n  /**\n   * Search for medications by name\n   * @param name - The medication name to search for\n   * @param maxResults - Maximum number of results to return (default: 10)\n   * @returns Promise<MedicationSearchResult[]>\n   */\n  public async searchMedication(name: string, maxResults: number = 10): Promise<MedicationSearchResult[]> {\n    if (!name || name.trim().length === 0) {\n      throw new Error('Medication name cannot be empty');\n    }\n\n    const normalizedName = name.trim().toLowerCase();\n    const cacheKey = `search:${normalizedName}:${maxResults}`;\n\n    // Check cache first\n    const cachedResult = this.getFromCache(cacheKey) as MedicationSearchResult[] | null;\n    if (cachedResult) {\n      return cachedResult.slice(0, maxResults);\n    }\n\n    await this.checkRateLimit();\n\n    try {\n      // Search by brand name and generic name\n      const searchQueries = [\n        `openfda.brand_name:\"${name}\"`,\n        `openfda.generic_name:\"${name}\"`,\n        `openfda.substance_name:\"${name}\"`\n      ];\n\n      const searchQuery = searchQueries.join(' OR ');\n      const searchParams = new URLSearchParams({\n        search: searchQuery,\n        limit: Math.min(maxResults * 2, 100).toString() // Get more results to filter later\n      });\n\n      const url = `${this.baseUrl}?${searchParams.toString()}`;\n      \n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.requestTimeout);\n      const startTime = Date.now();\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Medical-Compatibility-System/1.0'\n        },\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n      const responseTime = Date.now() - startTime;\n      \n      this.incrementRateLimit();\n      this.recordApiCall('search', response.ok, responseTime);\n\n      if (!response.ok) {\n        this.recordApiCall('search', false, responseTime, `HTTP_${response.status}`);\n        throw new Error(`OpenFDA API request failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data: OpenFdaApiResponse = await response.json();\n      \n      if (data.error) {\n        this.recordApiCall('search', false, responseTime, `FDA_ERROR`);\n        throw new Error(`OpenFDA API error: ${data.error.message}`);\n      }\n\n      const results = this.parseSearchResponse(data, name);\n\n      // Cache the results\n      this.setCache(cacheKey, results);\n\n      return results.slice(0, maxResults);\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        this.recordApiCall('search', false, undefined, 'TIMEOUT');\n        throw new Error('Medication search request timed out');\n      }\n      if (!(error instanceof Error) || !error.toString().includes('OpenFDA API')) {\n        this.recordApiCall('search', false, undefined, 'NETWORK_ERROR');\n      }\n      throw new Error(`Failed to search medications: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get contraindications for a specific medication\n   * @param name - The medication name\n   * @returns Promise<MedicationContraindication[]>\n   */\n  public async getMedicationContraindications(name: string): Promise<MedicationContraindication[]> {\n    if (!name || name.trim().length === 0) {\n      throw new Error('Medication name cannot be empty');\n    }\n\n    const normalizedName = name.trim().toLowerCase();\n    const cacheKey = `contraindications:${normalizedName}`;\n\n    // Check cache first\n    const cachedResult = this.getFromCache(cacheKey) as MedicationContraindication[] | null;\n    if (cachedResult) {\n      return cachedResult;\n    }\n\n    await this.checkRateLimit();\n\n    try {\n      // Search for the specific medication\n      const searchQuery = `openfda.brand_name:\"${name}\" OR openfda.generic_name:\"${name}\" OR openfda.substance_name:\"${name}\"`;\n      const searchParams = new URLSearchParams({\n        search: searchQuery,\n        limit: '5' // We only need a few results to get contraindications\n      });\n\n      const url = `${this.baseUrl}?${searchParams.toString()}`;\n      \n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), this.requestTimeout);\n      const startTime = Date.now();\n\n      const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Medical-Compatibility-System/1.0'\n        },\n        signal: controller.signal\n      });\n\n      clearTimeout(timeoutId);\n      const responseTime = Date.now() - startTime;\n      \n      this.incrementRateLimit();\n      this.recordApiCall('search', response.ok, responseTime);\n\n      if (!response.ok) {\n        this.recordApiCall('search', false, responseTime, `HTTP_${response.status}`);\n        throw new Error(`OpenFDA API request failed: ${response.status} ${response.statusText}`);\n      }\n\n      const data: OpenFdaApiResponse = await response.json();\n      \n      if (data.error) {\n        this.recordApiCall('search', false, responseTime, `FDA_ERROR`);\n        throw new Error(`OpenFDA API error: ${data.error.message}`);\n      }\n\n      const contraindications = this.parseContraindications(data);\n\n      // Cache the results\n      this.setCache(cacheKey, contraindications);\n\n      return contraindications;\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        throw new Error('Medication contraindications request timed out');\n      }\n      throw new Error(`Failed to get medication contraindications: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get active ingredients for a medication\n   * @param name - The medication name\n   * @returns Promise<string[]>\n   */\n  public async getActiveIngredients(name: string): Promise<string[]> {\n    try {\n      const medications = await this.searchMedication(name, 1);\n      if (medications.length > 0) {\n        return medications[0].activeIngredients;\n      }\n      return [];\n    } catch (error) {\n      console.warn(`Failed to get active ingredients for ${name}:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Check if two medications have potential interactions\n   * @param medication1 - First medication name\n   * @param medication2 - Second medication name\n   * @returns Promise<boolean>\n   */\n  public async checkDrugInteraction(medication1: string, medication2: string): Promise<boolean> {\n    try {\n      const contraindications1 = await this.getMedicationContraindications(medication1);\n      const contraindications2 = await this.getMedicationContraindications(medication2);\n      \n      // Simple check - in a real system this would be more sophisticated\n      const med1Lower = medication1.toLowerCase();\n      const med2Lower = medication2.toLowerCase();\n      \n      const hasInteraction1 = contraindications1.some(c => \n        c.description.toLowerCase().includes(med2Lower)\n      );\n      \n      const hasInteraction2 = contraindications2.some(c => \n        c.description.toLowerCase().includes(med1Lower)\n      );\n      \n      return hasInteraction1 || hasInteraction2;\n    } catch (error) {\n      console.warn(`Failed to check drug interaction between ${medication1} and ${medication2}:`, error);\n      return false;\n    }\n  }\n\n  /**\n   * Clear all cached data\n   */\n  public clearCache(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Configure API limits (e.g., when API key is detected)\n   */\n  public configureApiLimits(limits: { dailyLimit?: number; hourlyLimit?: number; minuteLimit?: number }): void {\n    if (limits.dailyLimit) this.apiLimits.dailyLimit = limits.dailyLimit;\n    if (limits.hourlyLimit) this.apiLimits.hourlyLimit = limits.hourlyLimit;\n    if (limits.minuteLimit) this.apiLimits.minuteLimit = limits.minuteLimit;\n  }\n\n  /**\n   * Record an API call for comprehensive tracking\n   */\n  private recordApiCall(endpoint: string, success: boolean, responseTimeMs?: number, errorType?: string): void {\n    const record: ApiCallRecord = {\n      timestamp: Date.now(),\n      endpoint,\n      success,\n      responseTimeMs,\n      errorType\n    };\n\n    this.apiCallHistory.push(record);\n\n    // Keep only recent records to manage memory\n    if (this.apiCallHistory.length > this.maxHistoryRecords) {\n      // Remove older half of records\n      this.apiCallHistory = this.apiCallHistory.slice(-Math.floor(this.maxHistoryRecords / 2));\n    }\n  }\n\n  /**\n   * Get comprehensive usage statistics for monitoring and status reporting\n   */\n  public getDetailedStats(): DetailedUsageStats {\n    const now = Date.now();\n    \n    // Calculate time boundaries\n    const dayStart = new Date().setHours(0, 0, 0, 0);\n    const hourStart = now - (60 * 60 * 1000);\n    const minuteStart = now - (60 * 1000);\n\n    // Filter successful calls for usage counting\n    const successfulCalls = this.apiCallHistory.filter(r => r.success);\n    \n    // Count usage in different time windows\n    const dailyUsage = successfulCalls.filter(r => r.timestamp >= dayStart).length;\n    const hourlyUsage = successfulCalls.filter(r => r.timestamp >= hourStart).length;\n    const minuteUsage = successfulCalls.filter(r => r.timestamp >= minuteStart).length;\n\n    // Find last call timestamp\n    const lastCall = this.apiCallHistory.length > 0 \n      ? Math.max(...this.apiCallHistory.map(r => r.timestamp)) \n      : undefined;\n\n    // Calculate remaining quotas\n    const dailyRemaining = Math.max(0, this.apiLimits.dailyLimit - dailyUsage);\n    const hourlyRemaining = Math.max(0, this.apiLimits.hourlyLimit - hourlyUsage);\n    const minuteRemaining = Math.max(0, this.apiLimits.minuteLimit - minuteUsage);\n\n    // Check if we can make a call\n    const canMakeCall = dailyRemaining > 0 && hourlyRemaining > 0 && minuteRemaining > 0;\n\n    // Calculate error rate for last 24 hours\n    const recentCalls = this.apiCallHistory.filter(r => r.timestamp >= (now - 24 * 60 * 60 * 1000));\n    const errorRate = recentCalls.length > 0 \n      ? (recentCalls.filter(r => !r.success).length / recentCalls.length) * 100 \n      : 0;\n\n    return {\n      dailyUsage,\n      hourlyUsage,\n      minuteUsage,\n      lastCall,\n      canMakeCall,\n      quotaInfo: {\n        dailyLimit: this.apiLimits.dailyLimit,\n        hourlyLimit: this.apiLimits.hourlyLimit,\n        minuteLimit: this.apiLimits.minuteLimit,\n        dailyRemaining,\n        hourlyRemaining,\n        minuteRemaining\n      },\n      recentActivity: this.apiCallHistory.slice(-20), // Last 20 calls\n      errorRate: Math.round(errorRate * 10) / 10, // Round to 1 decimal\n      cacheSize: this.cache.size\n    };\n  }\n\n  /**\n   * Get cache and rate limit statistics for monitoring (backward compatibility)\n   */\n  public getStats(): { cacheSize: number; requestsThisHour: number; rateLimitReset: number } {\n    const detailed = this.getDetailedStats();\n    return {\n      cacheSize: detailed.cacheSize,\n      requestsThisHour: detailed.hourlyUsage,\n      rateLimitReset: this.rateLimit.resetTime\n    };\n  }\n\n  private parseSearchResponse(data: OpenFdaApiResponse, searchTerm: string): MedicationSearchResult[] {\n    if (!data.results || !Array.isArray(data.results)) {\n      return [];\n    }\n\n    const results: MedicationSearchResult[] = [];\n    const seenCombinations = new Set<string>();\n\n    for (const item of data.results) {\n      if (!item.openfda) continue;\n\n      const brandNames = item.openfda.brand_name || [];\n      const genericNames = item.openfda.generic_name || [];\n      const activeIngredients = item.openfda.substance_name || item.active_ingredient || [];\n      const dosageForms = item.openfda.dosage_form || [];\n      const manufacturers = item.openfda.manufacturer_name || [];\n      const ndcs = item.openfda.product_ndc || [];\n\n      // Create combinations of brand/generic names\n      const allNames = [...brandNames, ...genericNames];\n      \n      for (const name of allNames) {\n        if (!name) continue;\n\n        const key = `${name}-${activeIngredients.join(',')}-${dosageForms.join(',')}`;\n        if (seenCombinations.has(key)) continue;\n        seenCombinations.add(key);\n\n        const result: MedicationSearchResult = {\n          brandName: brandNames[0] || name,\n          genericName: genericNames[0] || name,\n          activeIngredients: activeIngredients,\n          dosageForm: dosageForms[0],\n          manufacturer: manufacturers[0],\n          ndc: ndcs[0]\n        };\n\n        results.push(result);\n\n        if (results.length >= 20) break; // Limit results\n      }\n\n      if (results.length >= 20) break;\n    }\n\n    // Sort by relevance to search term\n    return results.sort((a, b) => {\n      const aScore = this.calculateRelevanceScore(a, searchTerm);\n      const bScore = this.calculateRelevanceScore(b, searchTerm);\n      return bScore - aScore;\n    });\n  }\n\n  private calculateRelevanceScore(medication: MedicationSearchResult, searchTerm: string): number {\n    const term = searchTerm.toLowerCase();\n    let score = 0;\n\n    if (medication.brandName.toLowerCase() === term) score += 100;\n    else if (medication.brandName.toLowerCase().includes(term)) score += 50;\n\n    if (medication.genericName.toLowerCase() === term) score += 90;\n    else if (medication.genericName.toLowerCase().includes(term)) score += 40;\n\n    for (const ingredient of medication.activeIngredients) {\n      if (ingredient.toLowerCase() === term) score += 80;\n      else if (ingredient.toLowerCase().includes(term)) score += 30;\n    }\n\n    return score;\n  }\n\n  private parseContraindications(data: OpenFdaApiResponse): MedicationContraindication[] {\n    if (!data.results || !Array.isArray(data.results)) {\n      return [];\n    }\n\n    const contraindications: MedicationContraindication[] = [];\n    const seen = new Set<string>();\n\n    for (const item of data.results) {\n      // Parse contraindications\n      if (item.contraindications) {\n        for (const contraindication of item.contraindications) {\n          const conditions = this.extractConditions(contraindication, 'contraindicated');\n          for (const condition of conditions) {\n            const key = `contraindicated:${condition.condition}`;\n            if (!seen.has(key)) {\n              seen.add(key);\n              contraindications.push(condition);\n            }\n          }\n        }\n      }\n\n      // Parse warnings\n      if (item.warnings) {\n        for (const warning of item.warnings) {\n          const conditions = this.extractConditions(warning, 'warning');\n          for (const condition of conditions) {\n            const key = `warning:${condition.condition}`;\n            if (!seen.has(key)) {\n              seen.add(key);\n              contraindications.push(condition);\n            }\n          }\n        }\n      }\n\n      // Parse precautions\n      if (item.precautions) {\n        for (const precaution of item.precautions) {\n          const conditions = this.extractConditions(precaution, 'precaution');\n          for (const condition of conditions) {\n            const key = `precaution:${condition.condition}`;\n            if (!seen.has(key)) {\n              seen.add(key);\n              contraindications.push(condition);\n            }\n          }\n        }\n      }\n    }\n\n    return contraindications.slice(0, 50); // Limit results\n  }\n\n  private extractConditions(text: string, severity: 'contraindicated' | 'warning' | 'precaution'): MedicationContraindication[] {\n    if (!text || typeof text !== 'string') return [];\n\n    const conditions: MedicationContraindication[] = [];\n    \n    // Common medical condition patterns\n    const conditionPatterns = [\n      /\\b(?:patients with|history of|known|diagnosed with|suffering from)\\s+([^.;,]+)/gi,\n      /\\b(?:in|for)\\s+(pregnant|nursing|elderly|pediatric|geriatric)\\s+patients/gi,\n      /\\b(?:renal|kidney|liver|hepatic|cardiac|heart|respiratory|pulmonary)\\s+(?:impairment|disease|failure|dysfunction)/gi,\n      /\\b(?:diabetes|hypertension|asthma|epilepsy|depression|anxiety|bipolar)\\b/gi,\n      /\\b(?:allergy|allergic reaction|hypersensitivity)\\s+to\\s+([^.;,]+)/gi\n    ];\n\n    for (const pattern of conditionPatterns) {\n      let match;\n      while ((match = pattern.exec(text)) !== null) {\n        const condition = match[1] ? match[1].trim() : match[0].trim();\n        if (condition.length > 3 && condition.length < 100) {\n          conditions.push({\n            condition: this.cleanConditionText(condition),\n            severity,\n            description: text.substring(0, 200) + (text.length > 200 ? '...' : '')\n          });\n        }\n      }\n    }\n\n    // If no specific conditions found, create a general one\n    if (conditions.length === 0 && text.length > 10) {\n      conditions.push({\n        condition: 'General contraindication',\n        severity,\n        description: text.substring(0, 200) + (text.length > 200 ? '...' : '')\n      });\n    }\n\n    return conditions;\n  }\n\n  private cleanConditionText(text: string): string {\n    return text\n      .replace(/\\s+/g, ' ')\n      .replace(/[^\\w\\s-]/g, '')\n      .trim()\n      .toLowerCase()\n      .split(' ')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  }\n\n  private async checkRateLimit(): Promise<void> {\n    const now = Date.now();\n    \n    // Reset counter if an hour has passed\n    if (now >= this.rateLimit.resetTime) {\n      this.rateLimit.requests = 0;\n      this.rateLimit.resetTime = now + 3600000; // Next hour\n    }\n\n    // Check if we're at the limit\n    if (this.rateLimit.requests >= this.apiLimits.hourlyLimit) {\n      const waitTime = this.rateLimit.resetTime - now;\n      throw new Error(`Rate limit exceeded. Please wait ${Math.ceil(waitTime / 60000)} minutes before making more requests.`);\n    }\n  }\n\n  private incrementRateLimit(): void {\n    this.rateLimit.requests++;\n  }\n\n  private getFromCache(key: string): MedicationSearchResult[] | MedicationContraindication[] | null {\n    const cached = this.cache.get(key);\n    if (!cached) {\n      return null;\n    }\n\n    if (Date.now() > cached.expiresAt) {\n      this.cache.delete(key);\n      return null;\n    }\n\n    return cached.data;\n  }\n\n  private setCache(key: string, data: MedicationSearchResult[] | MedicationContraindication[]): void {\n    const cached: CachedMedicationResult = {\n      data,\n      timestamp: Date.now(),\n      expiresAt: Date.now() + this.cacheExpirationMs\n    };\n\n    this.cache.set(key, cached);\n\n    // Clean up expired entries periodically\n    if (this.cache.size > 500) {\n      this.cleanupExpiredEntries();\n    }\n  }\n\n  private cleanupExpiredEntries(): void {\n    const now = Date.now();\n    Array.from(this.cache.entries()).forEach(([key, value]) => {\n      if (now > value.expiresAt) {\n        this.cache.delete(key);\n      }\n    });\n  }\n}\n\nexport const medicationService = MedicationService.getInstance();\nexport type { MedicationSearchResult, MedicationContraindication };","size_bytes":23365},"server/services/test-services.ts":{"content":"import { icd10Service, type Icd10SearchResult, type Icd10ValidationResult } from './icd10Service';\nimport { medicationService, type MedicationSearchResult, type MedicationContraindication } from './medicationService';\n\nasync function testIcd10Service() {\n  console.log('🧪 Testing ICD-10 Service...');\n  \n  try {\n    // Test search functionality\n    console.log('  Testing ICD-10 search...');\n    const searchResults = await icd10Service.searchIcd10Code('diabetes', 5);\n    console.log(`  ✅ Found ${searchResults.length} results for 'diabetes'`);\n    if (searchResults.length > 0) {\n      console.log(`     First result: ${searchResults[0].code} - ${searchResults[0].description}`);\n    }\n\n    // Test validation functionality\n    console.log('  Testing ICD-10 validation...');\n    const validationResult = await icd10Service.validateIcd10Code('E11.9');\n    console.log(`  ✅ E11.9 validation result: ${validationResult.isValid ? 'Valid' : 'Invalid'}`);\n    if (validationResult.isValid) {\n      console.log(`     Description: ${validationResult.description}`);\n      console.log(`     Category: ${validationResult.category}`);\n      console.log(`     Specialty: ${validationResult.specialty}`);\n    }\n\n    // Test invalid code\n    console.log('  Testing invalid ICD-10 code...');\n    const invalidResult = await icd10Service.validateIcd10Code('INVALID123');\n    console.log(`  ✅ Invalid code validation: ${invalidResult.isValid ? 'Valid' : 'Invalid (as expected)'}`);\n\n    // Test cache stats\n    const cacheStats = icd10Service.getCacheStats();\n    console.log(`  📊 Cache size: ${cacheStats.size} entries`);\n\n  } catch (error) {\n    console.error('  ❌ ICD-10 Service test failed:', error instanceof Error ? error.message : error);\n  }\n}\n\nasync function testMedicationService() {\n  console.log('\\n💊 Testing Medication Service...');\n  \n  try {\n    // Test medication search\n    console.log('  Testing medication search...');\n    const searchResults = await medicationService.searchMedication('aspirin', 3);\n    console.log(`  ✅ Found ${searchResults.length} results for 'aspirin'`);\n    if (searchResults.length > 0) {\n      const first = searchResults[0];\n      console.log(`     First result: ${first.brandName} (${first.genericName})`);\n      console.log(`     Active ingredients: ${first.activeIngredients.join(', ')}`);\n    }\n\n    // Test contraindications\n    console.log('  Testing contraindications lookup...');\n    const contraindications = await medicationService.getMedicationContraindications('aspirin');\n    console.log(`  ✅ Found ${contraindications.length} contraindications for aspirin`);\n    if (contraindications.length > 0) {\n      const first = contraindications[0];\n      console.log(`     First contraindication: ${first.condition} (${first.severity})`);\n    }\n\n    // Test active ingredients\n    console.log('  Testing active ingredients lookup...');\n    const activeIngredients = await medicationService.getActiveIngredients('metformin');\n    console.log(`  ✅ Active ingredients for metformin: ${activeIngredients.join(', ')}`);\n\n    // Test rate limit and cache stats\n    const stats = medicationService.getStats();\n    console.log(`  📊 Cache size: ${stats.cacheSize} entries`);\n    console.log(`  📊 API requests this hour: ${stats.requestsThisHour}`);\n\n  } catch (error) {\n    console.error('  ❌ Medication Service test failed:', error instanceof Error ? error.message : error);\n  }\n}\n\nasync function testErrorHandling() {\n  console.log('\\n⚠️  Testing Error Handling...');\n  \n  try {\n    // Test empty search terms\n    console.log('  Testing empty search term...');\n    try {\n      await icd10Service.searchIcd10Code('');\n      console.log('  ❌ Should have thrown error for empty search term');\n    } catch (error) {\n      console.log('  ✅ Correctly caught empty search term error');\n    }\n\n    // Test empty medication name\n    console.log('  Testing empty medication name...');\n    try {\n      await medicationService.searchMedication('');\n      console.log('  ❌ Should have thrown error for empty medication name');\n    } catch (error) {\n      console.log('  ✅ Correctly caught empty medication name error');\n    }\n\n    console.log('  ✅ Error handling tests completed');\n\n  } catch (error) {\n    console.error('  ❌ Error handling test failed:', error instanceof Error ? error.message : error);\n  }\n}\n\nasync function runAllTests() {\n  console.log('🚀 Starting API Service Tests...\\n');\n  \n  try {\n    await testIcd10Service();\n    await testMedicationService();\n    await testErrorHandling();\n    \n    console.log('\\n✨ All tests completed successfully!');\n    console.log('\\n📋 Summary:');\n    console.log('   - ICD-10 Service: ✅ Working');\n    console.log('   - Medication Service: ✅ Working');\n    console.log('   - Error Handling: ✅ Working');\n    \n  } catch (error) {\n    console.error('\\n💥 Test suite failed:', error instanceof Error ? error.message : error);\n  }\n}\n\nexport { runAllTests, testIcd10Service, testMedicationService, testErrorHandling };\n\n// Run tests when this file is executed directly\nrunAllTests();","size_bytes":5108},"server/utils/errorHandler.ts":{"content":"// Comprehensive Error Handling and Circuit Breaker Utility\nimport { randomUUID } from 'crypto';\n\nexport interface ApiError {\n  id: string;\n  service: string;\n  operation: string;\n  error: Error;\n  timestamp: number;\n  retryCount: number;\n  isRecoverable: boolean;\n}\n\nexport interface CircuitBreakerState {\n  state: 'closed' | 'open' | 'half-open';\n  failures: number;\n  lastFailureTime: number;\n  successCount: number;\n  threshold: number;\n  timeout: number;\n}\n\nexport interface FallbackStrategy {\n  type: 'cache' | 'mock' | 'alternative_api' | 'degraded_service';\n  data?: any;\n  source: string;\n  confidence: number;\n}\n\nexport class ErrorHandlingService {\n  private static instance: ErrorHandlingService;\n  private circuitBreakers = new Map<string, CircuitBreakerState>();\n  private errorLog = new Map<string, ApiError[]>();\n  private metrics = {\n    totalErrors: 0,\n    recoveredErrors: 0,\n    circuitBreakerTrips: 0,\n    fallbackActivations: 0\n  };\n\n  private constructor() {}\n\n  public static getInstance(): ErrorHandlingService {\n    if (!ErrorHandlingService.instance) {\n      ErrorHandlingService.instance = new ErrorHandlingService();\n    }\n    return ErrorHandlingService.instance;\n  }\n\n  // Circuit Breaker Implementation\n  public createCircuitBreaker(\n    serviceName: string,\n    threshold: number = 5,\n    timeout: number = 60000 // 1 minute\n  ): CircuitBreakerState {\n    const circuitBreaker: CircuitBreakerState = {\n      state: 'closed',\n      failures: 0,\n      lastFailureTime: 0,\n      successCount: 0,\n      threshold,\n      timeout\n    };\n    \n    this.circuitBreakers.set(serviceName, circuitBreaker);\n    return circuitBreaker;\n  }\n\n  public async executeWithCircuitBreaker<T>(\n    serviceName: string,\n    operation: string,\n    apiCall: () => Promise<T>,\n    fallbackStrategy: FallbackStrategy\n  ): Promise<{ result: T; fromFallback: boolean; strategy?: FallbackStrategy }> {\n    \n    let circuitBreaker = this.circuitBreakers.get(serviceName);\n    if (!circuitBreaker) {\n      circuitBreaker = this.createCircuitBreaker(serviceName);\n    }\n\n    // Check circuit breaker state\n    if (circuitBreaker.state === 'open') {\n      if (Date.now() - circuitBreaker.lastFailureTime > circuitBreaker.timeout) {\n        circuitBreaker.state = 'half-open';\n        circuitBreaker.successCount = 0;\n      } else {\n        // Circuit is open, use fallback immediately\n        console.warn(`Circuit breaker OPEN for ${serviceName}, using fallback strategy`);\n        this.metrics.fallbackActivations++;\n        const fallbackResult = await this.executeFallbackStrategy<T>(fallbackStrategy);\n        return { result: fallbackResult, fromFallback: true, strategy: fallbackStrategy };\n      }\n    }\n\n    try {\n      const result = await apiCall();\n      \n      // Success - reset circuit breaker\n      if (circuitBreaker.state === 'half-open') {\n        circuitBreaker.successCount++;\n        if (circuitBreaker.successCount >= 2) {\n          circuitBreaker.state = 'closed';\n          circuitBreaker.failures = 0;\n          console.info(`Circuit breaker CLOSED for ${serviceName} - service recovered`);\n        }\n      } else {\n        circuitBreaker.failures = Math.max(0, circuitBreaker.failures - 1); // Gradual recovery\n      }\n      \n      return { result, fromFallback: false };\n      \n    } catch (error) {\n      // Record the error\n      const apiError: ApiError = {\n        id: randomUUID(),\n        service: serviceName,\n        operation,\n        error: error instanceof Error ? error : new Error(String(error)),\n        timestamp: Date.now(),\n        retryCount: 0,\n        isRecoverable: this.isRecoverableError(error)\n      };\n      \n      this.recordError(serviceName, apiError);\n      \n      // Update circuit breaker\n      circuitBreaker.failures++;\n      circuitBreaker.lastFailureTime = Date.now();\n      \n      if (circuitBreaker.failures >= circuitBreaker.threshold) {\n        circuitBreaker.state = 'open';\n        this.metrics.circuitBreakerTrips++;\n        console.warn(`Circuit breaker OPENED for ${serviceName} after ${circuitBreaker.failures} failures`);\n      }\n      \n      // Execute fallback strategy\n      console.warn(`API call failed for ${serviceName}:${operation}, using fallback strategy`, error);\n      this.metrics.fallbackActivations++;\n      const fallbackResult = await this.executeFallbackStrategy<T>(fallbackStrategy);\n      return { result: fallbackResult, fromFallback: true, strategy: fallbackStrategy };\n    }\n  }\n\n  private isRecoverableError(error: any): boolean {\n    if (error instanceof Error) {\n      // Timeout errors are usually recoverable\n      if (error.name === 'AbortError' || error.message.includes('timeout')) {\n        return true;\n      }\n      \n      // Network errors are usually recoverable\n      if (error.message.includes('fetch failed') || error.message.includes('ECONNREFUSED')) {\n        return true;\n      }\n      \n      // 5xx server errors are usually recoverable\n      if (error.message.includes('500') || error.message.includes('502') || error.message.includes('503')) {\n        return true;\n      }\n      \n      // 4xx client errors are usually not recoverable (except rate limiting)\n      if (error.message.includes('429')) {\n        return true;\n      }\n    }\n    \n    return false;\n  }\n\n  private async executeFallbackStrategy<T>(strategy: FallbackStrategy): Promise<T> {\n    switch (strategy.type) {\n      case 'cache':\n        if (strategy.data) {\n          console.info(`Using cached data as fallback (confidence: ${strategy.confidence})`);\n          return strategy.data as T;\n        }\n        throw new Error('Cache fallback requested but no cached data available');\n      \n      case 'mock':\n        if (strategy.data) {\n          console.info(`Using mock data as fallback (confidence: ${strategy.confidence})`);\n          return strategy.data as T;\n        }\n        throw new Error('Mock fallback requested but no mock data available');\n      \n      case 'degraded_service':\n        console.info(`Using degraded service mode (confidence: ${strategy.confidence})`);\n        return this.getDegradedServiceResponse(strategy);\n      \n      default:\n        throw new Error(`Unknown fallback strategy: ${strategy.type}`);\n    }\n  }\n\n  private getDegradedServiceResponse<T>(strategy: FallbackStrategy): T {\n    // Return a basic response indicating degraded service\n    const degradedResponse = {\n      isCompatible: true,\n      riskLevel: 'medium',\n      notes: `Service temporarily degraded - ${strategy.source}. Manual review recommended.`,\n      confidence: strategy.confidence,\n      degraded: true\n    };\n    \n    return degradedResponse as T;\n  }\n\n  private recordError(serviceName: string, error: ApiError): void {\n    if (!this.errorLog.has(serviceName)) {\n      this.errorLog.set(serviceName, []);\n    }\n    \n    const serviceErrors = this.errorLog.get(serviceName)!;\n    serviceErrors.push(error);\n    \n    // Keep only last 100 errors per service\n    if (serviceErrors.length > 100) {\n      serviceErrors.shift();\n    }\n    \n    this.metrics.totalErrors++;\n  }\n\n  // Retry mechanism with exponential backoff\n  public async executeWithRetry<T>(\n    operation: () => Promise<T>,\n    maxRetries: number = 3,\n    baseDelay: number = 1000\n  ): Promise<T> {\n    let lastError: Error = new Error('No attempts made');\n    \n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        const result = await operation();\n        if (attempt > 0) {\n          this.metrics.recoveredErrors++;\n          console.info(`Operation succeeded on retry attempt ${attempt}`);\n        }\n        return result;\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n        \n        if (attempt === maxRetries) {\n          break;\n        }\n        \n        // Don't retry non-recoverable errors\n        if (!this.isRecoverableError(error)) {\n          break;\n        }\n        \n        // Exponential backoff\n        const delay = baseDelay * Math.pow(2, attempt) + Math.random() * 1000;\n        console.warn(`Operation failed, retrying in ${delay}ms (attempt ${attempt + 1}/${maxRetries})`, error);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n    \n    throw lastError;\n  }\n\n  // Get service health metrics\n  public getServiceHealth(serviceName: string): {\n    circuitBreakerState: string;\n    recentErrors: number;\n    errorRate: number;\n    isHealthy: boolean;\n  } {\n    const circuitBreaker = this.circuitBreakers.get(serviceName);\n    const errors = this.errorLog.get(serviceName) || [];\n    const recentErrors = errors.filter(e => Date.now() - e.timestamp < 300000).length; // Last 5 minutes\n    \n    return {\n      circuitBreakerState: circuitBreaker?.state || 'unknown',\n      recentErrors,\n      errorRate: recentErrors / 5, // Errors per minute\n      isHealthy: (!circuitBreaker || circuitBreaker.state === 'closed') && recentErrors < 5\n    };\n  }\n\n  public getOverallMetrics() {\n    return {\n      ...this.metrics,\n      servicesMonitored: this.circuitBreakers.size,\n      circuitBreakerStates: Array.from(this.circuitBreakers.entries()).reduce((acc, [service, cb]) => {\n        acc[service] = cb.state;\n        return acc;\n      }, {} as { [service: string]: string })\n    };\n  }\n}\n\n// Enhanced API client wrapper with comprehensive error handling\nexport class ResilientApiClient {\n  private errorHandler = ErrorHandlingService.getInstance();\n  \n  constructor(\n    private serviceName: string,\n    private baseTimeout: number = 15000\n  ) {}\n\n  async makeRequest<T>(\n    operation: string,\n    requestFn: () => Promise<T>,\n    fallbackStrategy: FallbackStrategy,\n    retryOptions?: { maxRetries?: number; baseDelay?: number }\n  ): Promise<{ result: T; fromFallback: boolean; strategy?: FallbackStrategy }> {\n    \n    const retryWrapper = () => this.errorHandler.executeWithRetry(\n      requestFn,\n      retryOptions?.maxRetries || 2,\n      retryOptions?.baseDelay || 1000\n    );\n\n    return this.errorHandler.executeWithCircuitBreaker(\n      this.serviceName,\n      operation,\n      retryWrapper,\n      fallbackStrategy\n    );\n  }\n\n  createTimeoutWrapper<T>(\n    requestFn: () => Promise<T>,\n    timeout: number = this.baseTimeout\n  ): () => Promise<T> {\n    return async () => {\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), timeout);\n      \n      try {\n        const request = requestFn();\n        \n        // If the request function accepts a signal parameter, pass it\n        if (typeof (request as any).signal !== 'undefined') {\n          (request as any).signal = controller.signal;\n        }\n        \n        const result = await request;\n        clearTimeout(timeoutId);\n        return result;\n      } catch (error) {\n        clearTimeout(timeoutId);\n        throw error;\n      }\n    };\n  }\n}\n\nexport default ErrorHandlingService;","size_bytes":10901},"client/src/pages/mismatch-detail.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { AlertTriangle, ArrowLeft, Pill, Stethoscope, FileText, User, Calendar } from \"lucide-react\";\nimport type { MedicalRecord } from \"@shared/schema\";\n\nexport default function MismatchDetail() {\n  const [, params] = useRoute(\"/mismatch/:id\");\n  const recordId = params?.id;\n\n  const { data: record, isLoading, error } = useQuery<MedicalRecord>({\n    queryKey: [\"/api/records\", recordId],\n    enabled: !!recordId,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex flex-col overflow-hidden\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Link href=\"/mismatches\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Loading...</h2>\n            </div>\n          </div>\n        </header>\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <div className=\"space-y-6\">\n            {Array.from({ length: 3 }).map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"h-6 bg-muted rounded animate-pulse\" />\n                    <div className=\"h-4 bg-muted rounded animate-pulse\" />\n                    <div className=\"h-4 bg-muted rounded animate-pulse w-3/4\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </main>\n      </div>\n    );\n  }\n\n  if (error || !record) {\n    return (\n      <div className=\"flex flex-col overflow-hidden\">\n        <header className=\"bg-card border-b border-border px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Link href=\"/mismatches\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <h2 className=\"text-2xl font-semibold text-foreground\">Record Not Found</h2>\n            </div>\n          </div>\n        </header>\n        <main className=\"flex-1 overflow-y-auto p-6\">\n          <Card>\n            <CardContent className=\"p-6 text-center\">\n              <AlertTriangle className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">Mismatch Record Not Found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                The requested mismatch record could not be found or may have been removed.\n              </p>\n              <Link href=\"/mismatches\">\n                <Button>Return to Mismatches</Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </main>\n      </div>\n    );\n  }\n\n  const getRiskBadgeVariant = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"destructive\";\n      case \"medium\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getRiskLabel = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"High Risk\";\n      case \"medium\":\n        return \"Medium Risk\";\n      default:\n        return \"Low Risk\";\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border px-6 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Link href=\"/mismatches\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\" data-testid=\"button-back-mismatches\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back\n              </Button>\n            </Link>\n            <div>\n              <h2 className=\"text-2xl font-semibold text-foreground flex items-center\">\n                <AlertTriangle className=\"mr-3 h-6 w-6 text-destructive\" />\n                Mismatch Details - Patient {record.patientId}\n              </h2>\n              <p className=\"text-muted-foreground\">Review detailed medication-diagnosis compatibility analysis</p>\n            </div>\n          </div>\n          <Badge \n            variant={getRiskBadgeVariant(record.riskLevel)}\n            className=\"text-sm px-3 py-1\"\n            data-testid={`badge-risk-${record.riskLevel}`}\n          >\n            {getRiskLabel(record.riskLevel)}\n          </Badge>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto p-6\">\n        <div className=\"max-w-4xl mx-auto space-y-6\">\n          {/* Patient Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <User className=\"h-5 w-5 mr-2 text-primary\" />\n                Patient Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Patient ID</label>\n                  <p className=\"text-lg font-semibold text-foreground\" data-testid=\"text-patient-id\">\n                    {record.patientId}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Record Created</label>\n                  <p className=\"text-foreground flex items-center\" data-testid=\"text-created-date\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    {record.createdAt ? new Date(record.createdAt).toLocaleDateString() : 'Not available'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Medication Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Pill className=\"h-5 w-5 mr-2 text-primary\" />\n                Medication Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Medication Name</label>\n                  <p className=\"text-lg font-semibold text-foreground\" data-testid=\"text-medication\">\n                    {record.medication}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Active Ingredient</label>\n                  <p className=\"text-foreground\" data-testid=\"text-active-ingredient\">\n                    {record.activeIngredient}\n                  </p>\n                </div>\n                {record.dosage && (\n                  <div className=\"md:col-span-2\">\n                    <label className=\"text-sm font-medium text-muted-foreground\">Dosage</label>\n                    <p className=\"text-foreground\" data-testid=\"text-dosage\">\n                      {record.dosage}\n                    </p>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Diagnosis Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Stethoscope className=\"h-5 w-5 mr-2 text-primary\" />\n                Diagnosis Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Diagnosis</label>\n                  <p className=\"text-lg font-semibold text-foreground\" data-testid=\"text-diagnosis\">\n                    {record.diagnosis}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">ICD-10 Code</label>\n                  <p className=\"text-foreground font-mono text-lg\" data-testid=\"text-icd10-code\">\n                    {record.icd10Code}\n                  </p>\n                </div>\n                <div className=\"md:col-span-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Medical Specialty</label>\n                  <p className=\"text-foreground\" data-testid=\"text-specialty\">\n                    {record.specialty}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Compatibility Analysis */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <FileText className=\"h-5 w-5 mr-2 text-primary\" />\n                Compatibility Analysis\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Compatibility Status</label>\n                  <div className=\"flex items-center mt-1\">\n                    <Badge \n                      variant={record.isCompatible ? \"default\" : \"destructive\"}\n                      data-testid=\"badge-compatibility-status\"\n                    >\n                      {record.isCompatible ? \"Compatible\" : \"Incompatible\"}\n                    </Badge>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Risk Assessment</label>\n                  <div className=\"flex items-center mt-1\">\n                    <Badge \n                      variant={getRiskBadgeVariant(record.riskLevel)}\n                      data-testid=\"badge-risk-assessment\"\n                    >\n                      {getRiskLabel(record.riskLevel)}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n              \n              <Separator />\n              \n              {record.analysisNotes && (\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Analysis Notes</label>\n                  <div className=\"mt-2 p-4 bg-muted rounded-lg\">\n                    <p className=\"text-foreground whitespace-pre-wrap\" data-testid=\"text-analysis-notes\">\n                      {record.analysisNotes}\n                    </p>\n                  </div>\n                </div>\n              )}\n              \n              {!record.analysisNotes && (\n                <div className=\"text-center py-4\">\n                  <p className=\"text-muted-foreground\">No additional analysis notes available for this record.</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between items-center\">\n            <Link href=\"/mismatches\">\n              <Button variant=\"outline\" data-testid=\"button-return-mismatches\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Return to All Mismatches\n              </Button>\n            </Link>\n            <Link href=\"/\">\n              <Button data-testid=\"button-go-dashboard\">\n                Go to Dashboard\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":12153},"client/src/components/dashboard/compatibility-settings.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Label } from \"@/components/ui/label\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { \n  Settings, \n  Info, \n  CheckCircle, \n  AlertTriangle, \n  XCircle, \n  ChevronDown,\n  ChevronUp,\n  RotateCcw,\n  Save\n} from \"lucide-react\";\nimport type { \n  CompatibilityConfig, \n  RiskLevel, \n  DashboardStats \n} from \"@shared/schema\";\nimport { \n  defaultCompatibilityConfig, \n  compatibilityPresets \n} from \"@shared/schema\";\n\ninterface CompatibilitySettingsProps {\n  /** Current configuration state */\n  config: CompatibilityConfig;\n  /** Callback when configuration changes */\n  onChange: (config: CompatibilityConfig) => void;\n  /** Callback to save and apply configuration */\n  onSave?: (config: CompatibilityConfig) => void;\n  /** Preview stats based on draft configuration */\n  stats?: DashboardStats;\n  /** Whether preview stats are loading */\n  isLoading?: boolean;\n  /** Whether the settings panel starts open */\n  defaultOpen?: boolean;\n}\n\ninterface PreviewStats {\n  compatible: number;\n  needsReview: number;\n  incompatible: number;\n  successRate: string;\n}\n\nexport default function CompatibilitySettings({\n  config,\n  onChange,\n  onSave,\n  stats,\n  isLoading = false,\n  defaultOpen = false\n}: CompatibilitySettingsProps) {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  // Handle risk level checkbox changes for each category\n  const handleRiskLevelChange = (\n    category: keyof CompatibilityConfig,\n    riskLevel: RiskLevel,\n    checked: boolean\n  ) => {\n    const currentRiskLevels = config[category].riskLevels;\n    const newRiskLevels = checked \n      ? [...currentRiskLevels, riskLevel]\n      : currentRiskLevels.filter(rl => rl !== riskLevel);\n    \n    onChange({\n      ...config,\n      [category]: {\n        ...config[category],\n        riskLevels: newRiskLevels\n      }\n    });\n  };\n\n  // Handle toggle changes for boolean flags\n  const handleToggleChange = (\n    category: 'compatible' | 'incompatible',\n    field: 'requiresCompatibleFlag' | 'includeIncompatibleFlag',\n    checked: boolean\n  ) => {\n    if (category === 'compatible' && field === 'requiresCompatibleFlag') {\n      onChange({\n        ...config,\n        compatible: {\n          ...config.compatible,\n          requiresCompatibleFlag: checked\n        }\n      });\n    } else if (category === 'incompatible' && field === 'includeIncompatibleFlag') {\n      onChange({\n        ...config,\n        incompatible: {\n          ...config.incompatible,\n          includeIncompatibleFlag: checked\n        }\n      });\n    }\n  };\n\n  // Apply preset configuration\n  const applyPreset = (presetKey: keyof typeof compatibilityPresets) => {\n    // Deep clone preset config to avoid shared references\n    const presetConfig = compatibilityPresets[presetKey].config;\n    onChange({\n      compatible: {\n        riskLevels: [...presetConfig.compatible.riskLevels],\n        requiresCompatibleFlag: presetConfig.compatible.requiresCompatibleFlag\n      },\n      needsReview: {\n        riskLevels: [...presetConfig.needsReview.riskLevels]\n      },\n      incompatible: {\n        riskLevels: [...presetConfig.incompatible.riskLevels],\n        includeIncompatibleFlag: presetConfig.incompatible.includeIncompatibleFlag\n      }\n    });\n  };\n\n  // Reset to default configuration\n  const resetToDefaults = () => {\n    // Deep clone default config to avoid shared references\n    onChange({\n      compatible: {\n        riskLevels: [...defaultCompatibilityConfig.compatible.riskLevels],\n        requiresCompatibleFlag: defaultCompatibilityConfig.compatible.requiresCompatibleFlag\n      },\n      needsReview: {\n        riskLevels: [...defaultCompatibilityConfig.needsReview.riskLevels]\n      },\n      incompatible: {\n        riskLevels: [...defaultCompatibilityConfig.incompatible.riskLevels],\n        includeIncompatibleFlag: defaultCompatibilityConfig.incompatible.includeIncompatibleFlag\n      }\n    });\n  };\n\n  // Deep equality check for configurations\n  const configsEqual = (config1: CompatibilityConfig, config2: CompatibilityConfig): boolean => {\n    return JSON.stringify(config1) === JSON.stringify(config2);\n  };\n\n  // Find selected preset key based on current configuration\n  const getSelectedPresetKey = (): keyof typeof compatibilityPresets | null => {\n    for (const [key, preset] of Object.entries(compatibilityPresets)) {\n      if (configsEqual(config, preset.config)) {\n        return key as keyof typeof compatibilityPresets;\n      }\n    }\n    return null;\n  };\n\n  const selectedPresetKey = getSelectedPresetKey();\n\n  // Calculate preview stats from provided stats\n  const calculatePreviewStats = (): PreviewStats | null => {\n    if (!stats) return null;\n\n    return {\n      compatible: stats.compatibleCount,\n      needsReview: stats.needsReviewCount,\n      incompatible: stats.incompatibleCount,\n      successRate: stats.successRate\n    };\n  };\n\n  const previewStats = calculatePreviewStats();\n\n  // Handle save configuration\n  const handleSave = () => {\n    if (onSave) {\n      onSave(config);\n      setIsOpen(false); // Close settings panel after save\n    }\n  };\n\n  const RiskLevelCheckbox = ({\n    category,\n    riskLevel,\n    label\n  }: {\n    category: keyof CompatibilityConfig;\n    riskLevel: RiskLevel;\n    label: string;\n  }) => {\n    const isChecked = config[category].riskLevels.includes(riskLevel);\n    \n    return (\n      <div className=\"flex items-center space-x-2\">\n        <Checkbox\n          id={`${category}-${riskLevel}`}\n          checked={isChecked}\n          onCheckedChange={(checked) => \n            handleRiskLevelChange(category, riskLevel, !!checked)\n          }\n          data-testid={`checkbox-${category}-${riskLevel}`}\n        />\n        <Label \n          htmlFor={`${category}-${riskLevel}`}\n          className=\"text-sm font-medium cursor-pointer\"\n        >\n          {label}\n        </Label>\n      </div>\n    );\n  };\n\n  return (\n    <TooltipProvider>\n      <Card className=\"w-full\">\n        <Collapsible open={isOpen} onOpenChange={setIsOpen}>\n          <CollapsibleTrigger asChild>\n            <CardHeader className=\"pb-4 hover:bg-accent/50 transition-colors cursor-pointer\">\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"w-8 h-8 bg-primary/10 rounded-lg flex items-center justify-center\">\n                    <Settings className=\"h-4 w-4 text-primary\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-foreground\">Compatibility Settings</h3>\n                    <p className=\"text-sm text-muted-foreground font-normal\">\n                      Configure how records are categorized by risk level and compatibility\n                    </p>\n                  </div>\n                </div>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  data-testid=\"button-toggle-settings\"\n                >\n                  {isOpen ? (\n                    <ChevronUp className=\"h-4 w-4\" />\n                  ) : (\n                    <ChevronDown className=\"h-4 w-4\" />\n                  )}\n                </Button>\n              </CardTitle>\n            </CardHeader>\n          </CollapsibleTrigger>\n          \n          <CollapsibleContent>\n            <CardContent className=\"pt-0\">\n              {/* Preset Buttons */}\n              <div className=\"mb-6\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Label className=\"text-sm font-medium\">Quick Presets</Label>\n                    <Tooltip>\n                      <TooltipTrigger>\n                        <Info className=\"h-4 w-4 text-muted-foreground\" />\n                      </TooltipTrigger>\n                      <TooltipContent>\n                        <p className=\"max-w-xs\">Choose a preset configuration or customize individual settings below</p>\n                      </TooltipContent>\n                    </Tooltip>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={resetToDefaults}\n                    data-testid=\"button-reset-defaults\"\n                  >\n                    <RotateCcw className=\"h-4 w-4 mr-2\" />\n                    Reset to Defaults\n                  </Button>\n                </div>\n                \n                <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3\">\n                  {Object.entries(compatibilityPresets).map(([key, preset]) => {\n                    const isSelected = selectedPresetKey === key;\n                    return (\n                      <Button\n                        key={key}\n                        variant={isSelected ? \"default\" : \"outline\"}\n                        size=\"sm\"\n                        onClick={() => applyPreset(key as keyof typeof compatibilityPresets)}\n                        className={`h-auto p-3 text-left ${isSelected ? 'ring-2 ring-primary ring-offset-2' : ''}`}\n                        data-testid={`button-preset-${key}`}\n                      >\n                        <div>\n                          <div className=\"font-medium text-sm\">{preset.name}</div>\n                          <div className={`text-xs mt-1 ${isSelected ? 'text-primary-foreground/80' : 'text-muted-foreground'}`}>\n                            {preset.description}\n                          </div>\n                        </div>\n                      </Button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              <Separator className=\"mb-6\" />\n\n              {/* Configuration Categories */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {/* Compatible Category */}\n                <Card className=\"border-success/20 bg-success/5\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center space-x-2 text-success\">\n                      <CheckCircle className=\"h-5 w-5\" />\n                      <span>Compatible</span>\n                    </CardTitle>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Records considered safe medication-diagnosis combinations\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">Risk Levels</Label>\n                      <div className=\"space-y-2\">\n                        <RiskLevelCheckbox \n                          category=\"compatible\" \n                          riskLevel=\"low\" \n                          label=\"Low Risk\" \n                        />\n                        <RiskLevelCheckbox \n                          category=\"compatible\" \n                          riskLevel=\"medium\" \n                          label=\"Medium Risk\" \n                        />\n                        <RiskLevelCheckbox \n                          category=\"compatible\" \n                          riskLevel=\"high\" \n                          label=\"High Risk\" \n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"compatible-flag\"\n                        checked={config.compatible.requiresCompatibleFlag}\n                        onCheckedChange={(checked) => \n                          handleToggleChange('compatible', 'requiresCompatibleFlag', !!checked)\n                        }\n                        data-testid=\"checkbox-require-compatible-flag\"\n                      />\n                      <Label htmlFor=\"compatible-flag\" className=\"text-sm cursor-pointer\">\n                        Require Compatible Flag\n                      </Label>\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <Info className=\"h-3 w-3 text-muted-foreground\" />\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p className=\"max-w-xs\">Only include records explicitly marked as compatible</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Needs Review Category */}\n                <Card className=\"border-warning/20 bg-warning/5\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center space-x-2 text-warning\">\n                      <AlertTriangle className=\"h-5 w-5\" />\n                      <span>Needs Review</span>\n                    </CardTitle>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Records requiring clinical evaluation before use\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">Risk Levels</Label>\n                      <div className=\"space-y-2\">\n                        <RiskLevelCheckbox \n                          category=\"needsReview\" \n                          riskLevel=\"low\" \n                          label=\"Low Risk\" \n                        />\n                        <RiskLevelCheckbox \n                          category=\"needsReview\" \n                          riskLevel=\"medium\" \n                          label=\"Medium Risk\" \n                        />\n                        <RiskLevelCheckbox \n                          category=\"needsReview\" \n                          riskLevel=\"high\" \n                          label=\"High Risk\" \n                        />\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Incompatible Category */}\n                <Card className=\"border-destructive/20 bg-destructive/5\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"flex items-center space-x-2 text-destructive\">\n                      <XCircle className=\"h-5 w-5\" />\n                      <span>Incompatible</span>\n                    </CardTitle>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Records with potentially dangerous combinations\n                    </p>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <div>\n                      <Label className=\"text-sm font-medium mb-2 block\">Risk Levels</Label>\n                      <div className=\"space-y-2\">\n                        <RiskLevelCheckbox \n                          category=\"incompatible\" \n                          riskLevel=\"low\" \n                          label=\"Low Risk\" \n                        />\n                        <RiskLevelCheckbox \n                          category=\"incompatible\" \n                          riskLevel=\"medium\" \n                          label=\"Medium Risk\" \n                        />\n                        <RiskLevelCheckbox \n                          category=\"incompatible\" \n                          riskLevel=\"high\" \n                          label=\"High Risk\" \n                        />\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id=\"incompatible-flag\"\n                        checked={config.incompatible.includeIncompatibleFlag}\n                        onCheckedChange={(checked) => \n                          handleToggleChange('incompatible', 'includeIncompatibleFlag', !!checked)\n                        }\n                        data-testid=\"checkbox-include-incompatible-flag\"\n                      />\n                      <Label htmlFor=\"incompatible-flag\" className=\"text-sm cursor-pointer\">\n                        Include Incompatible Flag\n                      </Label>\n                      <Tooltip>\n                        <TooltipTrigger>\n                          <Info className=\"h-3 w-3 text-muted-foreground\" />\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p className=\"max-w-xs\">Include records explicitly flagged as incompatible</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Preview Section */}\n              {(previewStats || isLoading) && (\n                <>\n                  <Separator className=\"my-6\" />\n                  <div>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Label className=\"text-sm font-medium\">Configuration Preview</Label>\n                        <Tooltip>\n                          <TooltipTrigger>\n                            <Info className=\"h-4 w-4 text-muted-foreground\" />\n                          </TooltipTrigger>\n                          <TooltipContent>\n                            <p className=\"max-w-xs\">\n                              Real-time preview of how your current settings will categorize the data\n                            </p>\n                          </TooltipContent>\n                        </Tooltip>\n                      </div>\n                      \n                      {/* Save Button */}\n                      {onSave && (\n                        <Button\n                          onClick={handleSave}\n                          disabled={isLoading}\n                          className=\"ml-4\"\n                          data-testid=\"button-save-settings\"\n                        >\n                          <Save className=\"h-4 w-4 mr-2\" />\n                          {isLoading ? \"Saving...\" : \"Save & Apply\"}\n                        </Button>\n                      )}\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n                      <Card className=\"bg-success/5 border-success/20\">\n                        <CardContent className=\"p-3 text-center\">\n                          {isLoading ? (\n                            <div className=\"animate-pulse\">\n                              <div className=\"h-8 bg-success/20 rounded mb-2\"></div>\n                              <div className=\"h-4 bg-success/10 rounded\"></div>\n                            </div>\n                          ) : (\n                            <>\n                              <div className=\"text-xl lg:text-2xl font-bold text-success\" data-testid=\"preview-compatible\">\n                                {previewStats?.compatible.toLocaleString()}\n                              </div>\n                              <div className=\"text-xs lg:text-sm text-muted-foreground\">Compatible</div>\n                            </>\n                          )}\n                        </CardContent>\n                      </Card>\n                      \n                      <Card className=\"bg-warning/5 border-warning/20\">\n                        <CardContent className=\"p-3 text-center\">\n                          {isLoading ? (\n                            <div className=\"animate-pulse\">\n                              <div className=\"h-8 bg-warning/20 rounded mb-2\"></div>\n                              <div className=\"h-4 bg-warning/10 rounded\"></div>\n                            </div>\n                          ) : (\n                            <>\n                              <div className=\"text-xl lg:text-2xl font-bold text-warning\" data-testid=\"preview-needs-review\">\n                                {previewStats?.needsReview.toLocaleString()}\n                              </div>\n                              <div className=\"text-xs lg:text-sm text-muted-foreground\">Needs Review</div>\n                            </>\n                          )}\n                        </CardContent>\n                      </Card>\n                      \n                      <Card className=\"bg-destructive/5 border-destructive/20\">\n                        <CardContent className=\"p-3 text-center\">\n                          {isLoading ? (\n                            <div className=\"animate-pulse\">\n                              <div className=\"h-8 bg-destructive/20 rounded mb-2\"></div>\n                              <div className=\"h-4 bg-destructive/10 rounded\"></div>\n                            </div>\n                          ) : (\n                            <>\n                              <div className=\"text-xl lg:text-2xl font-bold text-destructive\" data-testid=\"preview-incompatible\">\n                                {previewStats?.incompatible.toLocaleString()}\n                              </div>\n                              <div className=\"text-xs lg:text-sm text-muted-foreground\">Incompatible</div>\n                            </>\n                          )}\n                        </CardContent>\n                      </Card>\n                      \n                      <Card className=\"bg-primary/5 border-primary/20\">\n                        <CardContent className=\"p-3 text-center\">\n                          {isLoading ? (\n                            <div className=\"animate-pulse\">\n                              <div className=\"h-8 bg-primary/20 rounded mb-2\"></div>\n                              <div className=\"h-4 bg-primary/10 rounded\"></div>\n                            </div>\n                          ) : (\n                            <>\n                              <div className=\"text-xl lg:text-2xl font-bold text-primary\" data-testid=\"preview-success-rate\">\n                                {previewStats?.successRate}\n                              </div>\n                              <div className=\"text-xs lg:text-sm text-muted-foreground\">Success Rate</div>\n                            </>\n                          )}\n                        </CardContent>\n                      </Card>\n                    </div>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </CollapsibleContent>\n        </Collapsible>\n      </Card>\n    </TooltipProvider>\n  );\n}","size_bytes":22972},"client/src/components/ui/info-hint.tsx":{"content":"import { useState } from \"react\";\nimport { Info } from \"lucide-react\";\nimport { Tooltip, TooltipContent, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface InfoHintProps {\n  content: string;\n  ariaLabel: string;\n  testId: string;\n  className?: string;\n}\n\nexport function InfoHint({ content, ariaLabel, testId, className = \"\" }: InfoHintProps) {\n  const [popoverOpen, setPopoverOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  const buttonClasses = `w-4 h-4 bg-muted/50 rounded-full flex items-center justify-center cursor-help hover:bg-muted/70 focus:bg-muted/70 focus:outline-none focus:ring-2 focus:ring-primary/50 focus:ring-offset-1 transition-colors ${className}`;\n\n  // On mobile/touch devices, use Popover for click interactions\n  if (isMobile) {\n    return (\n      <Popover open={popoverOpen} onOpenChange={setPopoverOpen}>\n        <PopoverTrigger asChild>\n          <button \n            type=\"button\"\n            className={buttonClasses}\n            aria-label={ariaLabel}\n            data-testid={testId}\n            onClick={() => setPopoverOpen(!popoverOpen)}\n          >\n            <Info className=\"h-3 w-3 text-muted-foreground\" />\n          </button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-80 p-3 text-sm\">\n          <p>{content}</p>\n        </PopoverContent>\n      </Popover>\n    );\n  }\n\n  // On desktop, use Tooltip for hover/focus interactions\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>\n        <button \n          type=\"button\"\n          className={buttonClasses}\n          aria-label={ariaLabel}\n          data-testid={testId}\n        >\n          <Info className=\"h-3 w-3 text-muted-foreground\" />\n        </button>\n      </TooltipTrigger>\n      <TooltipContent>\n        <p className=\"max-w-xs\">{content}</p>\n      </TooltipContent>\n    </Tooltip>\n  );\n}","size_bytes":1967},"client/src/components/ui/medical-records-drawer.tsx":{"content":"import { X, AlertCircle, Loader2, FileText } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { cn } from \"@/lib/utils\";\nimport type { MedicalRecord } from \"@shared/schema\";\n\ninterface MedicalRecordsDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  records?: MedicalRecord[];\n  isLoading?: boolean;\n  error?: string | null;\n  className?: string;\n}\n\ninterface MedicalRecordItemProps {\n  record: MedicalRecord;\n  index: number;\n}\n\nfunction MedicalRecordItem({ record, index }: MedicalRecordItemProps) {\n  const getRiskBadgeVariant = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"destructive\";\n      case \"medium\":\n        return \"secondary\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const getRiskLabel = (riskLevel: string) => {\n    switch (riskLevel) {\n      case \"high\":\n        return \"High Risk\";\n      case \"medium\":\n        return \"Medium Risk\";\n      default:\n        return \"Low Risk\";\n    }\n  };\n\n  const getCompatibilityBadge = (isCompatible: boolean, riskLevel: string) => {\n    if (isCompatible) {\n      return <Badge variant=\"outline\" className=\"bg-green-50 dark:bg-green-950 text-green-700 dark:text-green-300 border-green-200 dark:border-green-800\">Compatible</Badge>;\n    } else if (riskLevel === \"medium\") {\n      return <Badge variant=\"secondary\" className=\"bg-yellow-50 dark:bg-yellow-950 text-yellow-700 dark:text-yellow-300 border-yellow-200 dark:border-yellow-800\">Needs Review</Badge>;\n    } else {\n      return <Badge variant=\"destructive\">Incompatible</Badge>;\n    }\n  };\n\n  return (\n    <div\n      className=\"border border-border rounded-lg p-4 space-y-3 bg-card hover:bg-accent/5 transition-colors\"\n      data-testid={`medical-record-item-${record.patientId}`}\n    >\n      {/* Header with Patient ID and Compatibility Status */}\n      <div className=\"flex items-start justify-between\">\n        <div>\n          <h4 className=\"text-sm font-semibold text-foreground\" data-testid={`text-patient-id-${record.patientId}`}>\n            Patient ID: {record.patientId}\n          </h4>\n          <p className=\"text-xs text-muted-foreground\">\n            {record.createdAt ? new Date(record.createdAt).toLocaleDateString() : 'No date'}\n          </p>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          {getCompatibilityBadge(record.isCompatible, record.riskLevel)}\n          <Badge\n            variant={getRiskBadgeVariant(record.riskLevel)}\n            data-testid={`badge-risk-${record.riskLevel}-${record.patientId}`}\n          >\n            {getRiskLabel(record.riskLevel)}\n          </Badge>\n        </div>\n      </div>\n\n      {/* Medication Information */}\n      <div className=\"space-y-2\">\n        <div>\n          <h5 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">Medication</h5>\n          <p className=\"text-sm text-foreground font-medium\" data-testid={`text-medication-${record.patientId}`}>\n            {record.medication}\n          </p>\n          {record.dosage && (\n            <p className=\"text-xs text-muted-foreground\" data-testid={`text-dosage-${record.patientId}`}>\n              Dosage: {record.dosage}\n            </p>\n          )}\n          <p className=\"text-xs text-muted-foreground\" data-testid={`text-active-ingredient-${record.patientId}`}>\n            Active Ingredient: {record.activeIngredient}\n          </p>\n        </div>\n\n        {/* Diagnosis Information */}\n        <div>\n          <h5 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">Diagnosis</h5>\n          <p className=\"text-sm text-foreground\" data-testid={`text-diagnosis-${record.patientId}`}>\n            {record.diagnosis}\n          </p>\n          <div className=\"flex items-center gap-2 mt-1\">\n            <p className=\"text-xs font-mono text-muted-foreground\" data-testid={`text-icd10-${record.patientId}`}>\n              ICD-10: {record.icd10Code}\n            </p>\n            <span className=\"text-muted-foreground\">•</span>\n            <p className=\"text-xs text-muted-foreground\" data-testid={`text-specialty-${record.patientId}`}>\n              {record.specialty}\n            </p>\n          </div>\n        </div>\n\n        {/* Analysis Notes */}\n        {record.analysisNotes && (\n          <div>\n            <h5 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wider\">Analysis Notes</h5>\n            <p className=\"text-xs text-muted-foreground\" data-testid={`text-analysis-notes-${record.patientId}`}>\n              {record.analysisNotes}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nfunction LoadingState() {\n  return (\n    <div className=\"space-y-4\" data-testid=\"drawer-loading-state\">\n      <div className=\"flex items-center justify-center py-8\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        <span className=\"ml-2 text-sm text-muted-foreground\">Loading medical records...</span>\n      </div>\n      {Array.from({ length: 3 }).map((_, i) => (\n        <div key={i} className=\"border border-border rounded-lg p-4 space-y-3\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"space-y-2\">\n              <Skeleton className=\"h-4 w-24\" />\n              <Skeleton className=\"h-3 w-16\" />\n            </div>\n            <div className=\"flex gap-2\">\n              <Skeleton className=\"h-5 w-16\" />\n              <Skeleton className=\"h-5 w-16\" />\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <Skeleton className=\"h-4 w-32\" />\n            <Skeleton className=\"h-3 w-20\" />\n            <Skeleton className=\"h-3 w-40\" />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction EmptyState({ title }: { title: string }) {\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 text-center\" data-testid=\"drawer-empty-state\">\n      <FileText className=\"h-12 w-12 text-muted-foreground/50 mb-4\" />\n      <h3 className=\"text-lg font-medium text-foreground mb-2\">No Records Found</h3>\n      <p className=\"text-sm text-muted-foreground max-w-sm\">\n        No medical records found for \"{title}\". Try adjusting your filters or check back later.\n      </p>\n    </div>\n  );\n}\n\nfunction ErrorState({ error, onRetry }: { error: string; onRetry?: () => void }) {\n  return (\n    <div className=\"flex flex-col items-center justify-center py-12 text-center\" data-testid=\"drawer-error-state\">\n      <AlertCircle className=\"h-12 w-12 text-destructive mb-4\" />\n      <h3 className=\"text-lg font-medium text-foreground mb-2\">Error Loading Records</h3>\n      <p className=\"text-sm text-muted-foreground max-w-sm mb-4\">{error}</p>\n      {onRetry && (\n        <Button variant=\"outline\" onClick={onRetry} data-testid=\"button-retry-loading\">\n          Try Again\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default function MedicalRecordsDrawer({\n  isOpen,\n  onClose,\n  title,\n  records,\n  isLoading = false,\n  error = null,\n  className\n}: MedicalRecordsDrawerProps) {\n  // Handle ESC key\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Escape') {\n      onClose();\n    }\n  };\n\n  // Handle overlay click\n  const handleOverlayClick = (e: React.MouseEvent) => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      className=\"fixed inset-0 z-50 flex items-center justify-end\"\n      onKeyDown={handleKeyDown}\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-labelledby=\"drawer-title\"\n      data-testid=\"medical-records-drawer\"\n    >\n      {/* Overlay */}\n      <div\n        className=\"absolute inset-0 bg-black/50 backdrop-blur-sm transition-opacity\"\n        onClick={handleOverlayClick}\n        data-testid=\"drawer-overlay\"\n      />\n\n      {/* Drawer Content */}\n      <div\n        className={cn(\n          \"relative w-full max-w-lg h-full bg-background border-l border-border shadow-2xl\",\n          \"transform transition-transform duration-300 ease-in-out\",\n          isOpen ? \"translate-x-0\" : \"translate-x-full\",\n          \"sm:max-w-xl md:max-w-2xl lg:max-w-3xl\",\n          className\n        )}\n        data-testid=\"drawer-content\"\n      >\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-border bg-card/50\">\n          <div>\n            <h2\n              id=\"drawer-title\"\n              className=\"text-lg font-semibold text-foreground\"\n              data-testid=\"drawer-title\"\n            >\n              {title}\n            </h2>\n            <p className=\"text-sm text-muted-foreground mt-1\">\n              {isLoading ? 'Loading...' : records ? `${records.length} records found` : 'Medical records details'}\n            </p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-close-drawer\"\n            aria-label=\"Close drawer\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n\n        {/* Content Area */}\n        <ScrollArea className=\"h-[calc(100vh-80px)] p-6\" data-testid=\"drawer-scroll-area\">\n          {error ? (\n            <ErrorState error={error} />\n          ) : isLoading ? (\n            <LoadingState />\n          ) : !records || records.length === 0 ? (\n            <EmptyState title={title} />\n          ) : (\n            <div className=\"space-y-4\" data-testid=\"drawer-records-list\">\n              {records.map((record, index) => (\n                <MedicalRecordItem\n                  key={record.id || `${record.patientId}-${index}`}\n                  record={record}\n                  index={index}\n                />\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </div>\n    </div>\n  );\n}\n\nexport type { MedicalRecordsDrawerProps };","size_bytes":10086},"client/src/lib/storage.ts":{"content":"import type { CompatibilityConfig } from \"@shared/schema\";\nimport { defaultCompatibilityConfig } from \"@shared/schema\";\n\nconst STORAGE_KEY = \"medicalAnalysis.compatibilityConfig\";\n\n/**\n * Validates if a loaded config object has the correct structure\n */\nfunction isValidCompatibilityConfig(config: any): config is CompatibilityConfig {\n  if (!config || typeof config !== 'object') return false;\n  \n  const { compatible, needsReview, incompatible } = config;\n  \n  if (!compatible || !needsReview || !incompatible) return false;\n  \n  // Check compatible structure\n  if (!Array.isArray(compatible.riskLevels) || typeof compatible.requiresCompatibleFlag !== 'boolean') {\n    return false;\n  }\n  \n  // Check needsReview structure\n  if (!Array.isArray(needsReview.riskLevels)) {\n    return false;\n  }\n  \n  // Check incompatible structure\n  if (!Array.isArray(incompatible.riskLevels) || typeof incompatible.includeIncompatibleFlag !== 'boolean') {\n    return false;\n  }\n  \n  // Validate risk level values\n  const validRiskLevels = [\"low\", \"medium\", \"high\"];\n  const allRiskLevels = [\n    ...compatible.riskLevels,\n    ...needsReview.riskLevels,\n    ...incompatible.riskLevels\n  ];\n  \n  return allRiskLevels.every(level => validRiskLevels.includes(level));\n}\n\n/**\n * Saves compatibility configuration to localStorage\n */\nexport function saveCompatibilityConfig(config: CompatibilityConfig): boolean {\n  try {\n    if (typeof window === 'undefined' || !window.localStorage) {\n      console.warn('localStorage is not available');\n      return false;\n    }\n    \n    const serialized = JSON.stringify(config);\n    localStorage.setItem(STORAGE_KEY, serialized);\n    return true;\n  } catch (error) {\n    console.error('Failed to save compatibility config to localStorage:', error);\n    \n    // Handle quota exceeded error specifically\n    if (error instanceof Error && error.name === 'QuotaExceededError') {\n      console.warn('localStorage quota exceeded. Cannot save compatibility configuration.');\n    }\n    \n    return false;\n  }\n}\n\n/**\n * Loads compatibility configuration from localStorage with fallback to default\n */\nexport function loadCompatibilityConfig(): CompatibilityConfig {\n  try {\n    if (typeof window === 'undefined' || !window.localStorage) {\n      console.warn('localStorage is not available, using default config');\n      return defaultCompatibilityConfig;\n    }\n    \n    const serialized = localStorage.getItem(STORAGE_KEY);\n    \n    if (!serialized) {\n      // No saved config, return default\n      return defaultCompatibilityConfig;\n    }\n    \n    const parsed = JSON.parse(serialized);\n    \n    if (isValidCompatibilityConfig(parsed)) {\n      return parsed;\n    } else {\n      console.warn('Invalid compatibility config found in localStorage, using default');\n      // Clear invalid config\n      clearCompatibilityConfig();\n      return defaultCompatibilityConfig;\n    }\n  } catch (error) {\n    console.error('Failed to load compatibility config from localStorage:', error);\n    \n    // Clear corrupted data\n    clearCompatibilityConfig();\n    return defaultCompatibilityConfig;\n  }\n}\n\n/**\n * Clears compatibility configuration from localStorage\n */\nexport function clearCompatibilityConfig(): boolean {\n  try {\n    if (typeof window === 'undefined' || !window.localStorage) {\n      return false;\n    }\n    \n    localStorage.removeItem(STORAGE_KEY);\n    return true;\n  } catch (error) {\n    console.error('Failed to clear compatibility config from localStorage:', error);\n    return false;\n  }\n}\n\n/**\n * Checks if localStorage is available and functional\n */\nexport function isLocalStorageAvailable(): boolean {\n  try {\n    if (typeof window === 'undefined' || !window.localStorage) {\n      return false;\n    }\n    \n    // Test localStorage functionality\n    const testKey = '__localStorage_test__';\n    localStorage.setItem(testKey, 'test');\n    localStorage.removeItem(testKey);\n    return true;\n  } catch {\n    return false;\n  }\n}","size_bytes":3945},"client/src/components/dashboard/fda-api-status.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { \n  Activity, \n  AlertTriangle, \n  CheckCircle, \n  RefreshCw, \n  XCircle, \n  Clock,\n  TrendingUp,\n  Database\n} from \"lucide-react\";\nimport { fdaUsageTracker, type UsageStats } from \"@/lib/fda-usage-tracker\";\nimport { cn } from \"@/lib/utils\";\n\ninterface FdaApiStatusResponse {\n  status: 'available' | 'rate_limited' | 'warning' | 'error';\n  message: string;\n  lastChecked: string;\n  responseTimeMs: number;\n  rateLimitInfo?: {\n    remaining: number;\n    dailyRemaining?: number;\n    minuteRemaining?: number;\n    total: number;\n    resetTime: string;\n    minutesUntilReset: number;\n  };\n  cacheInfo?: {\n    entriesCount: number;\n  };\n  apiEndpoint?: string;\n  testQuery?: string;\n  testResultsFound?: number;\n  error?: string;\n  details?: string;\n  fromCache?: boolean;\n  cacheExpiresAt?: string;\n  lastUpdated?: string;\n  apiConfig?: {\n    hasApiKey: boolean;\n    limits: {\n      dailyLimit: number;\n      hourlyLimit: number;\n      minuteLimit: number;\n    };\n  };\n  serverUsageStats?: {\n    dailyUsage: number;\n    hourlyUsage: number;\n    minuteUsage: number;\n    canMakeCall: boolean;\n    errorRate: number;\n    quotaInfo: {\n      dailyLimit: number;\n      hourlyLimit: number;\n      minuteLimit: number;\n      dailyRemaining: number;\n      hourlyRemaining: number;\n      minuteRemaining: number;\n    };\n    recentActivity?: Array<{\n      timestamp: number;\n      endpoint: string;\n      success: boolean;\n      errorType?: string;\n      responseTimeMs?: number;\n    }>;\n  };\n}\n\ninterface FdaApiStatusProps {\n  className?: string;\n  compact?: boolean;\n}\n\nexport default function FdaApiStatus({ className, compact = false }: FdaApiStatusProps) {\n  const queryClient = useQueryClient();\n  const [lastRefresh, setLastRefresh] = useState<number>(Date.now());\n  const [localUsageStats, setLocalUsageStats] = useState<UsageStats | null>(null);\n  const [isPageVisible, setIsPageVisible] = useState<boolean>(!document.hidden);\n\n  // Page Visibility API to pause polling when tab is hidden\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      setIsPageVisible(!document.hidden);\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  // Query FDA API status with page visibility awareness\n  const { \n    data: apiStatus, \n    isLoading, \n    error,\n    refetch \n  } = useQuery<FdaApiStatusResponse>({\n    queryKey: ['/api/fda-status', lastRefresh],\n    queryFn: async () => {\n      const response = await fetch('/api/fda-status');\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      return response.json();\n    },\n    staleTime: 2 * 60 * 1000, // 2 minutes\n    refetchInterval: isPageVisible ? 3 * 60 * 1000 : false, // Only poll when page is visible\n    refetchIntervalInBackground: false, // Disable background polling to save resources\n    retry: 2,\n    // Refetch when page becomes visible after being hidden\n    refetchOnWindowFocus: true\n  });\n\n  // Update local usage stats periodically (fallback only)\n  useEffect(() => {\n    const updateLocalStats = () => {\n      setLocalUsageStats(fdaUsageTracker.getUsageStats());\n    };\n\n    updateLocalStats();\n    const interval = setInterval(updateLocalStats, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Manual refresh handler with force parameter\n  const handleRefresh = async () => {\n    setLastRefresh(Date.now());\n    // Force fresh data from server by adding force parameter\n    const response = await fetch('/api/fda-status?force=true');\n    if (response.ok) {\n      const data = await response.json();\n      queryClient.setQueryData(['/api/fda-status', lastRefresh], data);\n    }\n    await refetch();\n  };\n\n  // Get summary stats from server (preferred) or local tracker (fallback)\n  const getSummaryStats = () => {\n    const serverStats = apiStatus?.serverUsageStats;\n    const localStats = fdaUsageTracker.getSummaryStats();\n    \n    if (serverStats) {\n      // Use server data as source of truth\n      const dailyUsage = `${serverStats.dailyUsage}/${serverStats.quotaInfo.dailyLimit}`;\n      let status: 'healthy' | 'warning' | 'critical' = 'healthy';\n      let statusMessage = 'API ready';\n      \n      if (!serverStats.canMakeCall) {\n        status = 'critical';\n        if (serverStats.quotaInfo.dailyRemaining === 0) {\n          statusMessage = 'Daily limit reached';\n        } else if (serverStats.quotaInfo.hourlyRemaining === 0) {\n          statusMessage = 'Hourly limit reached';\n        } else {\n          statusMessage = 'Rate limited';\n        }\n      } else if (serverStats.quotaInfo.dailyRemaining < 50 || serverStats.quotaInfo.hourlyRemaining < 20) {\n        status = 'warning';\n        statusMessage = 'Approaching limits';\n      } else if (serverStats.errorRate > 20) {\n        status = 'warning';\n        statusMessage = 'High error rate';\n      }\n      \n      return { dailyUsage, status, statusMessage };\n    }\n    \n    // Fallback to local stats if server data unavailable\n    return localStats;\n  };\n\n  const summaryStats = getSummaryStats();\n\n  // Determine overall status combining API and local data\n  const getOverallStatus = (): {\n    status: 'healthy' | 'warning' | 'critical';\n    icon: React.ReactNode;\n    color: string;\n    bgColor: string;\n  } => {\n    if (error || apiStatus?.status === 'error') {\n      return {\n        status: 'critical',\n        icon: <XCircle className=\"h-4 w-4\" />,\n        color: 'text-red-600 dark:text-red-400',\n        bgColor: 'bg-red-50 dark:bg-red-950'\n      };\n    }\n\n    if (apiStatus?.status === 'rate_limited' || summaryStats.status === 'critical') {\n      return {\n        status: 'critical',\n        icon: <AlertTriangle className=\"h-4 w-4\" />,\n        color: 'text-red-600 dark:text-red-400',\n        bgColor: 'bg-red-50 dark:bg-red-950'\n      };\n    }\n\n    if (apiStatus?.status === 'warning' || summaryStats.status === 'warning') {\n      return {\n        status: 'warning',\n        icon: <AlertTriangle className=\"h-4 w-4\" />,\n        color: 'text-yellow-600 dark:text-yellow-400',\n        bgColor: 'bg-yellow-50 dark:bg-yellow-950'\n      };\n    }\n\n    return {\n      status: 'healthy',\n      icon: <CheckCircle className=\"h-4 w-4\" />,\n      color: 'text-green-600 dark:text-green-400',\n      bgColor: 'bg-green-50 dark:bg-green-950'\n    };\n  };\n\n  const overallStatus = getOverallStatus();\n\n  // Format time ago helper\n  const formatTimeAgo = (timestamp: string | number): string => {\n    const date = typeof timestamp === 'string' ? new Date(timestamp) : new Date(timestamp);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMinutes = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffMinutes < 1) return 'Just now';\n    if (diffMinutes < 60) return `${diffMinutes}m ago`;\n    \n    const diffHours = Math.floor(diffMinutes / 60);\n    if (diffHours < 24) return `${diffHours}h ago`;\n    \n    const diffDays = Math.floor(diffHours / 24);\n    return `${diffDays}d ago`;\n  };\n\n  // Format next available time\n  const formatNextAvailable = (timestamp?: number): string => {\n    if (!timestamp) return '';\n    \n    const diffMs = timestamp - Date.now();\n    if (diffMs <= 0) return 'Now';\n    \n    const diffMinutes = Math.ceil(diffMs / (1000 * 60));\n    if (diffMinutes < 60) return `${diffMinutes}m`;\n    \n    const diffHours = Math.ceil(diffMinutes / 60);\n    return `${diffHours}h`;\n  };\n\n  if (compact) {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <div className={cn(\"flex items-center gap-2\", className)} data-testid=\"fda-status-compact\">\n              <div className={cn(\"flex items-center justify-center w-3 h-3 rounded-full\", overallStatus.bgColor)}>\n                <div className={cn(\"w-2 h-2 rounded-full\", overallStatus.color.replace('text-', 'bg-'))} />\n              </div>\n              <span className=\"text-sm text-muted-foreground\">FDA API</span>\n              {isLoading && <RefreshCw className=\"h-3 w-3 animate-spin text-muted-foreground\" />}\n            </div>\n          </TooltipTrigger>\n          <TooltipContent side=\"bottom\" className=\"max-w-xs\">\n            <div className=\"space-y-1 text-xs\">\n              <div className=\"font-medium\">{apiStatus?.message || summaryStats.statusMessage}</div>\n              <div>Daily usage: {summaryStats.dailyUsage}</div>\n              {summaryStats.lastCallAgo && (\n                <div>Last call: {summaryStats.lastCallAgo}</div>\n              )}\n              {apiStatus?.responseTimeMs && (\n                <div>Response: {apiStatus.responseTimeMs}ms</div>\n              )}\n            </div>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  return (\n    <Card className={cn(\"w-full\", className)} data-testid=\"fda-status-card\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-sm font-medium flex items-center gap-2\">\n            <Database className=\"h-4 w-4\" />\n            FDA API Status\n          </CardTitle>\n          <div className=\"flex items-center gap-2\">\n            <Badge \n              variant={overallStatus.status === 'healthy' ? 'default' : \n                      overallStatus.status === 'warning' ? 'secondary' : 'destructive'}\n              className={cn(\"text-xs\", overallStatus.color)}\n              data-testid=\"fda-status-badge\"\n            >\n              {overallStatus.icon}\n              <span className=\"ml-1 capitalize\">{overallStatus.status}</span>\n            </Badge>\n            <Button \n              variant=\"ghost\" \n              size=\"sm\" \n              onClick={handleRefresh}\n              disabled={isLoading}\n              className=\"h-8 w-8 p-0\"\n              data-testid=\"button-refresh-fda-status\"\n            >\n              <RefreshCw className={cn(\"h-3 w-3\", isLoading && \"animate-spin\")} />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* API Connection Status */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-muted-foreground\">Connection</span>\n            <span className={overallStatus.color} data-testid=\"text-connection-status\">\n              {isLoading ? 'Checking...' : (apiStatus?.message || summaryStats.statusMessage)}\n            </span>\n          </div>\n          \n          {apiStatus?.responseTimeMs && (\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Response Time</span>\n              <span className=\"text-foreground\" data-testid=\"text-response-time\">\n                {apiStatus.responseTimeMs}ms\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* Usage Statistics */}\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center gap-2 text-sm font-medium\">\n            <TrendingUp className=\"h-3 w-3\" />\n            Usage Statistics\n            {apiStatus?.fromCache && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                Cached\n              </Badge>\n            )}\n            {apiStatus?.apiConfig?.hasApiKey && (\n              <Badge variant=\"outline\" className=\"text-xs\">\n                API Key\n              </Badge>\n            )}\n          </div>\n          \n          <div className=\"space-y-1\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-muted-foreground\">Daily Calls</span>\n              <span className=\"font-mono\" data-testid=\"text-daily-usage\">\n                {summaryStats.dailyUsage}\n              </span>\n            </div>\n            \n            {/* Use server stats when available, fallback to local stats */}\n            {apiStatus?.serverUsageStats ? (\n              <>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">This Hour</span>\n                  <span className=\"font-mono\" data-testid=\"text-hourly-usage\">\n                    {apiStatus.serverUsageStats.hourlyUsage}/{apiStatus.serverUsageStats.quotaInfo.hourlyLimit}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Last Minute</span>\n                  <span className=\"font-mono\" data-testid=\"text-minute-usage\">\n                    {apiStatus.serverUsageStats.minuteUsage}/{apiStatus.serverUsageStats.quotaInfo.minuteLimit}\n                  </span>\n                </div>\n                \n                {apiStatus.serverUsageStats.errorRate > 0 && (\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-muted-foreground\">Error Rate</span>\n                    <span className={cn(\"font-mono\", \n                      apiStatus.serverUsageStats.errorRate > 20 ? \"text-red-500\" : \n                      apiStatus.serverUsageStats.errorRate > 10 ? \"text-yellow-500\" : \"text-green-500\"\n                    )} data-testid=\"text-error-rate\">\n                      {apiStatus.serverUsageStats.errorRate.toFixed(1)}%\n                    </span>\n                  </div>\n                )}\n              </>\n            ) : localUsageStats && (\n              <>\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">This Hour (Local)</span>\n                  <span className=\"font-mono\" data-testid=\"text-hourly-usage\">\n                    {localUsageStats.hourlyUsage}/{localUsageStats.quotaInfo.hourlyLimit}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Last Minute (Local)</span>\n                  <span className=\"font-mono\" data-testid=\"text-minute-usage\">\n                    {localUsageStats.minuteUsage}/{localUsageStats.quotaInfo.minuteLimit}\n                  </span>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* Rate Limit Information */}\n        {apiStatus?.rateLimitInfo && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center gap-2 text-sm font-medium\">\n              <Clock className=\"h-3 w-3\" />\n              Rate Limits\n            </div>\n            \n            <div className=\"space-y-1\">\n              <div className=\"flex items-center justify-between text-sm\">\n                <span className=\"text-muted-foreground\">Remaining</span>\n                <span className=\"font-mono\" data-testid=\"text-rate-limit-remaining\">\n                  {apiStatus.rateLimitInfo.remaining}/{apiStatus.rateLimitInfo.total}\n                </span>\n              </div>\n              \n              {apiStatus.rateLimitInfo.minutesUntilReset > 0 && (\n                <div className=\"flex items-center justify-between text-sm\">\n                  <span className=\"text-muted-foreground\">Reset In</span>\n                  <span className=\"font-mono\" data-testid=\"text-rate-limit-reset\">\n                    {apiStatus.rateLimitInfo.minutesUntilReset}m\n                  </span>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Rate Limited Warning */}\n        {!localUsageStats?.canMakeCall && localUsageStats?.nextAvailableTime && (\n          <div className=\"bg-yellow-50 dark:bg-yellow-950 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2 text-sm text-yellow-800 dark:text-yellow-200\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <span className=\"font-medium\">Rate Limited</span>\n            </div>\n            <div className=\"text-xs text-yellow-700 dark:text-yellow-300 mt-1\">\n              Next call available in {formatNextAvailable(localUsageStats.nextAvailableTime)}\n            </div>\n          </div>\n        )}\n\n        {/* Error Information */}\n        {(error || apiStatus?.error) && (\n          <div className=\"bg-red-50 dark:bg-red-950 border border-red-200 dark:border-red-800 rounded-lg p-3\">\n            <div className=\"flex items-center gap-2 text-sm text-red-800 dark:text-red-200\">\n              <XCircle className=\"h-4 w-4\" />\n              <span className=\"font-medium\">API Error</span>\n            </div>\n            <div className=\"text-xs text-red-700 dark:text-red-300 mt-1\" data-testid=\"text-error-details\">\n              {error?.message || apiStatus?.details || 'Unknown error occurred'}\n            </div>\n          </div>\n        )}\n\n        {/* Last Updated */}\n        <div className=\"flex items-center justify-between text-xs text-muted-foreground pt-2 border-t\">\n          <div className=\"flex items-center gap-1\">\n            <Activity className=\"h-3 w-3\" />\n            <span>Last checked</span>\n          </div>\n          <span data-testid=\"text-last-checked\">\n            {apiStatus?.lastChecked ? formatTimeAgo(apiStatus.lastChecked) : 'Never'}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":17861},"client/src/lib/fda-usage-tracker.ts":{"content":"/**\n * FDA API Usage Tracking System\n * \n * Tracks FDA API calls to monitor rate limits and usage patterns.\n * Stores data in localStorage for persistence across sessions.\n */\n\ninterface ApiCallRecord {\n  timestamp: number;\n  endpoint: string;\n  success: boolean;\n  errorType?: string;\n}\n\ninterface UsageStats {\n  dailyUsage: number;\n  hourlyUsage: number;\n  minuteUsage: number;\n  lastCall?: number;\n  canMakeCall: boolean;\n  nextAvailableTime?: number;\n  quotaInfo: {\n    dailyLimit: number;\n    hourlyLimit: number;\n    minuteLimit: number;\n    dailyRemaining: number;\n    hourlyRemaining: number;\n    minuteRemaining: number;\n  };\n}\n\nclass FdaUsageTracker {\n  private static instance: FdaUsageTracker;\n  private readonly storageKey = 'fda_api_usage';\n  private readonly maxStoredRecords = 1000; // Limit stored records for performance\n  \n  // FDA API Limits (public API without API key)\n  // Note: These are default limits, actual limits should come from server\n  private readonly dailyLimit = 1000;\n  private readonly hourlyLimit = 240;\n  private readonly minuteLimit = 240; // FDA allows 240 requests per minute (4/second)\n  \n  private constructor() {\n    this.cleanupOldRecords();\n  }\n\n  public static getInstance(): FdaUsageTracker {\n    if (!FdaUsageTracker.instance) {\n      FdaUsageTracker.instance = new FdaUsageTracker();\n    }\n    return FdaUsageTracker.instance;\n  }\n\n  /**\n   * Record a new API call\n   */\n  public recordApiCall(endpoint: string, success: boolean, errorType?: string): void {\n    if (!this.isLocalStorageAvailable()) {\n      console.warn('localStorage not available, cannot track FDA API usage');\n      return;\n    }\n\n    const record: ApiCallRecord = {\n      timestamp: Date.now(),\n      endpoint,\n      success,\n      errorType\n    };\n\n    const records = this.getStoredRecords();\n    records.push(record);\n\n    // Keep only recent records and limit total count\n    const cutoffTime = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 days\n    const filteredRecords = records\n      .filter(r => r.timestamp > cutoffTime)\n      .slice(-this.maxStoredRecords);\n\n    this.saveRecords(filteredRecords);\n  }\n\n  /**\n   * Get current usage statistics\n   */\n  public getUsageStats(): UsageStats {\n    const records = this.getStoredRecords();\n    const now = Date.now();\n    \n    // Calculate time boundaries\n    const dayStart = new Date().setHours(0, 0, 0, 0);\n    const hourStart = now - (60 * 60 * 1000);\n    const minuteStart = now - (60 * 1000);\n\n    // Count successful calls in each time period\n    const dailyUsage = records.filter(r => \n      r.success && r.timestamp >= dayStart\n    ).length;\n    \n    const hourlyUsage = records.filter(r => \n      r.success && r.timestamp >= hourStart\n    ).length;\n    \n    const minuteUsage = records.filter(r => \n      r.success && r.timestamp >= minuteStart\n    ).length;\n\n    // Find last call timestamp\n    const lastCall = records.length > 0 ? Math.max(...records.map(r => r.timestamp)) : undefined;\n\n    // Calculate remaining quotas\n    const dailyRemaining = Math.max(0, this.dailyLimit - dailyUsage);\n    const hourlyRemaining = Math.max(0, this.hourlyLimit - hourlyUsage);\n    const minuteRemaining = Math.max(0, this.minuteLimit - minuteUsage);\n\n    // Determine if we can make a call and when next call is available\n    const { canMakeCall, nextAvailableTime } = this.calculateAvailability(\n      dailyRemaining, hourlyRemaining, minuteRemaining, records\n    );\n\n    return {\n      dailyUsage,\n      hourlyUsage,\n      minuteUsage,\n      lastCall,\n      canMakeCall,\n      nextAvailableTime,\n      quotaInfo: {\n        dailyLimit: this.dailyLimit,\n        hourlyLimit: this.hourlyLimit,\n        minuteLimit: this.minuteLimit,\n        dailyRemaining,\n        hourlyRemaining,\n        minuteRemaining\n      }\n    };\n  }\n\n  /**\n   * Check if we can make an API call right now\n   */\n  public canMakeCall(): boolean {\n    return this.getUsageStats().canMakeCall;\n  }\n\n  /**\n   * Get when the next API call will be available\n   */\n  public getNextAvailableTime(): number | null {\n    const stats = this.getUsageStats();\n    return stats.nextAvailableTime || null;\n  }\n\n  /**\n   * Get daily usage count\n   */\n  public getDailyUsage(): number {\n    return this.getUsageStats().dailyUsage;\n  }\n\n  /**\n   * Get minute usage count (for burst protection)\n   */\n  public getMinuteUsage(): number {\n    return this.getUsageStats().minuteUsage;\n  }\n\n  /**\n   * Get recent API call history with error information\n   */\n  public getRecentActivity(hours = 24): ApiCallRecord[] {\n    const records = this.getStoredRecords();\n    const cutoff = Date.now() - (hours * 60 * 60 * 1000);\n    \n    return records\n      .filter(r => r.timestamp >= cutoff)\n      .sort((a, b) => b.timestamp - a.timestamp); // Most recent first\n  }\n\n  /**\n   * Get error rate for recent calls\n   */\n  public getErrorRate(hours = 24): number {\n    const recentCalls = this.getRecentActivity(hours);\n    if (recentCalls.length === 0) return 0;\n    \n    const errorCount = recentCalls.filter(r => !r.success).length;\n    return (errorCount / recentCalls.length) * 100;\n  }\n\n  /**\n   * Clear all stored usage data\n   */\n  public clearUsageData(): void {\n    if (this.isLocalStorageAvailable()) {\n      localStorage.removeItem(this.storageKey);\n    }\n  }\n\n  /**\n   * Export usage data for analysis\n   */\n  public exportUsageData(): ApiCallRecord[] {\n    return this.getStoredRecords();\n  }\n\n  /**\n   * Get summary statistics for dashboard display\n   */\n  public getSummaryStats(): {\n    dailyUsage: string;\n    status: 'healthy' | 'warning' | 'critical';\n    statusMessage: string;\n    lastCallAgo?: string;\n  } {\n    const stats = this.getUsageStats();\n    const errorRate = this.getErrorRate(1); // Last hour error rate\n    \n    // Format daily usage\n    const dailyUsage = `${stats.dailyUsage}/${stats.quotaInfo.dailyLimit}`;\n    \n    // Determine status\n    let status: 'healthy' | 'warning' | 'critical' = 'healthy';\n    let statusMessage = 'API ready';\n    \n    if (!stats.canMakeCall) {\n      status = 'critical';\n      if (stats.quotaInfo.dailyRemaining === 0) {\n        statusMessage = 'Daily limit reached';\n      } else if (stats.quotaInfo.hourlyRemaining === 0) {\n        statusMessage = 'Hourly limit reached';\n      } else {\n        statusMessage = 'Rate limited';\n      }\n    } else if (stats.quotaInfo.dailyRemaining < 50 || stats.quotaInfo.hourlyRemaining < 20) {\n      status = 'warning';\n      statusMessage = 'Approaching limits';\n    } else if (errorRate > 20) {\n      status = 'warning';\n      statusMessage = 'High error rate';\n    }\n    \n    // Format last call time\n    let lastCallAgo: string | undefined;\n    if (stats.lastCall) {\n      const minutesAgo = Math.floor((Date.now() - stats.lastCall) / (60 * 1000));\n      if (minutesAgo < 1) {\n        lastCallAgo = 'Just now';\n      } else if (minutesAgo < 60) {\n        lastCallAgo = `${minutesAgo}m ago`;\n      } else {\n        const hoursAgo = Math.floor(minutesAgo / 60);\n        lastCallAgo = `${hoursAgo}h ago`;\n      }\n    }\n    \n    return {\n      dailyUsage,\n      status,\n      statusMessage,\n      lastCallAgo\n    };\n  }\n\n  private calculateAvailability(\n    dailyRemaining: number,\n    hourlyRemaining: number,\n    minuteRemaining: number,\n    records: ApiCallRecord[]\n  ): { canMakeCall: boolean; nextAvailableTime?: number } {\n    \n    // If any quota is exhausted, we can't make a call\n    if (dailyRemaining === 0) {\n      const tomorrow = new Date();\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      tomorrow.setHours(0, 0, 0, 0);\n      return { canMakeCall: false, nextAvailableTime: tomorrow.getTime() };\n    }\n    \n    if (hourlyRemaining === 0) {\n      // Find the oldest call in the last hour and add 1 hour\n      const hourAgo = Date.now() - (60 * 60 * 1000);\n      const hourlyRecords = records\n        .filter(r => r.success && r.timestamp >= hourAgo)\n        .sort((a, b) => a.timestamp - b.timestamp);\n      \n      if (hourlyRecords.length > 0) {\n        const nextAvailable = hourlyRecords[0].timestamp + (60 * 60 * 1000);\n        return { canMakeCall: false, nextAvailableTime: nextAvailable };\n      }\n    }\n    \n    if (minuteRemaining === 0) {\n      // Find the oldest call in the last minute and add 1 minute\n      const minuteAgo = Date.now() - (60 * 1000);\n      const minuteRecords = records\n        .filter(r => r.success && r.timestamp >= minuteAgo)\n        .sort((a, b) => a.timestamp - b.timestamp);\n      \n      if (minuteRecords.length > 0) {\n        const nextAvailable = minuteRecords[0].timestamp + (60 * 1000);\n        return { canMakeCall: false, nextAvailableTime: nextAvailable };\n      }\n    }\n    \n    return { canMakeCall: true };\n  }\n\n  private getStoredRecords(): ApiCallRecord[] {\n    if (!this.isLocalStorageAvailable()) {\n      return [];\n    }\n\n    try {\n      const stored = localStorage.getItem(this.storageKey);\n      return stored ? JSON.parse(stored) : [];\n    } catch (error) {\n      console.warn('Error reading FDA usage data from localStorage:', error);\n      return [];\n    }\n  }\n\n  private saveRecords(records: ApiCallRecord[]): void {\n    if (!this.isLocalStorageAvailable()) {\n      return;\n    }\n\n    try {\n      localStorage.setItem(this.storageKey, JSON.stringify(records));\n    } catch (error) {\n      console.warn('Error saving FDA usage data to localStorage:', error);\n    }\n  }\n\n  private cleanupOldRecords(): void {\n    const records = this.getStoredRecords();\n    const cutoffTime = Date.now() - (7 * 24 * 60 * 60 * 1000); // 7 days\n    const filteredRecords = records.filter(r => r.timestamp > cutoffTime);\n    \n    if (filteredRecords.length !== records.length) {\n      this.saveRecords(filteredRecords);\n    }\n  }\n\n  private isLocalStorageAvailable(): boolean {\n    try {\n      const test = '__fda_tracker_test__';\n      localStorage.setItem(test, test);\n      localStorage.removeItem(test);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n\n// Export singleton instance\nexport const fdaUsageTracker = FdaUsageTracker.getInstance();\nexport type { UsageStats, ApiCallRecord };","size_bytes":10085},"client/src/pages/settings.tsx":{"content":"import FdaApiStatus from \"@/components/dashboard/fda-api-status\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Settings as SettingsIcon } from \"lucide-react\";\n\nexport default function Settings() {\n  return (\n    <div className=\"flex-1 h-screen overflow-auto\">\n      <div className=\"p-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          {/* Header */}\n          <div className=\"mb-8\">\n            <h1 className=\"text-3xl font-bold text-foreground flex items-center\" data-testid=\"text-settings-title\">\n              <SettingsIcon className=\"mr-3 h-8 w-8 text-primary\" />\n              Settings\n            </h1>\n            <p className=\"text-muted-foreground mt-2\">\n              Configure your medical data analysis preferences and monitor system status\n            </p>\n          </div>\n\n          {/* Settings Sections */}\n          <div className=\"space-y-8\">\n            {/* API Status Section */}\n            <div>\n              <h2 className=\"text-xl font-semibold text-foreground mb-4\">\n                API Status & Monitoring\n              </h2>\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <FdaApiStatus />\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-sm font-medium\">API Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2 text-sm text-muted-foreground\">\n                    <p>Monitor your FDA API connectivity and usage limits to ensure uninterrupted medical data analysis.</p>\n                    <p>• <strong>Daily Limits:</strong> 1,000 calls (without API key) or 120,000 calls (with API key)</p>\n                    <p>• <strong>Rate Limits:</strong> 240 calls per minute maximum</p>\n                    <p>• <strong>Usage Tracking:</strong> Real-time monitoring with 7-day history</p>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* Future Settings Sections */}\n            <div>\n              <h2 className=\"text-xl font-semibold text-foreground mb-4\">\n                User Preferences\n              </h2>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-sm font-medium\">Coming Soon</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-sm text-muted-foreground\">\n                  Additional configuration options will be available in future updates.\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":2659}},"version":1}